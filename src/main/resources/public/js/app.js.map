{"version":3,"sources":["app/js/ng-extensions.js","app/js/app.const.js","app/js/common/directives/calendar/calendar.directive.js","app/js/common/directives/calendar/diary.calendar.controller.js","app/js/common/directives/calendar/schedule-item.directive.js","app/js/common/directives/sortable-list/diary-sortable-list.directive.js","app/js/common/directives/tooltip.directive.js","app/js/controller.js","app/js/controller/calendar.controller.js","app/js/controller/edit-lesson.controller.js","app/js/controller/edit-progression-lesson.controller.js","app/js/directives/attachment/attachment.directive.js","app/js/directives/attachment/attachmentsx.directive.js","app/js/directives/calendar-daily-events/calendar-daily-events.controller.js","app/js/directives/calendar-daily-events/calendar-daily-events.directive.js","app/js/directives/confirm/confirm.directive.js","app/js/directives/ent-drop-down.directive.js","app/js/directives/item-calendar/item-calendar.directive.js","app/js/directives/quick-search/diary-timeslot-item.directive.js","app/js/directives/quick-search/quick-search-item.directive.js","app/js/directives/quick-search/quick-search.controller.js","app/js/directives/quick-search/quick-search.directive.js","app/js/directives/search-drop-down/search-drop-down.directive.js","app/js/directives/secure/secure.directive.js","app/js/directives/secure/secure.service.js","app/js/directives/subject-picker.directive.js","app/js/directives/time-picker.directive.js","app/js/filter/array-to-string.filter.js","app/js/filter/highlight.filter.js","app/js/filter/max-char.filter.js","app/js/filter/translate.filter.js","app/js/filter/trust-html.filter.js","app/js/interceptor/http-error.interceptor.js","app/js/model/attachement.model.js","app/js/model/child.model.js","app/js/model/homework.model.js","app/js/model/lesson.model.js","app/js/model/pedagogic-day.model.js","app/js/model/pedagogic-item.model.js","app/js/model/search-form.model.js","app/js/model/subject.model.js","app/js/model/teacher.module.js","app/js/progression/manager/progression-manager.controller.js","app/js/progression/manager/progression.service.js","app/js/progression/right-panel/content/progression-right-panel.controller.js","app/js/progression/right-panel/right-panel.controller.js","app/js/progression/right-panel/right-panel.directive.js","app/js/routes.js","app/js/service/attachement.service.js","app/js/service/audiences.service.js","app/js/service/courses.service.js","app/js/service/homework.service.js","app/js/service/lessons.service.js","app/js/service/modelweek.service.js","app/js/service/pedagogic-item.service.js","app/js/service/subject.service.js","app/js/service/utils.service.js","app/js/visa/visa.controller.js","app/js/model.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpnltrUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClvzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxlYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxhDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnzNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtxhfile":"../dist/js/app.js","sourcesContent":["\"use strict\";\n\nvar AngularExtensions = {\n    moduleConfigs: [],\n    addModuleConfig: function addModuleConfig(callBack) {\n        this.moduleConfigs.push(callBack);\n    },\n    init: function init(module) {\n        angular.forEach(this.moduleConfigs, function (moduleConfig) {\n            moduleConfig.apply(this, [module]);\n        });\n    }\n};\n","\"use strict\";\n\n(function () {\n  'use strict';\n\n  AngularExtensions.addModuleConfig(function (module) {\n    //controller declaration\n    module.value(\"constants\", {\n      CAL_DATE_PATTERN: \"YYYY-MM-DD\",\n      CAL_DATE_PATTERN_NG: \"dd-MM-yyyy\",\n      LONG_DATE_PATTERN: 'YYYY-MM-DD hh:mm:ss',\n      RIGHTS: {\n        CREATE_LESSON: 'diary.createLesson',\n        VIEW: 'diary.view',\n        CREATE_HOMEWORK_FOR_LESSON: 'createHomeworkForLesson',\n        CREATE_FREE_HOMEWORK: 'diary.createFreeHomework',\n        MANAGE_MODEL_WEEK: 'diary.manageModelWeek',\n        MANAGE_VISA: 'diary.manageVisa'\n      }\n    });\n  });\n})();\n","'use strict';\n\n(function () {\n\t'use strict';\n\n\tAngularExtensions.addModuleConfig(function (module) {\n\n\t\tmodule.directive('diaryCalendar', directive);\n\n\t\tfunction directive() {\n\t\t\treturn {\n\t\t\t\trestrict: 'E',\n\t\t\t\ttemplateUrl: '/diary/public/js/common/directives/calendar/calendar.template.html',\n\t\t\t\tscope: {\n\t\t\t\t\titems: '=',\n\t\t\t\t\tmondayOfWeek: '=',\n\t\t\t\t\titemTemplate: '@',\n\t\t\t\t\treadOnly: '=',\n\t\t\t\t\tdisplayTemplate: '=',\n\t\t\t\t\tonCreateOpenAction: '&',\n\t\t\t\t\tparams: '=',\n\t\t\t\t\ttemplateSlotItem: '='\n\t\t\t\t},\n\n\t\t\t\tcontroller: 'DiaryCalendarController',\n\t\t\t\tcontrollerAs: \"DiaryCalendarCtrl\"\n\t\t\t};\n\t\t}\n\t});\n})();\n","\"use strict\";\n\n(function () {\n    'use strict';\n\n    AngularExtensions.addModuleConfig(function (module) {\n\n        module.controller(\"DiaryCalendarController\", controller);\n\n        function controller($scope, $rootScope, $timeout, $window, $element, $location, AudienceService, SubjectService, SecureService, constants) {\n            // use controllerAs practice\n            var vm = this;\n\n            /*\r\n             * Initilisation function\r\n             */\n            init();\n\n            function init() {\n                //display options\n                vm.display = {\n                    editItem: false,\n                    createItem: false,\n                    readonly: false //!SecureService.hasRight(constants.RIGHTS.CREATE_LESSON)\n                };\n\n                /**\r\n                 * Used to know if user clicked on calendar event\r\n                 * or is dragging  to prevent ng-click\r\n                 */\n                vm.itemMouseEvent = {\n                    lastMouseDownTime: undefined,\n                    lastMouseClientX: undefined,\n                    lastMouseClientY: undefined\n                };\n\n                bindEvents();\n            }\n\n            $scope.$watch(\"mondayOfWeek\", function (n, o) {\n\n                if (!$scope.mondayOfWeek) {\n                    return;\n                }\n\n                var date = moment();\n\n                // create calendar objet\n                vm.calendar = new calendar.Calendar({\n                    week: moment($scope.mondayOfWeek).week(),\n                    year: moment($scope.mondayOfWeek).year()\n                });\n\n                /*\r\n                * //TODO no a good practice but all the code refer to model.calendar\r\n                * try to dissociate\r\n                */\n                model.calendar = vm.calendar;\n\n                vm.calendar.week = $scope.mondayOfWeek.week();\n                vm.calendar.setDate($scope.mondayOfWeek);\n\n                $scope.lastDay = moment($scope.mondayOfWeek).add(6, 'd');\n            });\n\n            /*\r\n            *   all events binded here\r\n            */\n            function bindEvents() {\n                //set items watcher\n                $scope.$watch('items', function (n, o) {\n                    vm.refreshCalendar();\n                });\n                // add event listener\n                $scope.$on('calendar.refreshItems', function () {\n                    vm.refreshCalendar();\n                });\n\n                angular.element($window).bind('resize', _.throttle(function () {\n                    $scope.$apply(function () {\n                        disposeItems();\n                    });\n                }, 50));\n            }\n\n            /*\r\n             * refresh calendar every items modification\r\n             */\n            vm.refreshCalendar = function () {\n                if (!vm.calendar) {\n                    return;\n                }\n                var date = moment();\n                vm.calendar.clearScheduleItems();\n                var scheduleItems = _.where(_.map($scope.items, function (item) {\n                    item.beginning = item.startMoment;\n                    item.end = item.endMoment;\n                    return item;\n                }), {\n                    is_periodic: false\n                });\n                vm.calendar.addScheduleItems(scheduleItems);\n                disposeItems();\n            };\n\n            //between not supported on the current underscore version\n            vm.between = function (date, start, end) {\n                return date.isAfter(start) && date.isBefore(end);\n            };\n\n            vm.removeCollisions = function (day) {\n                _.each(day.scheduleItems, function (scheduleItem) {\n                    delete scheduleItem.calendarGutter;\n                });\n            };\n\n            //calc colisions\n            vm.calcAllCollisions = function (item, day) {\n                var calendarGutter = 0;\n                var collision = true;\n                var count = 0;\n                while (collision) {\n                    count++;\n                    collision = false;\n                    day.scheduleItems.forEach(function (scheduleItem) {\n                        if (scheduleItem != item && (vm.between(item.beginning, scheduleItem.beginning, scheduleItem.end) || vm.between(item.end, scheduleItem.beginning, scheduleItem.end) || vm.between(scheduleItem.end, item.beginning, item.end) || scheduleItem.end.isSame(item.end) && scheduleItem.beginning.isSame(item.beginning))) {\n                            if (scheduleItem.calendarGutter === calendarGutter) {\n                                calendarGutter++;\n                                collision = true;\n                                item.hasCollision = true;\n                            }\n                        }\n                    });\n                }\n\n                item.calendarGutter = calendarGutter;\n            };\n\n            /*\r\n            * dispose item elements\r\n            */\n            function disposeItems() {\n                //recal all collisions\n                if (!vm.calendar) {\n                    return;\n                }\n                _.each(vm.calendar.days.all, function (day) {\n                    vm.removeCollisions(day);\n                    _.each(day.scheduleItems.all, function (item) {\n                        vm.calcAllCollisions(item, day);\n                    });\n                });\n\n                _.each(vm.calendar.days.all, function (day) {\n                    _.each(day.scheduleItems.all, function (item) {\n                        disposeItem(item, day);\n                    });\n                });\n            }\n\n            function getWidth(scheduleItem, day) {\n\n                var concurrentItems = _.filter(day.scheduleItems.all, function (item) {\n                    return item.beginning.unix() <= scheduleItem.end.unix() && item.end.unix() >= scheduleItem.beginning.unix();\n                });\n\n                var maxGutter = 0;\n                _.forEach(concurrentItems, function (item) {\n                    if (item.calendarGutter && item.calendarGutter > maxGutter && !item.notShowOnCollision) {\n                        maxGutter = item.calendarGutter;\n                    }\n                });\n                maxGutter++;\n\n                return Math.floor(99 / maxGutter);\n            }\n            /*\r\n            * dispose on item\r\n            */\n            function disposeItem(item, day) {\n\n                var itemWidth = getWidth(item, day);\n                var dayWidth = $element.find('.day').width();\n\n                var beginningMinutesHeight = item.beginning.minutes() * calendar.dayHeight / 60;\n                var endMinutesHeight = item.end.minutes() * calendar.dayHeight / 60;\n                var hours = calendar.getHours(item, day);\n                var top = (hours.startTime - calendar.startOfDay) * calendar.dayHeight + beginningMinutesHeight;\n                var containerTop = \"0px\";\n                var containerHeight = \"100%\";\n\n                var scheduleItemHeight = (hours.endTime - hours.startTime) * calendar.dayHeight - beginningMinutesHeight + endMinutesHeight;\n                if (top < 0) {\n                    containerTop = Math.abs(top) - 5 + 'px';\n                    containerHeight = scheduleItemHeight + top + 5 + 'px';\n                }\n\n                var display = item.notShowOnCollision && item.hasCollision ? \"none\" : 'initial';\n\n                item.position = {\n                    scheduleItemStyle: {\n                        width: itemWidth + '%',\n                        top: top + 'px',\n                        left: item.calendarGutter * (itemWidth * dayWidth / 100) + 'px',\n                        height: scheduleItemHeight + 'px',\n                        display: display\n                    },\n                    containerStyle: {\n                        top: containerTop,\n                        height: containerHeight\n                    }\n                };\n            }\n\n            vm.createItem = function (day, timeslot) {\n                $scope.newItem = {};\n                var year = vm.calendar.year;\n                if (day.index < vm.calendar.firstDay.dayOfYear()) {\n                    year++;\n                }\n                $scope.newItem.beginning = moment().utc().year(year).dayOfYear(day.index).hour(timeslot.start).minute(0).second(0);\n                $scope.newItem.end = moment($scope.newItem.beginning).add(1, 'h');\n                vm.calendar.newItem = $scope.newItem;\n                $scope.onCreateOpen();\n            };\n\n            vm.closeCreateWindow = function () {\n                vm.display.createItem = false;\n                $scope.onCreateClose();\n            };\n\n            vm.updateCalendarWeek = function () {\n                //annoying new year workaround\n                if (moment(vm.calendar.dayForWeek).week() === 1 && moment(vm.calendar.dayForWeek).dayOfYear() > 7) {\n                    vm.calendar = new calendar.Calendar({\n                        week: moment(vm.calendar.dayForWeek).week(),\n                        year: moment(vm.calendar.dayForWeek).year() + 1\n                    });\n                } else if (moment(vm.calendar.dayForWeek).week() === 53 && moment(vm.calendar.dayForWeek).dayOfYear() < 7) {\n                    vm.calendar = new calendar.Calendar({\n                        week: moment(vm.calendar.dayForWeek).week(),\n                        year: moment(vm.calendar.dayForWeek).year() - 1\n                    });\n                } else {\n                    vm.calendar = new calendar.Calendar({\n                        week: moment(vm.calendar.dayForWeek).week(),\n                        year: moment(vm.calendar.dayForWeek).year()\n                    });\n                }\n                model.trigger('calendar.date-change');\n                vm.refreshCalendar();\n            };\n\n            $scope.previousTimeslots = function () {\n                calendar.startOfDay--;\n                calendar.endOfDay--;\n                vm.calendar = new calendar.Calendar({\n                    week: moment(vm.calendar.dayForWeek).week(),\n                    year: moment(vm.calendar.dayForWeek).year()\n                });\n                vm.refreshCalendar();\n            };\n\n            $scope.nextTimeslots = function () {\n                calendar.startOfDay++;\n                calendar.endOfDay++;\n                vm.calendar = new calendar.Calendar({\n                    week: moment(vm.calendar.dayForWeek).week(),\n                    year: moment(vm.calendar.dayForWeek).year()\n                });\n                vm.refreshCalendar();\n            };\n\n            $scope.onCreateOpen = function () {\n                /*if (!allowCreate) {\r\n                    return;\r\n                }*/\n\n                $scope.onCreateOpenAction();\n                //$scope.$eval(attributes.onCreateOpen);\n                vm.display = {\n                    createItem: true\n                };\n            };\n            $scope.onCreateClose = function () {\n                $scope.$eval(attributes.onCreateClose);\n            };\n\n            $scope.setMouseDownTime = function ($event) {\n                vm.itemMouseEvent.lastMouseDownTime = new Date().getTime();\n                vm.itemMouseEvent.lastMouseClientX = $event.clientX;\n                vm.itemMouseEvent.lastMouseClientY = $event.clientY;\n            };\n\n            /**\r\n             * Redirect to path only when user is doind a real click.\r\n             * If user is draging item redirect will not be called\r\n             * @param item Lesson being clicked or dragged\r\n             * @param $event\r\n             */\n            $scope.openOnClickSaveOnDrag = function (item, $event) {\n\n                var path = '/editLessonView/' + item.id;\n\n                // gap between days is quite important\n                var xMouseMoved = Math.abs(vm.itemMouseEvent.lastMouseClientX - $event.clientX) > 30;\n                // gap between minutes is tiny so y mouse move detection must be accurate\n                // so user can change lesson time slightly\n                var yMouseMoved = Math.abs(vm.itemMouseEvent.lastMouseClientY - $event.clientY) > 0;\n\n                // fast click = no drag = real click\n                // or cursor did not move\n                if (!xMouseMoved && !yMouseMoved || new Date().getTime() - vm.itemMouseEvent.lastMouseDownTime < 300) {\n                    // do not redirect to lesson view if user clicked on checkbox\n                    if (!($event.target && $event.target.type === \"checkbox\")) {\n                        $rootScope.redirect(path);\n                    }\n                } else {\n                    //$timeout(vm.refreshCalendar);\n                }\n            };\n\n            //TODO remove from here\n            $scope.createNewtemFromSchedule = function (item) {\n                $scope.newItem = {};\n                var year = vm.calendar.year;\n\n                //set beginning\n                $scope.newItem.beginning = moment(item.startMoment);\n                $scope.newItem.end = moment(item.endMoment);\n\n                AudienceService.getAudiencesAsMap(model.me.structures).then(function (audienceMap) {\n                    //get audience\n                    if (item.data && item.data.classes && item.data.classes.length > 0) {\n                        $scope.newItem.audience = audienceMap[item.data.classes[0]];\n                    }\n                    //get room\n                    if (item.data && item.data.roomLabels && item.data.roomLabels.length > 0) {\n                        $scope.newItem.room = item.data.roomLabels[0];\n                    }\n\n                    if (item.data && item.data.subject) {\n                        //when the item comme from modelweek, the subject is already the good subject\n                        //but if not, we need to grab the good subject object with the good id\n                        // from EDT-UDT\n                        if (item.data.subject.subjectId) {\n                            $scope.newItem.subject = _.find(model.subjects.all, function (subject) {\n                                return subject.originalsubjectid === item.data.subject.subjectId;\n                            });\n                            if (!$scope.newItem.subject) {\n\n                                item.data.subject.teacher_id = model.me.userId;\n\n                                $scope.newItem.subject = SubjectService.mapToDiarySubject(item.data.subject);\n                            }\n                        } else {\n                            //data from modelweek\n                            if (item.data.subject.id) {\n                                $scope.newItem.subject = item.data.subject;\n                            }\n                        }\n                    }\n                    vm.calendar.newItem = $scope.newItem;\n                    $scope.onCreateOpen();\n                });\n            };\n        }\n    });\n})();\n","'use strict';\n\n(function () {\n                      'use strict';\n\n                      AngularExtensions.addModuleConfig(function (module) {\n                                            module.directive('diaryScheduleItem', function ($compile) {\n                                                                  return {\n                                                                                        restrict: 'E',\n                                                                                        require: '^diary-calendar',\n                                                                                        template: '<div class=\"schedule-item\" resizable draggable horizontal-resize-lock\\n                            ng-style=\"item.position.scheduleItemStyle\"\\n                            >\\n                                <container template=\"schedule-display-template\" ng-style=\"item.position.containerStyle\" class=\"absolute\"></container>\\n                            </div>',\n                                                                                        controller: function controller($scope, $element, $timeout) {\n\n                                                                                                              var vm = this;\n\n                                                                                                              $scope.item.$element = $element;\n\n                                                                                                              var parentSchedule = $element.parents('.schedule');\n                                                                                                              var scheduleItemEl = $element.children('.schedule-item');\n\n                                                                                                              scheduleItemEl.find('container').append($compile($scope.displayTemplate)($scope));\n\n                                                                                                              if ($scope.item.beginning.dayOfYear() !== $scope.item.end.dayOfYear() || $scope.item.locked) {\n                                                                                                                                    scheduleItemEl.removeAttr('resizable');\n                                                                                                                                    scheduleItemEl.removeAttr('draggable');\n                                                                                                                                    scheduleItemEl.unbind('mouseover');\n                                                                                                                                    scheduleItemEl.unbind('click');\n                                                                                                                                    scheduleItemEl.data('lock', true);\n                                                                                                              }\n\n                                                                                                              vm.getTimeFromBoundaries = function () {\n\n                                                                                                                                    var dayWidth = parentSchedule.find('.day').width();\n\n                                                                                                                                    // compute element positon added to heiht of 7 hours ao avoid negative value side effect\n                                                                                                                                    var topPos = scheduleItemEl.position().top + calendar.dayHeight * calendar.startOfDay;\n\n                                                                                                                                    var startTime = moment(); //.utc();\n                                                                                                                                    startTime.hour(Math.floor(topPos / calendar.dayHeight));\n                                                                                                                                    startTime.minute(topPos % calendar.dayHeight * 60 / calendar.dayHeight);\n\n                                                                                                                                    var endTime = moment(); //.utc();\n                                                                                                                                    endTime.hour(Math.floor((topPos + scheduleItemEl.height()) / calendar.dayHeight));\n                                                                                                                                    endTime.minute((topPos + scheduleItemEl.height()) % calendar.dayHeight * 60 / calendar.dayHeight);\n\n                                                                                                                                    startTime.year(model.calendar.year);\n                                                                                                                                    endTime.year(model.calendar.year);\n\n                                                                                                                                    var days = $element.parents('.schedule').find('.day');\n                                                                                                                                    var center = scheduleItemEl.offset().left + scheduleItemEl.width() / 2;\n                                                                                                                                    var dayWidth = days.first().width();\n                                                                                                                                    days.each(function (index, item) {\n                                                                                                                                                          var itemLeft = $(item).offset().left;\n                                                                                                                                                          if (itemLeft < center && itemLeft + dayWidth > center) {\n                                                                                                                                                                                var day = index + 1;\n                                                                                                                                                                                var week = model.calendar.week;\n                                                                                                                                                                                endTime.week(week);\n                                                                                                                                                                                startTime.week(week);\n                                                                                                                                                                                if (day === 7) {\n                                                                                                                                                                                                      day = 0;\n                                                                                                                                                                                                      endTime.week(week + 1);\n                                                                                                                                                                                                      startTime.week(week + 1);\n                                                                                                                                                                                }\n                                                                                                                                                                                endTime.day(day);\n                                                                                                                                                                                startTime.day(day);\n                                                                                                                                                          }\n                                                                                                                                    });\n                                                                                                                                    return {\n                                                                                                                                                          startTime: startTime,\n                                                                                                                                                          endTime: endTime\n                                                                                                                                    };\n                                                                                                              };\n\n                                                                                                              scheduleItemEl.on('stopResize', function () {\n                                                                                                                                    var newTime = vm.getTimeFromBoundaries();\n                                                                                                                                    $scope.item.beginning = newTime.startTime;\n                                                                                                                                    $scope.item.end = newTime.endTime;\n\n                                                                                                                                    //$scope.item.date = newTime.startTime;\n                                                                                                                                    $scope.item.startMoment = newTime.startTime;\n                                                                                                                                    $scope.item.endMoment = moment(newTime.endTime);\n\n                                                                                                                                    $scope.item.data.beginning = newTime.startTime;\n                                                                                                                                    $scope.item.data.end = newTime.endTime;\n                                                                                                                                    $scope.item.data.date = newTime.startTime;\n                                                                                                                                    $scope.item.data.startMoment = newTime.startTime;\n                                                                                                                                    $scope.item.data.endMoment = moment(newTime.endTime);\n\n                                                                                                                                    $scope.item.startTime = moment(newTime.startTime).format('HH:mm:ss');\n                                                                                                                                    $scope.item.endTime = moment(newTime.endTime).format('HH:mm:ss');\n\n                                                                                                                                    $scope.$emit('calendar.refreshItems', $scope.item);\n                                                                                                              });\n\n                                                                                                              scheduleItemEl.on('stopDrag', function () {\n\n                                                                                                                                    var newTime = vm.getTimeFromBoundaries();\n\n                                                                                                                                    //concerve same duration on drag/drop\n                                                                                                                                    var duration = $scope.item.end.diff($scope.item.beginning);\n                                                                                                                                    newTime.endTime = moment(newTime.startTime).add(duration);\n\n                                                                                                                                    $scope.item.beginning = newTime.startTime;\n                                                                                                                                    $scope.item.end = newTime.endTime;\n\n                                                                                                                                    $scope.item.date = newTime.startTime;\n                                                                                                                                    $scope.item.startMoment = newTime.startTime;\n                                                                                                                                    $scope.item.endMoment = moment(newTime.endTime);\n\n                                                                                                                                    $scope.item.data.beginning = newTime.startTime;\n                                                                                                                                    $scope.item.data.end = newTime.endTime;\n                                                                                                                                    $scope.item.data.date = newTime.startTime;\n                                                                                                                                    $scope.item.data.startMoment = newTime.startTime;\n                                                                                                                                    $scope.item.data.endMoment = moment(newTime.endTime);\n\n                                                                                                                                    $scope.item.startTime = moment(newTime.startTime).format('HH:mm:ss');\n                                                                                                                                    $scope.item.endTime = moment(newTime.endTime).format('HH:mm:ss');\n\n                                                                                                                                    $scope.$emit('calendar.refreshItems', $scope.item);\n                                                                                                              });\n                                                                                        },\n\n                                                                                        link: function link(scope, element, attributes) {}\n                                                                  };\n                                            });\n                      });\n})();\n","'use strict';\n\n(function () {\n    'use strict';\n\n    AngularExtensions.addModuleConfig(function (module) {\n        module.directive('diarySortableList', sortableDirective);\n        module.directive('diarySortableElement', sortableElementDirective);\n\n        function sortableDirective($compile) {\n            return {\n                restrict: 'A',\n                controller: function controller() {},\n                compile: function compile(element, attributes, transclude) {\n                    var initialHtml = element.html();\n                    return function (scope, element, attributes) {\n                        scope.updateElementsOrder = function (el) {\n\n                            var sortables = element.find('[diary-sortable-element]');\n                            //sortables.removeClass('animated');\n\n                            var elements = _.sortBy(sortables, function (el) {\n                                return $(el).offset().top;\n                            });\n\n                            _.each(elements, function (item, index) {\n                                var itemScope = angular.element(item).scope();\n                                if (index !== itemScope.ngModel) {\n                                    itemScope.ngModel = index;\n                                }\n                            });\n                            sortables.attr('style', '');\n                            scope.$apply();\n                        };\n                    };\n                }\n            };\n        }\n\n        function sortableElementDirective($parse, $timeout) {\n            return {\n                scope: {\n                    ngModel: '=',\n                    ngChange: '&'\n                },\n                require: '^diarySortableList',\n                template: '<div ng-transclude></div>',\n                transclude: true,\n                link: function link(scope, element, attributes) {\n                    var sortables;\n                    var oldValNgModel = void 0;\n\n                    ui.extendElement.draggable(element, {\n                        lock: {\n                            horizontal: true\n                        },\n                        mouseUp: function mouseUp() {\n                            scope.$parent.updateElementsOrder(element);\n\n                            element.on('click', function () {\n                                scope.$parent.$eval(attributes.ngClick);\n                            });\n\n                            if (typeof scope.ngChange === 'function') {\n                                scope.ngChange();\n                            }\n                        },\n                        startDrag: function startDrag() {\n                            sortables = element.parents('[diary-sortable-list]').find('[diary-sortable-element]');\n                            sortables.attr('style', '');\n                            setTimeout(function () {\n                                sortables.addClass('animated');\n                            }, 20);\n                            element.css({\n                                'z-index': 1000\n                            });\n                            element.width(element.outerWidth());\n                        },\n                        tick: function tick() {\n                            var moved = [];\n                            sortables.each(function (index, sortable) {\n                                if (element[0] === sortable) {\n                                    return;\n                                }\n                                var sortableTopDistance = $(sortable).offset().top - parseInt($(sortable).css('margin-top'));\n                                if (element.offset().top + element.height() / 2 > sortableTopDistance && element.offset().top + element.height() / 2 < sortableTopDistance + $(sortable).height()) {\n                                    $(sortable).css({\n                                        'margin-top': element.height()\n                                    });\n                                    moved.push(sortable);\n                                }\n                                //first widget case\n                                if (element.offset().top + element.height() / 2 - 2 < sortableTopDistance && index === 0) {\n                                    $(sortable).css({\n                                        'margin-top': element.height()\n                                    });\n                                    moved.push(sortable);\n                                }\n                            });\n                            sortables.each(function (index, sortable) {\n                                if (moved.indexOf(sortable) === -1) {\n                                    $(sortable).css({\n                                        'margin-top': 0 + 'px'\n                                    });\n                                }\n                            });\n                        }\n                    });\n                }\n            };\n        }\n    });\n})();\n","'use strict';\n\n(function () {\n    'use strict';\n\n    AngularExtensions.addModuleConfig(function (module) {\n\n        module.directive('diaryTooltip', directive);\n\n        var tooltip;\n        function directive($compile) {\n            //create one unique dom element to manage the tooltips\n            if (!tooltip) {\n                tooltip = $('<div />').addClass('diarytooltip').appendTo('body');\n            }\n            return {\n                restrict: 'A',\n                link: function link(scope, element, attributes) {\n                    /*if (ui.breakpoints.tablette >= $(window).width()) {\r\n                        return;\r\n                    }*/\n                    var tooltip = $('<div class=\"tooltip\"/>').appendTo('body');\n                    var position;\n\n                    //create throttled function show\n                    var showThrottled = _.throttle(function () {\n                        if (!attributes.diaryTooltip || attributes.diaryTooltip === 'undefined') {\n                            return;\n                        }\n                        var tip = tooltip.html($compile('<div class=\"arrow\"></div><div class=\"content\">' + lang.translate(attributes.diaryTooltip) + '</div> ')(scope));\n                        position = {\n                            top: parseInt(element.offset().top + element.height()),\n                            left: parseInt(element.offset().left + element.width() / 2 - tip.width() / 2)\n                        };\n                        if (position.top < 5) {\n                            position.top = 5;\n                        }\n                        if (position.left < 5) {\n                            position.left = 5;\n                        }\n\n                        tooltip.css(\"top\", position.top);\n                        tooltip.css(\"left\", position.left);\n\n                        tooltip.fadeIn(100);\n                    });\n                    //bind show function\n                    element.bind('mouseover', showThrottled);\n\n                    //create debounced function hide\n                    var hideDebounced = _.debounce(function () {\n                        tooltip.fadeOut(100);\n                    }, 100);\n                    //bind leave function\n                    element.bind('mouseleave', hideDebounced);\n\n                    //free on detraoy element & handlers\n                    scope.$on(\"$destroy\", function () {\n                        if (tooltip) {\n                            tooltip.remove();\n                        }\n                        element.off();\n                    });\n                }\n            };\n        }\n    });\n})();\n","'use strict';\n\n/**\r\n * Date calendar pattern for url date parsing\r\n * @type {string}\r\n */\nvar CAL_DATE_PATTERN = \"YYYY-MM-DD\";\n\n/**\r\n *\r\n * @param $scope\r\n * @param template\r\n * @param model\r\n * @param route\r\n * @param $location\r\n * @constructor\r\n */\nfunction DiaryController($scope, $rootScope, template, model, route, $location, $window, CourseService, AudienceService, LessonService, SecureService, constants, $sce) {\n\n    model.CourseService = CourseService;\n    model.LessonService = LessonService;\n    $scope.constants = constants;\n    $scope.RIGHTS = constants.RIGHTS;\n\n    $scope.currentErrors = [];\n\n    $scope.data = {\n        tabSelected: 'lesson'\n    };\n\n    $scope.tabs = {\n        createLesson: 'lesson'\n    };\n\n    $rootScope.redirect = function (path) {\n        $location.path(path);\n    };\n\n    $rootScope.trusthtml = function (txt) {\n        return $sce.trustAsHtml(txt);\n    };\n\n    $rootScope.validationError = function (e) {\n        if (typeof e !== 'undefined') {\n            notify.error(e.error);\n            $rootScope.currentErrors = [];\n            $rootScope.currentErrors.push(e);\n            $rootScope.$apply();\n        }\n    };\n\n    $scope.lessonDescriptionIsReadOnly = false;\n    $scope.homeworkDescriptionIsReadOnly = false;\n\n    $scope.calendarLoaded = false;\n    /**\r\n     * Used when refreshing calendar\r\n     * @type {boolean}\r\n     */\n    $scope.showCal = false;\n    /**\r\n     * If false hides the grid/content of calendar,\r\n     * only remains the days at top\r\n     * @type {boolean}\r\n     */\n    $scope.showCalGrid = true;\n    // for static access to some global function\n    $scope.newLesson = new Lesson();\n    $scope.newHomework = new Homework();\n    $scope.newPedagogicItem = new PedagogicItem();\n\n    // variables for show list\n    $scope.pedagogicLessonsSelected = new Array();\n    $scope.pedagogicHomeworksSelected = new Array();\n\n    $scope.getStaticItem = function (itemType) {\n        if ($scope.display.showList == true) {\n            $scope.newPedagogicItem.type_item = itemType;\n            return $scope.newPedagogicItem;\n        } else if (itemType === \"lesson\") {\n            return $scope.newLesson;\n        } else {\n            return $scope.newHomework;\n        }\n    };\n\n    $scope.confirmPanel = {\n        item: undefined\n    };\n\n    $scope.display = {\n        showPanel: false,\n        showShareLessonPanel: false,\n        showShareHomeworkPanel: false,\n        showList: false,\n        hideHomeworkPanel: false,\n        hideCalendar: false\n    };\n\n    $scope.lessons = model.lessons;\n    $scope.audiences = model.audiences;\n    $scope.subjects = model.subjects;\n    $scope.homeworkTypes = model.homeworkTypes;\n    $scope.homeworks = model.homeworks;\n    $scope.homeworksLoad = model.homeworksLoad;\n    $scope.childs = model.childs;\n    $scope.child = model.child;\n    $scope.pedagogicDays = model.pedagogicDays;\n\n    // Says whether or not current user can edit homework & lesson\n    $scope.isLessonHomeworkEditable = model.canEdit();\n\n    // Says whether or not current user is a teacher\n    $scope.isUserTeacher = model.isUserTeacher();\n\n    // Says whether or not current user is a parent\n    $scope.isUserParent = model.isUserParent();\n\n    $scope.searchForm = model.searchForm;\n\n    // variable used to track number of call back calls (see publishCB)\n    $scope.cbCount = 0;\n\n    $scope.selectedDueDate = undefined; // date selected in list view. It can allow to init homework on a different due_date.\n\n    initAudiences();\n    route({\n        manageVisaView: function manageVisaView(params) {\n            template.open('main', 'visa-manager');\n        },\n        progressionEditLesson: function progressionEditLesson(params) {\n            template.open('main', 'progression-edit-lesson');\n        },\n        progressionManagerView: function progressionManagerView(params) {\n            template.open('main', 'progression-manager');\n        },\n        createLessonView: function createLessonView(params) {\n            //$scope.lesson = null;\n            $scope.lessonDescriptionIsReadOnly = false;\n            $scope.homeworkDescriptionIsReadOnly = false;\n            //$scope.openLessonView(null, params);\n\n            template.open('main', 'main');\n            if (SecureService.hasRight(constants.RIGHTS.CREATE_LESSON)) {\n                template.open('main-view', 'create-lesson');\n            }\n        },\n        createHomeworkView: function createHomeworkView() {\n            $scope.homework = null;\n            $scope.homeworkDescriptionIsReadOnly = false;\n            $scope.openHomeworkView(null);\n        },\n        editLessonView: function editLessonView(params) {\n            template.open('main', 'main');\n            if (SecureService.hasRight(constants.RIGHTS.CREATE_LESSON)) {\n                template.open('main-view', 'create-lesson');\n            } else {\n                template.open('main-view', 'view-lesson');\n            }\n        },\n        editHomeworkView: function editHomeworkView(params) {\n            loadHomeworkFromRoute(params);\n        },\n        calendarView: function calendarView(params) {\n            template.open('main', 'main');\n            template.open('main-view', 'calendar');\n            template.open('daily-event-details', 'daily-event-details');\n        },\n        listView: function listView() {\n            //$scope.lesson = null;\n            $scope.homework = null;\n            $scope.pedagogicLessonsSelected = [];\n            $scope.pedagogicHomeworksSelected = [];\n            $scope.showList();\n        },\n        mainView: function mainView() {\n            if ($scope.display.showList) {\n                $scope.goToListView(null);\n            } else {\n                $scope.goToCalendarView(null);\n            }\n        }\n    });\n\n    $scope.setLessonDescriptionMode = function (homeworkId) {\n        if ($scope.lessonDescriptionIsReadOnly) {\n            $scope.lessonDescriptionIsReadOnly = false;\n        } else {\n            $scope.lessonDescriptionIsReadOnly = true;\n        }\n    };\n\n    /**\r\n        * Permet de switcher entre l'aperçu  et l'édition de la description d'un devoir d'une leçon\r\n        */\n    $scope.changeHomeworkDescriptionMode = function (homeworkId, apercu) {\n        var editor = $('#edit_' + homeworkId);\n        var ro = $('#descr_' + homeworkId);\n        var btnApercu = $('#btn_apercu_' + homeworkId);\n        var btnEdit = $('#btn_edit_' + homeworkId);\n\n        if (apercu) {\n            editor.hide();\n            btnApercu.hide();\n            ro.show();\n            btnEdit.show();\n        } else {\n            ro.hide();\n            btnEdit.hide();\n            editor.show();\n            btnApercu.show();\n        }\n    };\n\n    /**\r\n     * Permet d'afficher un aperçu de la description d'une leçon en readonly\r\n     */\n    $scope.setLessonDescriptionMode = function () {\n        if ($scope.lessonDescriptionIsReadOnly) {\n            $scope.lessonDescriptionIsReadOnly = false;\n        } else {\n            $scope.lessonDescriptionIsReadOnly = true;\n        }\n    };\n\n    /**\r\n     * Permet d'afficher un aperçu de la description d'un TAF en readonly\r\n     */\n    $scope.setHomeworkDescriptionMode = function () {\n        if ($scope.homeworkDescriptionIsReadOnly) {\n            $scope.homeworkDescriptionIsReadOnly = false;\n        } else {\n            $scope.homeworkDescriptionIsReadOnly = true;\n        }\n    };\n\n    // Navigation\n    $scope.showList = function () {\n        $scope.display.showList = true;\n        if ($scope.isUserTeacher) {\n            model.searchForm.initForTeacher();\n        } else {\n            model.searchForm.initForStudent();\n        }\n\n        $scope.selectedDueDate = undefined;\n        model.pedagogicDays.syncPedagogicItems($scope.openListView, $rootScope.validationError);\n    };\n\n    $scope.openListView = function () {\n        if (!$scope.isUserTeacher) {\n            model.initSubjects();\n        } else {\n            model.initSubjects();\n        }\n        template.open('main', 'main');\n        template.open('main-view', 'list-view');\n        $scope.$apply();\n    };\n\n    /**\r\n     *\r\n     * @param pedagogicItem\r\n     * @param newWindow if true will open item detail in new windows else in same window\r\n     */\n    $scope.goToItemDetail = function (pedagogicItem, newWindow) {\n        var url = \"\";\n\n        if (pedagogicItem.type_item === 'lesson') {\n            url = \"/editLessonView/\" + pedagogicItem.id + \"/\";\n        } else {\n            // open lesson view if homework is attached to a lesson\n            if (pedagogicItem.lesson_id) {\n                // set default tab to homework tab\n                $scope.tabs.createLesson = 'homeworks';\n                url = \"/editLessonView/\" + pedagogicItem.lesson_id + \"/\" + pedagogicItem.id;\n            } else {\n                url = \"/editHomeworkView/\" + pedagogicItem.id;\n            }\n        }\n\n        if (newWindow) {\n            $window.open('/diary#' + url);\n        } else {\n            $location.url(url);\n        }\n    };\n\n    //list-view interactions\n    $scope.selectDay = function (day) {\n        model.unselectDays();\n        day.selected = true;\n        $scope.selectedDueDate = moment(day.dayName, \"dddd DD MMMM YYYY\");\n    };\n\n    var loadHomeworkFromRoute = function loadHomeworkFromRoute(params) {\n        // try find homework in current week homeworks cache\n        var homework = model.homeworks.findWhere({ id: parseInt(params.idHomework) });\n\n        if (homework != null) {\n            $scope.homeworkDescriptionIsReadOnly = false;\n            $scope.openHomeworkView(homework);\n        }\n        // load from db\n        else {\n                homework = new Homework();\n                homework.id = parseInt(params.idHomework);\n\n                homework.load(function () {\n                    $scope.homeworkDescriptionIsReadOnly = false;\n                    $scope.openHomeworkView(homework, params);\n                }, function (cbe) {\n                    notify.error(cbe.message);\n                });\n            }\n    };\n\n    $scope.openHomeworkView = function (homework, params) {\n\n        if (homework) {\n            if (!$scope.homework) {\n                $scope.homework = new Homework();\n            }\n\n            $scope.homework.updateData(homework);\n            $scope.newItem = {\n                date: $scope.homework.date\n            };\n        } else {\n            var dueDate = $scope.selectedDateInTheFuture();\n            initHomework(dueDate);\n        }\n\n        $scope.showHomeworksLoad($scope.homework, null);\n\n        template.open('main', 'main');\n        if (!$scope.isLessonHomeworkEditable) {\n            template.open('main-view', 'view-homework');\n        } else {\n            template.open('main-view', 'create-homework');\n            template.open('homeworks-load', 'homeworks-load');\n        }\n    };\n\n    /**\r\n     * Switch to main view (list or calendar)\r\n     * @param cb Callback function\r\n     */\n    $scope.goToMainView = function (cb) {\n        $location.path('/mainView');\n\n        if (typeof cb === 'function') {\n            cb();\n        }\n    };\n\n    /**\r\n     * Go to list view\r\n     * @param cb\r\n     */\n    $scope.goToListView = function (cb) {\n        $location.path('/listView');\n    };\n\n    /**\r\n     * Switch to calendar view\r\n     * @param firstMonday First monday formatted as DD/MM/YYYY'\r\n     * @param cb Callback function\r\n     */\n    $scope.goToCalendarView = function (firstMonday, cb) {\n\n        var calendarViewPath = '/calendarView';\n\n        if (typeof firstMonday != 'undefined' && firstMonday != null) {\n            calendarViewPath += '/' + firstMonday;\n        } else {\n            if (model.calendar && model.calendar.week) {\n                calendarViewPath += '/' + moment().week(model.calendar.week).weekday(0).format(CAL_DATE_PATTERN);\n            } else {\n                calendarViewPath += '/' + moment().weekday(0).format(CAL_DATE_PATTERN);\n            }\n        }\n\n        $location.path(calendarViewPath);\n\n        if (typeof cb === 'function') {\n            cb();\n        }\n    };\n\n    /**\r\n     * Deletes selected items (lessons or homeworks)\r\n     * in calendar view from database\r\n     */\n    $scope.deleteSelectedItems = function () {\n        var selectedLessons = $scope.getSelectedPedagogicItems('lesson');\n        var selectedHomeworks = $scope.getSelectedPedagogicItems('homework');\n\n        if (selectedLessons.length + selectedHomeworks.length === 0) {\n            notify.error('daily.nohomeworkorlesson.selected');\n            return;\n        }\n\n        var selectHomeworksToBeDeleted = function selectHomeworksToBeDeleted(selectedHomeworks, selectedLessonsId) {\n            return selectedHomeworks.filter(function (homework) {\n                return homework.lesson_id == null || !_.contains(selectedLessonsId, homework.lesson_id);\n            });\n        };\n\n        var postDelete = function postDelete() {\n            notify.info('item.deleted');\n            $scope.closeConfirmPanel();\n            $scope.$apply();\n        };\n\n        var deleteHomeworks = function deleteHomeworks() {\n            $scope.getStaticItem('homework').deleteList(homeworksToDelete, postDelete,\n            // calback error function\n            function (cbe) {\n                notify.error(cbe.message);\n            });\n        };\n\n        // remove pending delete homeworks\n        // ever embedded in selected pending delete lessons\n        var lessonIds = model.getItemsIds(selectedLessons);\n        var homeworksToDelete = selectHomeworksToBeDeleted(selectedHomeworks, lessonIds);\n\n        // note: associated homeworks are automatically deleted\n        // sql delete cascade\n        if (selectedLessons.length > 0) {\n            $scope.getStaticItem('lesson').deleteList(selectedLessons, function () {\n                if (homeworksToDelete.length > 0) {\n                    deleteHomeworks();\n                } else {\n                    postDelete();\n                }\n            },\n            // calback error function\n            function (cbe) {\n                notify.error(cbe.message);\n            });\n        } else {\n            deleteHomeworks();\n        }\n    };\n\n    /**\r\n     * Open selected lesson or homework\r\n     */\n    $scope.editSelectedItem = function () {\n\n        var selectedLessons = $scope.getSelectedPedagogicItems('lesson');\n        var selectedLesson = selectedLessons.length > 0 ? selectedLessons[0] : null;\n\n        var selectedHomeworks = $scope.getSelectedPedagogicItems('homework');\n        var selectedHomework = selectedHomeworks.length > 0 ? selectedHomeworks[0] : null;\n\n        if (selectedHomework && selectedLesson) {\n            notify.error('Only one homework or lesson must be selected');\n            return;\n        }\n\n        if (selectedLesson) {\n            $rootScope.redirect('/editLessonView/' + selectedLesson.id + '/');\n        } else if (selectedHomework) {\n            // open lesson view if homework is attached to a lesson\n            if (selectedHomework.lesson_id) {\n                // set default tab to homework tab\n                $scope.tabs.createLesson = 'homeworks';\n                $rootScope.redirect('/editLessonView/' + selectedHomework.lesson_id + '/' + selectedHomework.id);\n            } else {\n                $rootScope.redirect('/editHomeworkView/' + selectedHomework.id);\n            }\n        }\n    };\n\n    /**\r\n     * Create homework and publishes it\r\n     * @param homework Homework being created\r\n     * @param isPublish\r\n     * @param goMainView\r\n     */\n    $scope.createAndPublishHomework = function (homework, isPublish, goMainView) {\n        $scope.createOrUpdateHomework(goMainView, function () {\n            $scope.publishHomeworkAndGoCalendarView(homework, isPublish);\n        });\n    };\n\n    /**\r\n     * un/Publish selected lessons\r\n     */\n    $scope.publishSelectedLessons = function (isPublish) {\n        $scope.currentErrors = [];\n        var notifyKey = isPublish ? 'item.published' : 'item.unpublished';\n        $scope.publishLessons($scope.getSelectedPedagogicItems('lesson'), isPublish, notifyKey);\n    };\n\n    /**\r\n     * Publishes or unpublishes lesson and go back to main view\r\n     * @param lesson Lesson\r\n     * @param isPublish if true publishes lesson else un-publishes it\r\n     */\n    $scope.publishLessonAndGoCalendarView = function (lesson, isPublish) {\n        var lessons = [];\n        lessons.push(lesson);\n        var notifyKey = isPublish ? 'lesson.published' : 'lesson.unpublished';\n        $scope.publishLessons(lessons, isPublish, notifyKey, $scope.goToMainView());\n    };\n\n    /**\r\n     * Publish lessons\r\n     * @param lessons Array of lessons to publish or unpublish\r\n     * @param isPublish if true publishes the lessons else unpublishes them\r\n     * @param cb Callback function\r\n     * which is lesson id to delete\r\n     */\n    $scope.publishLessons = function (lessons, isPublish, notifyKey, cb) {\n        $scope.currentErrors = [];\n        $scope.processingData = true;\n\n        model.publishLessons({ ids: model.getItemsIds(lessons) }, isPublish, publishCB(lessons, isPublish, notifyKey, cb), function (e) {\n            $scope.processingData = false;\n            $rootScope.validationError(e);\n        });\n    };\n\n    /**\r\n     * Publishes or unpublishes homework and go back to main view\r\n     * @param homework Homework\r\n     * @param isPublish if true publishes homework else un-publishes it\r\n     */\n    $scope.publishHomeworkAndGoCalendarView = function (homework, isPublish) {\n        var homeworks = [];\n        homeworks.push(homework);\n        var notifyKey = isPublish ? 'item.published' : 'item.unpublished';\n        $scope.publishHomeworks(homeworks, isPublish, notifyKey, $scope.goToMainView());\n    };\n\n    /**\r\n     * Publish or un-publishes homeworks\r\n     * @param homeworks Array of homeworks to publish or unpublish\r\n     * @param isPublish If true publishes lesson else unpublishes it\r\n     * @param cb Callback function\r\n     */\n    $scope.publishHomeworks = function (homeworks, isPublish, cb) {\n        $scope.currentErrors = [];\n        $scope.processingData = true;\n\n        var notifyKey = isPublish ? 'item.published' : 'item.unpublished';\n        model.publishHomeworks({ ids: model.getItemsIds(homeworks) }, isPublish, publishCB(homeworks, isPublish, notifyKey, cb), function (e) {\n            $scope.processingData = false;\n            $rootScope.validationError(e);\n        });\n    };\n\n    /**\r\n     * Callback method after publishing a lesson, homework or mixed list of items\r\n     * @param list items to publish\r\n     * @param toPublish If true publishes lesson else unpublishes it\r\n     * @param notifyKey i18n key used to notify the user at the end of processing\r\n     * @param cb calback function\r\n     */\n    var publishCB = function publishCB(list, toPublish, notifyKey, cb) {\n        list.forEach(function (item) {\n            item.changeState(toPublish);\n        });\n\n        $scope.cbCount--;\n        $scope.closeConfirmPanel();\n\n        if ($scope.cbCount <= 0) {\n            $scope.cbCount = 0; // can't let cbCount go on negative to impact future calls.\n            notify.info(notifyKey);\n            if (typeof cb === 'function') {\n                cb();\n            }\n        }\n    };\n\n    /**\r\n     * Load homeworks for current lesson being edited\r\n     * @param cb Callback function\r\n     */\n    $scope.loadHomeworksForCurrentLesson = function (cb) {\n        console.warn(\"deprecated\");\n        return;\n\n        // lesson not yet created do not retrieve homeworks\n        if (!$scope.lesson.id) {\n            return;\n        }\n\n        var needSqlSync = false;\n\n        // if homeworks ever retrieved from db don't do it again!\n        $scope.lesson.homeworks.forEach(function (homework) {\n            if (!homework.loaded) {\n                needSqlSync = true;\n            }\n        });\n\n        // only reload homeworks if necessary\n        if (needSqlSync) {\n            model.loadHomeworksForLesson($scope.lesson, function () {\n                if (typeof cb !== 'undefined') {\n                    cb();\n                }\n                $scope.$apply();\n            }, function (e) {\n                $rootScope.validationError(e);\n            });\n        } else {\n            if (typeof cb !== 'undefined') {\n                cb();\n            }\n        }\n    };\n\n    // Date functions\n    $scope.formatDate = function (date) {\n        return $scope.formatMoment(moment(date));\n    };\n\n    $scope.formatMoment = function (moment) {\n        return moment.lang('fr').format('DD/MM/YYYY');\n    };\n\n    $scope.formatTime = function (time) {\n        return moment(time).lang('fr').format('H:mm');\n    };\n\n    /**\r\n     * Close confirmation panel\r\n     */\n    $scope.closeConfirmPanel = function () {\n\n        $scope.processingData = false;\n        $scope.display.showPanel = false;\n        template.close('lightbox');\n    };\n\n    /**\r\n     * Display confirmation panel\r\n     * @param panelContent Html confirm panel file\r\n     * @param item Optional item\r\n     */\n    $scope.showConfirmPanel = function (panelContent, item) {\n        template.open('lightbox', panelContent);\n        $scope.display.showPanel = true;\n        $scope.confirmPanel.item = item;\n    };\n\n    $rootScope.showConfirmPanel = $scope.showConfirmPanel;\n\n    /**\r\n     * Test in calendar view if there are one lesson\r\n     * or one homework only selected (not both lessons and homeworks)\r\n     * @returns {boolean}\r\n     */\n    $scope.isOneHomeworkOrLessonStriclySelected = function () {\n        return $scope.getSelectedPedagogicItems('lesson').length + $scope.getSelectedPedagogicItems('homework').length == 1;\n    };\n\n    /**\r\n     * Get selected items from calendar (lessons and homeworks)\r\n     * and tidy them within un/publishable state\r\n     */\n    var getPublishableItemsSelected = function getPublishableItemsSelected() {\n\n        var publishableSelectedLessons = [];\n        var unPublishableSelectedLessons = [];\n        var noStateChangeLessons = [];\n\n        var publishableSelectedHomeworks = [];\n        var unPublishableSelectedHomeworks = [];\n        var noStateChangeHomeworks = []; // eg.: homework attached to a lesson\n\n        $scope.getSelectedPedagogicItems('lesson').forEach(function (lesson) {\n            if (lesson.isPublishable(true)) {\n                publishableSelectedLessons.push(lesson);\n            } else if (lesson.isPublishable(false)) {\n                unPublishableSelectedLessons.push(lesson);\n            } else {\n                noStateChangeLessons.push(lesson);\n            }\n        });\n\n        // only free homeworks can be published/unpublished\n        $scope.getSelectedPedagogicItems('homework').forEach(function (homework) {\n            if (homework.isPublishable(true)) {\n                publishableSelectedHomeworks.push(homework);\n            } else if (homework.isPublishable(false)) {\n                unPublishableSelectedHomeworks.push(homework);\n            } else {\n                noStateChangeHomeworks.push(homework);\n            }\n        });\n\n        return {\n            publishableSelectedLessons: publishableSelectedLessons,\n            unPublishableSelectedLessons: unPublishableSelectedLessons,\n            noStateChangeLessons: noStateChangeLessons,\n            publishableSelectedHomeworks: publishableSelectedHomeworks,\n            unPublishableSelectedHomeworks: unPublishableSelectedHomeworks,\n            noStateChangeHomeworks: noStateChangeHomeworks\n        };\n    };\n\n    $scope.publishSelectedItems = function (toPublish) {\n\n        var itemsToBePublished = getPublishableItemsSelected();\n        var homeworks = toPublish ? itemsToBePublished.publishableSelectedHomeworks : itemsToBePublished.unPublishableSelectedHomeworks;\n        var lessons = toPublish ? itemsToBePublished.publishableSelectedLessons : itemsToBePublished.unPublishableSelectedLessons;\n\n        var notifyKey = toPublish ? 'item.published' : 'item.unpublished';\n        $scope.processingData = true;\n        var cbCount = (lessons.length > 0 ? 1 : 0) + (homeworks.length > 0 ? 1 : 0);\n        $scope.cbCount = cbCount;\n\n        if (lessons.length > 0) {\n            model.publishLessons({ ids: model.getItemsIds(lessons) }, toPublish, publishCB(lessons, toPublish, notifyKey), function (cbe) {\n                notify.error(cbe.message);\n            });\n        }\n\n        if (homeworks.length > 0) {\n            model.publishHomeworks({ ids: model.getItemsIds(homeworks) }, toPublish, publishCB(homeworks, toPublish, notifyKey), function (cbe) {\n                notify.error(cbe.message);\n            });\n        }\n    };\n\n    $scope.getItemsPublishableSelectedCount = function (toPublish) {\n\n        var itemsSelected = getPublishableItemsSelected();\n\n        if (toPublish) {\n            return itemsSelected.publishableSelectedLessons.length + itemsSelected.publishableSelectedHomeworks.length;\n        } else {\n            return itemsSelected.unPublishableSelectedLessons.length + itemsSelected.unPublishableSelectedHomeworks.length;\n        }\n    };\n\n    /**\r\n     * Telles whether it is possible to publish or not selected items.\r\n     * It depends of type of items selected and current state\r\n     * @param toPublish\r\n     * @returns {boolean} true if selected items can be published\r\n     * and are not ever in publish state otherwise false\r\n     */\n    $scope.hasPublishableOnlyItemsSelected = function (toPublish) {\n        var itemsSelected = getPublishableItemsSelected();\n\n        var publishableLessons = itemsSelected.publishableSelectedLessons;\n        var unpublishableLessons = itemsSelected.unPublishableSelectedLessons;\n        var noStateChangeLessons = itemsSelected.noStateChangeLessons;\n\n        var publishableHomeworks = itemsSelected.publishableSelectedHomeworks;\n        var unpublishableHomeworks = itemsSelected.unPublishableSelectedHomeworks;\n        var noStateChangeHomeworks = itemsSelected.noStateChangeHomeworks;\n\n        if (noStateChangeLessons.length > 0 || noStateChangeHomeworks.length > 0) {\n            return false;\n        }\n\n        if (toPublish) {\n            // nothing selected\n            if (publishableLessons.length + publishableHomeworks.length == 0) {\n                return false;\n            } else {\n                var noUnpublishableItems = unpublishableHomeworks.length == 0 && unpublishableLessons.length == 0;\n                return publishableLessons.length > 0 && noUnpublishableItems || publishableHomeworks.length > 0 && noUnpublishableItems;\n            }\n        } else {\n            // nothing selected\n            if (unpublishableLessons.length + unpublishableHomeworks.length == 0) {\n                return false;\n            } else {\n                var noPublishableItems = publishableLessons.length == 0 && publishableHomeworks.length == 0;\n                return unpublishableLessons.length > 0 && noPublishableItems || unpublishableHomeworks.length > 0 && noPublishableItems;\n            }\n        }\n    };\n\n    var getSelectedHomeworks = function getSelectedHomeworks() {\n        return model.homeworks.selection();\n    };\n\n    var getSelectedLessons = function getSelectedLessons() {\n        return model.lessons.selection();\n    };\n\n    $scope.toggleShowHomeworkInLesson = function (homework) {\n        homework.expanded = !homework.expanded;\n    };\n\n    $scope.deleteHomeworkAndCloseConfirmPanel = function (homework, lesson) {\n        $scope.deleteHomework(homework, lesson, function () {\n            $scope.closeConfirmPanel();\n        });\n    };\n\n    /**\r\n     * Deletes an homework\r\n     * @param cb Callback function\r\n     * @param homework Homework to be deleted\r\n     * @param lesson Lesson attached to homework (optional)\r\n     */\n    $scope.deleteHomework = function (homework, lesson, cb) {\n\n        homework.delete(lesson, function () {\n            notify.info('homework.deleted');\n            $scope.$apply();\n\n            if (typeof cb === 'function') {\n                cb();\n            }\n        }, function (e) {\n            $rootScope.validationError(e);\n        });\n    };\n\n    $scope.createOrUpdateHomework = function (goToMainView, cb) {\n\n        $scope.currentErrors = [];\n        if ($scope.newItem) {\n            $scope.homework.dueDate = $scope.newItem.date;\n        }\n\n        var postHomeworkSave = function postHomeworkSave() {\n            //$scope.showCal = !$scope.showCal;\n            notify.info('homework.saved');\n            $scope.homework.audience = model.audiences.findWhere({ id: $scope.homework.audience.id });\n            $scope.$apply();\n\n            if (typeof cb === 'function') {\n                cb();\n            }\n\n            if (goToMainView) {\n                $scope.goToMainView();\n                $scope.lesson = null;\n                $scope.homework = null;\n            }\n        };\n\n        $scope.homework.save(function () {\n            if (this.lesson_id) {\n                syncHomeworks(postHomeworkSave);\n            } else {\n                syncLessonsAndHomeworks(postHomeworkSave);\n            }\n        }, function (e) {\n            $rootScope.validationError(e);\n        });\n    };\n\n    /**\r\n     * Refresh homework load for all homeworks of current lesson\r\n     */\n    $scope.refreshHomeworkLoads = function (lesson) {\n\n        $scope.countdown = lesson.homeworks.all.length;\n\n        lesson.homeworks.all.forEach(function (homework) {\n            model.loadHomeworksLoad(homework, moment(homework.date).format(\"YYYY-MM-DD\"), lesson.audience.id, applyScopeOnFinish);\n        });\n    };\n\n    var applyScopeOnFinish = function applyScopeOnFinish() {\n        $scope.countdown--;\n\n        if ($scope.countdown == 0) {\n            $scope.$apply();\n        }\n    };\n\n    var decrementCountdown = function decrementCountdown(bShowTemplates, cb) {\n        $scope.countdown--;\n        if ($scope.countdown == 0) {\n            $scope.calendarLoaded = true;\n            $scope.currentSchool = model.currentSchool;\n\n            if (bShowTemplates) {\n                showTemplates();\n            }\n            if (typeof cb === 'function') {\n                cb();\n            }\n        }\n    };\n\n    var showTemplates = function showTemplates() {\n        template.open('main', 'main');\n        template.open('main-view', 'calendar');\n        template.open('create-lesson', 'create-lesson');\n        template.open('create-homework', 'create-homework');\n        template.open('daily-event-details', 'daily-event-details');\n        template.open('daily-event-item', 'daily-event-item');\n        //$scope.$apply();\n    };\n\n    /**\r\n     * Refresh calendar view for current week\r\n     */\n    $scope.refreshCalendarCurrentWeek = function () {\n        $scope.show(moment(model.calendar.firstDay));\n    };\n\n    $scope.addHomeworkToLesson = function (lesson) {\n        lesson.addHomework(lesson);\n    };\n\n    $scope.getPedagogicItemSelectedCount = function () {\n        return $scope.getSelectedPedagogicItems('lesson').length + $scope.getSelectedPedagogicItems('homework').length;\n    };\n\n    // gets the selected date from pedagogic items but can't be in the past.\n    $scope.selectedDateInTheFuture = function () {\n        var date = model.selectedPedagogicDate();\n        return moment().min(moment(date), moment()).format(\"YYYY-MM-DD\"); // see moment.js doc on min pre 2.7.0 version (highly confusing !)\n    };\n\n    /**\r\n    * update pedagogic items selected\r\n    */\n    $scope.updatePedagogicItemsSelected = function (itemType) {\n        var selectedItems = new Array();\n        model.pedagogicDays.forEach(function (day) {\n            selectedItems = selectedItems.concat(day.pedagogicItemsOfTheDay.filter(function (item) {\n                return item && item.type_item === itemType && item.selected;\n            }));\n        });\n\n        if (itemType === 'homework') {\n            $scope.pedagogicHomeworksSelected = selectedItems;\n        } else {\n            $scope.pedagogicLessonsSelected = selectedItems;\n        }\n    };\n\n    /**\r\n    * get selected pedagogic items from item type\r\n    */\n    $scope.getSelectedPedagogicItems = function (itemType) {\n\n        // share from lesson view\n        if ($scope.viewedLessonToShare) {\n            return $scope.viewedLessonToShare;\n        }\n        // share from homework view\n        else if ($scope.viewedHomeworkToShare) {\n                return $scope.viewedHomeworkToShare;\n            }\n\n        // list view\n        if ($scope.display.showList == true) {\n            if (itemType === 'homework') {\n                return $scope.pedagogicHomeworksSelected;\n            } else {\n                return $scope.pedagogicLessonsSelected;\n            }\n        }\n        // calendar view\n        else {\n                if (itemType === 'homework') {\n                    return getSelectedHomeworks();\n                } else {\n                    return getSelectedLessons();\n                }\n            }\n    };\n\n    /**\r\n     * Init homework object on create\r\n     * @param dueDate if set the dueDate of the homework\r\n     */\n    var initHomework = function initHomework(dueDate) {\n        $scope.homework = model.initHomework(dueDate);\n        $scope.newItem = {\n            date: $scope.homework.date\n        };\n    };\n\n    /**\r\n     * Minify the homework panel or not\r\n     * If it's minified, will only show one max homework\r\n     * else 3\r\n     */\n    //TODO unused?\n    /*  $scope.toggleHomeworkPanelMinified = function(){\r\n          $scope.display.bShowHomeworksMinified = model.show.bShowHomeworksMinified;\r\n          model.placeCalendarAndHomeworksPanel(model.show.bShowCalendar, model.show.bShowHomeworks, !model.show.bShowHomeworksMinified);\r\n      };\r\n      */\n\n    $scope.toggleFilterOnHomework = function () {\n        $scope.searchForm.displayHomework = model.searchForm.displayHomework;\n        model.searchForm.displayHomework = !model.searchForm.displayHomework;\n    };\n\n    $scope.toggleFilterOnLesson = function () {\n        $scope.searchForm.displayLesson = model.searchForm.displayLesson;\n        model.searchForm.displayLesson = !model.searchForm.displayLesson;\n    };\n\n    $scope.performPedagogicItemSearch = function () {\n        model.performPedagogicItemSearch($scope.searchForm.getSearch(), $scope.isUserTeacher, $scope.openListView, $rootScope.validationError);\n    };\n\n    /*\r\n    $scope.loadMorePreviousLessonsFromLesson = function (currentLesson) {\r\n        model.getPreviousLessonsFromLesson(currentLesson, true, function(){$scope.$apply()}, $rootScope.validationError);\r\n    };\r\n    */\n\n    /**\r\n     * Load previous lessons data from current lesson being edited\r\n     * @param currentLesson Current lesson being edited\r\n     */\n    $scope.loadPreviousLessonsFromLesson = function (currentLesson) {\n        model.getPreviousLessonsFromLesson(currentLesson, false, function () {\n            $scope.$apply();\n        }, $rootScope.validationError);\n    };\n\n    $scope.itemTypesDisplayed = function (item) {\n        if (item.type_item == \"lesson\" && $scope.searchForm.displayLesson || item.type_item == \"homework\" && $scope.searchForm.displayHomework) {\n            return true;\n        }\n        return false;\n    };\n\n    /**\r\n     * Opens the share lesson panel\r\n     * seee main;html -> getSelectedPedagogicItems\r\n     * @param item\r\n     */\n    $scope.openShareLessonPanel = function (viewedLesson) {\n\n        $scope.viewedHomeworkToShare = null;\n\n        if (viewedLesson) {\n            $scope.viewedLessonToShare = new Array();\n            $scope.viewedLessonToShare.push(viewedLesson);\n        } else {\n            $scope.viewedLessonToShare = null;\n        }\n\n        $scope.display.showShareLessonPanel = true;\n    };\n\n    /**\r\n     * Open the share homework panel\r\n     * see main.html -> getSelectedPedagogicItems\r\n     */\n    $scope.openShareHomeworkPanel = function (viewedHomework) {\n\n        $scope.viewedLessonToShare = null;\n\n        if (viewedHomework) {\n            $scope.viewedHomeworkToShare = new Array();\n            $scope.viewedHomeworkToShare.push(viewedHomework);\n        } else {\n            $scope.viewedHomeworkToShare = null;\n        }\n        $scope.display.showShareHomeworkPanel = true;\n    };\n\n    /**\r\n     * Display homework load for current homework\r\n     * @param forcedDate Date in millis since 1970-1-1\r\n     * @param homework\r\n     */\n    $scope.showHomeworksLoad = function (homework, forcedDate, callback) {\n\n        var cb; //= function (){};\n\n        if (callback) {\n            if (typeof callback === 'function') {\n                cb = callback;\n            }\n        }\n\n        var callbackErrorFunc = function callbackErrorFunc() {\n            // TODO propagate error to front\n        };\n\n        var date = forcedDate ? forcedDate : homework.date;\n        var formattedDate = moment(date).format(\"YYYY-MM-DD\");\n\n        model.loadHomeworksLoad(homework, formattedDate, homework.audience.id, cb, callbackErrorFunc);\n    };\n\n    $scope.isHighHomeworkLoad = function (homeworkLoad) {\n        return homeworkLoad.countLoad > 2;\n    };\n\n    $scope.isLowHomeworkLoad = function (homeworkLoad) {\n        return homeworkLoad.countLoad == 1;\n    };\n\n    $scope.isMediumHomeworkLoad = function (homeworkLoad) {\n        return homeworkLoad.countLoad == 2;\n    };\n\n    $scope.isNoHomeworkLoad = function (homeworkLoad) {\n        return homeworkLoad.countLoad == 0;\n    };\n\n    $scope.displayPreviousLessonsTabAndLoad = function (lesson) {\n        console.warn(\"deprecated\");\n        return;\n        $scope.tabs.createLesson = 'previouslessons';\n        $scope.loadPreviousLessonsFromLesson(lesson);\n    };\n\n    /**\r\n     * Show more previous lessons.\r\n     * By default number of previous lessons is 3.\r\n     * Will increase displayed previous lesson by 3.\r\n     */\n    //TODO remove\n    $scope.showMorePreviousLessons = function (lesson) {\n        console.log(\"error not used\");\n        return;\n        var displayStep = 3;\n        lesson.previousLessonsDisplayed = lesson.previousLessons.slice(0, Math.min(lesson.previousLessons.length, lesson.previousLessonsDisplayed.length + displayStep));\n    };\n\n    function initAudiences() {\n        model.audiences.all = [];\n        //var nbStructures = model.me.structures.length;\n\n        model.currentSchool = model.me.structures[0];\n\n        AudienceService.getAudiences(model.me.structures).then(function (audiences) {\n            model.audiences.addRange(audiences);\n            model.audiences.trigger('sync');\n            model.audiences.trigger('change');\n            if (typeof cb === 'function') {\n                cb();\n            }\n        });\n    }\n}\n","'use strict';\n\n(function () {\n    'use strict';\n\n    AngularExtensions.addModuleConfig(function (module) {\n        //controller declaration\n        module.controller(\"CalendarController\", controller);\n\n        function controller($scope, $rootScope, $timeout, CourseService, $routeParams, constants, $location, HomeworkService, UtilsService, LessonService, $q, SubjectService, ModelWeekService, SecureService) {\n\n            var vm = this;\n\n            $timeout(init);\n            /*\r\n             * initialisation calendar function\r\n             */\n            function init() {\n                //view controls\n                $scope.display.showList = false;\n                //calendarDailyEvent directive options\n                $scope.display.bShowCalendar = true;\n                $scope.display.bShowHomeworks = true;\n                $scope.display.bShowHomeworksMinified = false;\n                //$scope.showCal = false;\n                //calendar Params\n                $scope.calendarParams = {\n                    isUserTeacher: $scope.isUserTeacher\n                };\n\n                //handler calendar updates :\n                $scope.$on('calendar.refreshItems', function (_, item) {\n                    item.calendarUpdate();\n                });\n            }\n\n            //watch delete or add\n            $scope.$watch(function () {\n                if (model && model.lessons && model.lessons.all) {\n                    return model.lessons.all.length;\n                } else {\n                    return 0;\n                }\n            }, function () {\n                $scope.itemsCalendar = [].concat(model.lessons.all).concat($scope.courses);\n            });\n\n            $scope.$watch('routeParams', function (n, o) {\n\n                var mondayOfWeek = moment();\n                // mondayOfWeek as string date formatted YYYY-MM-DD\n                if ($scope.routeParams.mondayOfWeek) {\n                    mondayOfWeek = moment($scope.routeParams.mondayOfWeek);\n                } else {\n                    if (model.mondayOfWeek) {\n                        mondayOfWeek = model.mondayOfWeek;\n                    } else {\n                        mondayOfWeek = mondayOfWeek.weekday(0);\n                    }\n                }\n                model.mondayOfWeek = mondayOfWeek;\n                $scope.showCalendar(mondayOfWeek);\n            }, true);\n\n            $scope.routeParams = $routeParams;\n\n            /**\r\n             * Opens the next week view of calendar\r\n             */\n            $scope.nextWeek = function () {\n                var nextMonday = moment($scope.mondayOfWeek).add(7, 'd');\n                $location.path('/calendarView/' + nextMonday.format(constants.CAL_DATE_PATTERN));\n            };\n\n            /**\r\n             * Opens the previous week view of calendar\r\n             */\n            $scope.previousWeek = function () {\n                var nextMonday = moment($scope.mondayOfWeek).add(-7, 'd');\n                $location.path('/calendarView/' + nextMonday.format(constants.CAL_DATE_PATTERN));\n            };\n\n            /**\r\n             * Load related data to lessons and homeworks from database\r\n             * @param cb Callback function\r\n             * @param bShowTemplates if true loads calendar templates after data loaded\r\n             * might be used when\r\n             */\n            var initialization = function initialization(bShowTemplates, cb) {\n\n                // will force quick search panel to load (e.g: when returning to calendar view)\n                // see ng-extensions.js -> quickSearch directive\n                model.lessonsDropHandled = false;\n                model.homeworksDropHandled = false;\n\n                $scope.countdown = 2;\n\n                // auto creates diary.teacher\n                if (\"ENSEIGNANT\" === model.me.type) {\n                    var teacher = new Teacher();\n                    teacher.create(decrementCountdown(bShowTemplates, cb), $rootScope.validationError);\n                } else {\n                    decrementCountdown(bShowTemplates, cb);\n                }\n\n                // subjects and audiences needed to fill in\n                // homeworks and lessons props\n\n                model.childs.syncChildren(function () {\n                    $scope.child = model.child;\n                    $scope.children = model.childs;\n                    SubjectService.getCustomSubjects(model.isUserTeacher()).then(function (subjects) {\n                        model.subjects.all = [];\n                        if (subjects) {\n                            model.subjects.addRange(subjects);\n                        }\n                    }).then(function () {\n                        decrementCountdown(bShowTemplates, cb);\n                        model.homeworkTypes.syncHomeworkTypes(function () {\n                            // call lessons/homework sync after audiences sync since\n                            // lesson and homework objects needs audience data to be built\n                            refreshDatas(UtilsService.getUserStructuresIdsAsString(), $scope.mondayOfWeek, model.isUserParent, model.child ? model.child.id : undefined);\n                        }, $rootScope.validationError);\n                    }, $rootScope.validationError);\n                });\n            };\n\n            var decrementCountdown = function decrementCountdown(bShowTemplates, cb) {\n                $scope.countdown--;\n                if ($scope.countdown == 0) {\n                    $scope.calendarLoaded = true;\n                    $scope.currentSchool = model.currentSchool;\n\n                    if (bShowTemplates) {\n                        showTemplates();\n                    }\n                    if (typeof cb === 'function') {\n                        cb();\n                    }\n                }\n            };\n\n            /**\r\n             *\r\n             * @param momentMondayOfWeek First day (monday) of week to display lessons and homeworks\r\n             */\n            $scope.showCalendar = function (mondayOfWeek) {\n                $scope.display.showList = false;\n\n                $scope.mondayOfWeek = mondayOfWeek;\n                if (!$scope.calendarLoaded) {\n                    initialization(true);\n                    return;\n                }\n\n                if (!$scope.mondayOfWeek) {\n                    $scope.mondayOfWeek = moment();\n                }\n\n                $scope.mondayOfWeek = $scope.mondayOfWeek.weekday(0);\n\n                model.lessonsDropHandled = false;\n                model.homeworksDropHandled = false;\n                $scope.display.showList = false;\n\n                // need reload lessons or homeworks if week changed\n                var syncItems = true; //momentMondayOfWeek.week() != model.calendar.week;\n\n                //$scope.lesson = null;\n                //$scope.homework = null;\n\n\n                refreshDatas(UtilsService.getUserStructuresIdsAsString(), $scope.mondayOfWeek, model.isUserParent, model.child ? model.child.id : undefined);\n            };\n\n            function refreshDatas(structureIds, mondayOfWeek, isUserParent, childId) {\n\n                var p1 = LessonService.getLessons(structureIds, mondayOfWeek, isUserParent, childId);\n                var p2 = HomeworkService.getHomeworks(structureIds, mondayOfWeek, isUserParent, childId);\n\n                //dont load courses if is not at teacher\n                var p3 = $q.when([]);\n                var p4 = $q.when([]);\n                if (model.isUserTeacher()) {\n                    //TODO use structureIds\n                    p3 = CourseService.getMergeCourses(model.me.structures[0], model.me.userId, mondayOfWeek);\n                    if (SecureService.hasRight(constants.RIGHTS.MANAGE_MODEL_WEEK)) {\n                        p4 = ModelWeekService.getModelWeeks();\n                    }\n                }\n\n                return $q.all([p1, p2, p3, p4]).then(function (results) {\n                    var lessons = results[0];\n                    var homeworks = results[1];\n                    $scope.courses = results[2];\n                    $scope.modelWeeks = results[3];\n\n                    var p = void 0;\n                    if (!$scope.courses || $scope.courses.length === 0) {\n                        p = ModelWeekService.getCoursesModel($scope.mondayOfWeek).then(function (modelCourses) {\n                            $scope.courses = modelCourses;\n                        });\n                    } else {\n                        p = $q.when();\n                    }\n\n                    p.then(function () {\n                        model.lessons.all.splice(0, model.lessons.all.length);\n                        model.lessons.addRange(lessons);\n                        model.homeworks.all.splice(0, model.homeworks.all.length);\n                        model.homeworks.addRange(homeworks);\n                        $scope.itemsCalendar = [].concat(model.lessons.all).concat($scope.courses);\n                    });\n                });\n            }\n\n            $scope.setChildFilter = function (child, cb) {\n\n                $scope.children.forEach(function (theChild) {\n                    theChild.selected = theChild.id === child.id;\n                });\n\n                child.selected = true;\n                $scope.child = child;\n                model.child = child;\n\n                refreshDatas(UtilsService.getUserStructuresIdsAsString(), $scope.mondayOfWeek, true, child.id);\n            };\n\n            $scope.showCalendarForChild = function (child) {\n                $scope.setChildFilter(child);\n            };\n\n            var showTemplates = function showTemplates() {\n                template.open('main', 'main');\n                template.open('main-view', 'calendar');\n                template.open('create-lesson', 'create-lesson');\n                template.open('create-homework', 'create-homework');\n                template.open('daily-event-details', 'daily-event-details');\n                template.open('daily-event-item', 'daily-event-item');\n            };\n\n            /**\r\n             * Display or hide the homework panel\r\n             * in calendar view\r\n             */\n            $scope.toggleHomeworkPanel = function () {\n                $scope.display.bShowHomeworks = !$scope.display.bShowHomeworks;\n\n                if (!$scope.display.bShowHomeworks && !$scope.display.bShowCalendar) {\n                    $scope.display.bShowCalendar = true;\n                }\n            };\n\n            /**\r\n             * Display/hide calendar\r\n             */\n            $scope.toggleCalendar = function () {\n                $scope.display.bShowCalendar = !$scope.display.bShowCalendar;\n                if (!$scope.display.bShowHomeworks && !$scope.display.bShowCalendar) {\n                    $scope.display.bShowHomeworks = true;\n                }\n            };\n\n            $scope.setModel = function (alias) {\n                ModelWeekService.setModelWeek(alias, $scope.mondayOfWeek).then(function (modelWeek) {\n                    refreshDatas(UtilsService.getUserStructuresIdsAsString(), $scope.mondayOfWeek, model.isUserParent, model.child ? model.child.id : undefined);\n                });\n\n                notify.info(lang.translate('diary.model.week.choice.effective') + \" \" + alias);\n            };\n\n            $scope.invert = function () {\n                ModelWeekService.invertModelsWeek().then(function () {\n                    refreshDatas(UtilsService.getUserStructuresIdsAsString(), $scope.mondayOfWeek, model.isUserParent, model.child ? model.child.id : undefined).then(function () {\n                        notify.info('diary.model.week.invert.effective');\n                    });\n                });\n            };\n\n            $scope.redirect = function (path) {\n                $location.path(path);\n            };\n        }\n    });\n})();\n","'use strict';\n\n(function () {\n    'use strict';\n\n    AngularExtensions.addModuleConfig(function (module) {\n        //controller declaration\n        module.controller(\"EditLessonController\", controller);\n\n        function controller($scope, $rootScope, $routeParams, PedagogicItemService, constants, $q, SubjectService) {\n\n            var vm = this;\n\n            init();\n\n            function init() {\n                //existing lesson\n                $q.all([\n                //need subjects\n                loadSubjects(),\n                //need homework types\n                loadHomeworkTypes()]).then(function () {\n                    if ($routeParams.idLesson) {\n                        model.newLesson = null;\n                        loadExistingLesson();\n                    } else if (model.newLesson) {\n                        createNewLessonFromPedagogicItem();\n                    } else if ($routeParams.progressionId) {\n                        //show the EditProgressionLessonController\n                        loadNewLesson();\n                        return;\n                    } else {\n                        //new lesson\n                        loadNewLesson();\n                    }\n\n                    $scope.data.tabSelected = 'lesson';\n\n                    //add watch on selection\n                    $scope.$watch('lesson.audience', function () {\n                        if (vm.lesson && vm.lesson.previousLessons) {\n                            $scope.loadPreviousLessonsFromLesson(vm.lesson);\n                        }\n                    });\n                    //add watch on selection\n                    $scope.$watch('lesson.subject', function () {\n                        if (vm.lesson && vm.lesson.previousLessons) {\n                            $scope.loadPreviousLessonsFromLesson(vm.lesson);\n                        }\n                    });\n                });\n            }\n\n            function loadHomeworkTypes() {\n                if (!model.homeworkTypes || !model.homeworkTypes.all || model.homeworkTypes.all.length === 0) {\n                    model.homeworkTypes.syncHomeworkTypes(function () {\n                        return $q.when();\n                    }, $rootScope.validationError);\n                } else {\n                    return $q.when();\n                }\n            }\n\n            function loadSubjects() {\n                if (!model.subjects || !model.subjects.all || model.subjects.all.length === 0) {\n                    console.log(\"no subjects founds\");\n                    return SubjectService.getCustomSubjects(model.isUserTeacher()).then(function (subjects) {\n                        model.subjects.all = [];\n                        if (subjects) {\n                            model.subjects.addRange(subjects);\n                        }\n                    });\n                } else {\n                    return $q.when();\n                }\n            }\n\n            function createNewLessonFromPedagogicItem() {\n                vm.lesson = model.newLesson;\n                model.newLesson = null;\n                //$scope.newItem = vm.lesson.newItem;\n                populateExistingLesson();\n            }\n\n            function populateExistingLesson() {\n                $scope.tabs.createLesson = $routeParams.idHomework ? 'homeworks' : 'lesson';\n                $scope.tabs.showAnnotations = false;\n\n                // open existing lesson for edit\n\n                vm.lesson.previousLessonsLoaded = false; // will force reload\n                $scope.newItem = {\n                    date: moment(vm.lesson.date),\n                    beginning: vm.lesson.startMoment, //moment(vm.lesson.beginning),\n                    end: vm.lesson.endMoment //moment(vm.lesson.end)\n                };\n\n                $scope.loadHomeworksForCurrentLesson(function () {\n                    vm.lesson.homeworks.forEach(function (homework) {\n                        if (vm.lesson.homeworks.length || $routeParams.idHomework && $routeParams.idHomework == homework.id) {\n                            homework.expanded = true;\n                        }\n\n                        model.loadHomeworksLoad(homework, moment(homework.date).format(\"YYYY-MM-DD\"), vm.lesson.audience.id);\n                    });\n                });\n            }\n            /*\r\n            * load existing lesson\r\n            */\n            function loadExistingLesson() {\n                var lesson = new Lesson();\n                model.lesson = lesson;\n                lesson.id = parseInt($routeParams.idLesson);\n\n                $scope.lessonDescriptionIsReadOnly = false;\n                $scope.homeworkDescriptionIsReadOnly = false;\n                vm.lesson = lesson;\n                lesson.load(true, function () {\n                    populateExistingLesson();\n                }, function (cbe) {\n                    notify.error(cbe.message);\n                });\n            }\n\n            function loadNewLesson() {\n                var selectedDate = $scope.selectedDateInTheFuture();\n\n                vm.lesson = model.initLesson(\"timeFromCalendar\" === $routeParams.timeFromCalendar, selectedDate);\n                $scope.newItem = vm.lesson.newItem;\n            }\n            /**\r\n             * Load homeworks for current lesson being edited\r\n             * @param cb Callback function\r\n             */\n            $scope.loadHomeworksForCurrentLesson = function (cb) {\n\n                // lesson not yet created do not retrieve homeworks\n                if (!vm.lesson.id) {\n                    return;\n                }\n\n                var needSqlSync = false;\n\n                // if homeworks ever retrieved from db don't do it again!\n                vm.lesson.homeworks.forEach(function (homework) {\n                    if (!homework.loaded) {\n                        needSqlSync = true;\n                    }\n                });\n\n                // only reload homeworks if necessary\n                if (needSqlSync) {\n                    model.loadHomeworksForLesson(vm.lesson, function () {\n                        if (typeof cb !== 'undefined') {\n                            cb();\n                        }\n                        $scope.$apply();\n                    }, function (e) {\n                        $rootScope.validationError(e);\n                    });\n                } else {\n                    if (typeof cb !== 'undefined') {\n                        cb();\n                    }\n                }\n            };\n\n            /**\r\n             * Create or update lesson to database from page fields\r\n             * @param goMainView if true will switch to calendar or list view\r\n             * after create/update else stay on current page\r\n             */\n            $scope.createOrUpdateLesson = function (goMainView, cb) {\n\n                $scope.currentErrors = [];\n\n                vm.lesson.startTime = $scope.newItem.beginning;\n                vm.lesson.endTime = $scope.newItem.end;\n                vm.lesson.date = $scope.newItem.date;\n\n                vm.lesson.save(function () {\n                    notify.info('lesson.saved');\n                    vm.lesson.audience = model.audiences.findWhere({\n                        id: vm.lesson.audience.id\n                    });\n                    if (goMainView) {\n                        $scope.goToMainView();\n                        vm.lesson = null;\n                        $scope.homework = null;\n                    }\n                    if (typeof cb === 'function') {\n                        cb();\n                    }\n                }, function (e) {\n                    $rootScope.validationError(e);\n                });\n            };\n\n            $scope.loadMorePreviousLessonsFromLesson = function (currentLesson) {\n                if (currentLesson.allPreviousLessonsLoaded || currentLesson.previousLessonsLoading) {\n                    return;\n                }\n                $scope.loadPreviousLessonsFromLesson(currentLesson, true);\n            };\n\n            var defaultCount = 6;\n            var idx_start = 0;\n            var idx_end = idx_start + defaultCount;\n\n            $scope.loadPreviousLessonsFromLesson = function (lesson, useDeltaStep) {\n\n                if (!useDeltaStep) {\n                    lesson.allPreviousLessonsLoaded = false;\n                }\n\n                if (useDeltaStep) {\n                    idx_start += defaultCount;\n                    idx_end += defaultCount;\n                }\n\n                var params = {\n                    offset: idx_start,\n                    limit: idx_end,\n                    excludeLessonId: lesson.id ? lesson.id : null,\n                    startDate: moment(lesson.date).add(-2, 'month').format(DATE_FORMAT),\n                    subject: lesson.subject.id,\n                    audienceId: lesson.audience.id,\n                    returnType: 'lesson',\n                    homeworkLinkedToLesson: \"true\",\n                    sortOrder: \"DESC\"\n                };\n\n                // tricky way to detect if string date or moment date ...\n                // 12:00:00\n                if (lesson.endTime.length === 8) {\n                    params.endDateTime = lesson.date.format(DATE_FORMAT) + ' ' + lesson.endTime;\n                } else {\n                    params.endDateTime = lesson.date.format(DATE_FORMAT) + ' ' + moment(lesson.endTime).format(\"HH:mm\");\n                }\n\n                if (!lesson.previousLessons) {\n                    lesson.previousLessons = [];\n                }\n\n                lesson.previousLessonsLoading = true;\n                PedagogicItemService.getPedagogicItems(params).then(function (pedagogicItems) {\n                    //lesson.previousLessonsDisplayed = [];\n                    if (pedagogicItems.length < defaultCount) {\n                        lesson.allPreviousLessonsLoaded = true;\n                    }\n\n                    var groupByItemType = _.groupBy(pedagogicItems, 'type_item');\n                    var previousLessons = groupByItemType.lesson;\n\n                    if (previousLessons) {\n                        var previousLessonIds = [];\n\n                        previousLessons.forEach(function (lesson) {\n                            previousLessonIds.push(lesson.id);\n                        });\n\n                        // load linked homeworks of previous lessons\n                        var paramsHomeworks = {\n                            returnType: 'homework',\n                            homeworkLessonIds: previousLessonIds\n                        };\n\n                        PedagogicItemService.getPedagogicItems(paramsHomeworks).then(function (previousHomeworks) {\n                            previousLessons.forEach(function (lesson) {\n                                lesson.homeworks = _.where(previousHomeworks, { lesson_id: lesson.id });\n                            });\n                            if (idx_start !== 0) {\n                                lesson.previousLessons = lesson.previousLessons.concat(previousLessons);\n                            } else {\n                                lesson.previousLessons = previousLessons;\n                            }\n                            lesson.previousLessonsLoaded = true;\n                            lesson.previousLessonsLoading = false;\n                            if (typeof cb === 'function') {\n                                cb();\n                            }\n                        });\n                    } else {\n                        lesson.previousLessons = [];\n                        lesson.previousLessonsLoaded = true;\n                        lesson.previousLessonsLoading = false;\n                        if (typeof cb === 'function') {\n                            cb();\n                        }\n                    }\n                });\n            };\n\n            $scope.createAndPublishLesson = function (lesson, isPublish, goMainView) {\n                $scope.createOrUpdateLesson(goMainView, function () {\n                    $scope.publishLessonAndGoCalendarView(lesson, isPublish);\n                });\n            };\n        }\n    });\n})();\n","\"use strict\";\n\n(function () {\n    'use strict';\n\n    AngularExtensions.addModuleConfig(function (module) {\n        //controller declaration\n        module.controller(\"EditProgressionLessonController\", controller);\n\n        function controller($scope, $timeout, $routeParams, constants, $rootScope, ProgressionService) {\n            var vm = this;\n\n            $timeout(init);\n\n            function init() {\n                console.log(\"initForProgressionLesson\");\n                if ($routeParams.progressionId) {\n                    $scope.data.tabSelected = 'lesson';\n                    vm.isProgressionLesson = true;\n\n                    if ($routeParams.editProgressionLessonId !== 'new') {\n                        loadLesson($routeParams.editProgressionLessonId);\n                    }\n                }\n            }\n            function loadLesson(lessonId) {\n                ProgressionService.getLessonProgression(lessonId).then(function (lesson) {\n                    console.log(\"lesson = \", lesson);\n                    $scope.$parent.editLessonCtrl.lesson = lesson;\n                });\n            }\n\n            vm.cancel = function () {\n                $rootScope.redirect('/progressionManagerView/' + $routeParams.progressionId);\n            };\n\n            vm.saveLesson = function (lesson) {\n                if (!lesson.progressionId) {\n                    lesson.progressionId = $routeParams.progressionId;\n                }\n                ProgressionService.saveLessonProgression(lesson).then(function (newLesson) {\n                    notify.info(lang.translate('progression.content.saved'));\n                    lesson.id = newLesson.id;\n                    $rootScope.redirect('/progressionManagerView/' + $routeParams.progressionId);\n                });\n            };\n\n            vm.addHomework = function (lesson) {\n                if (!lesson.homeworks) {\n                    lesson.homeworks = [];\n                }\n                var homework = model.initHomework();\n                lesson.homeworks.push(homework);\n            };\n\n            vm.loadLesson = function (lessonId) {};\n        }\n    });\n})();\n","'use strict';\n\n(function () {\n  'use strict';\n\n  AngularExtensions.addModuleConfig(function (module) {\n\n    /**\r\n     *\r\n     */\n    module.directive('attachment', function () {\n      return {\n        restrict: \"E\",\n        require: '^attachmentsx',\n        templateUrl: \"diary/public/template/attachment.html\",\n        scope: {\n          /**\r\n           * Attachment\r\n           */\n          attachment: '=',\n          /**\r\n           * Reference to lesson or homework\r\n           */\n          item: '=',\n          /**\r\n           *  If true, user won't be able to add or modify current attachments (for student for example)\r\n           */\n          readonly: '='\n        },\n        link: function link(scope, element, attrs, location) {\n\n          /**\r\n           * As seen from entcore, behaviour.js\r\n           * @param attachment\r\n           */\n          scope.downloadAttachment = function () {\n            scope.attachment.download();\n          };\n\n          // detachFromItem = function (itemId, itemType, cb, cbe) {\n          /**\r\n           * Removes attachment from lesson or homework\r\n           * but DOES NOT remove the file physically\r\n           */\n          scope.removeAttachment = function () {\n\n            // do not modify current attachment if readonly\n            if (scope.readonly === true) {\n              return;\n            }\n\n            scope.attachment.detachFromItem(scope.item,\n            // callback function\n            function (cb) {\n              notify.info(cb.message);\n            },\n            // callback on error function\n            function (cbe) {\n              notify.error(cbe.message);\n            });\n          };\n        }\n      };\n    });\n  });\n})();\n","'use strict';\n\n(function () {\n    'use strict';\n\n    AngularExtensions.addModuleConfig(function (module) {\n        /**\r\n         * Directive to perform a quick search among lessons and homeworks\r\n         */\n        module.directive('attachmentsx', function () {\n            return {\n                restrict: \"E\",\n                templateUrl: \"diary/public/template/attachments.html\",\n                scope: {\n                    /**\r\n                     * Lesson or homework\r\n                     */\n                    item: '=',\n                    /**\r\n                     * If true, user won't be able to add or modify current attachments (for student for example)\r\n                     */\n                    readonly: '='\n                },\n                controller: function controller() {},\n                link: function link($scope) {\n                    //$scope.selectedAttachments = new Array();\n                    $scope.display = {};\n                    $scope.display.showPersonalAttachments = false;\n                    $scope.mediaLibraryScope = null;\n\n                    /**\r\n                     * Set selected or not documents within\r\n                     * media library documents\r\n                     */\n                    var syncSelectedDocumentsFromItemAttachments = function syncSelectedDocumentsFromItemAttachments() {\n\n                        var theScope = getMediaLibraryScope();\n\n                        theScope.documents.forEach(function (document) {\n                            document.selected = hasAttachmentInItem(document._id);\n                        });\n\n                        theScope.$apply();\n                    };\n\n                    /**\r\n                     *\r\n                     * @returns {*}\r\n                     */\n                    var getMediaLibraryScope = function getMediaLibraryScope() {\n\n                        if ($scope.mediaLibraryScope != null) {\n                            return $scope.mediaLibraryScope;\n                        }\n\n                        // tricky way to get that mediaLibrary directive ...\n                        var i = 0;\n                        var mediaLibraryScope = null;\n\n                        for (var cs = $scope.$$childHead; cs; cs = cs.$$nextSibling) {\n                            if (i === 0 && !cs.attachment) {\n                                mediaLibraryScope = cs.$$nextSibling.$$childTail.$$childTail.$$childTail;\n                                break;\n                            }\n                            i++;\n                        }\n\n                        $scope.mediaLibraryScope = mediaLibraryScope;\n                    };\n\n                    var mediaLibraryScope = null;\n\n                    // open up personal storage\n                    $scope.showPersonalAttachments = function () {\n                        $scope.display.showPersonalAttachments = true;\n                        setTimeout(function () {\n                            // FIXME can't find mediaLibrary scopre at first time !!\n                            syncSelectedDocumentsFromItemAttachments();\n                        }, 300);\n                    };\n\n                    $scope.hidePersonalAttachments = function () {\n                        $scope.display.showPersonalAttachments = false;\n                    };\n\n                    /**\r\n                     * Selected attachments from media library directive\r\n                     * see attachments.html\r\n                     * @param selectedAttachments Selected attachments in personal storage view\r\n                     */\n                    $scope.updateSelectedAttachments = function (selectedAttachments) {\n                        // TODO DELETE\n                    };\n\n                    /**\r\n                     *\r\n                     * @param documentId\r\n                     */\n                    var hasAttachmentInItem = function hasAttachmentInItem(documentId) {\n\n                        var hasAttachment = false;\n\n                        if (!$scope.item.attachments || $scope.item.attachments.length === 0) {\n                            hasAttachment = false;\n                        } else {\n                            $scope.item.attachments.forEach(function (itemAttachment) {\n\n                                if (itemAttachment.document_id === documentId) {\n                                    hasAttachment = true;\n                                }\n                            });\n                        }\n\n                        return hasAttachment;\n                    };\n\n                    /**\r\n                     *\r\n                     * @returns {*}\r\n                     */\n                    var getSelectedDocuments = function getSelectedDocuments() {\n                        var selectedDocuments = _.where(getMediaLibraryScope().documents, {\n                            selected: true\n                        });\n\n                        return selectedDocuments;\n                    };\n\n                    /**\r\n                     *\r\n                     * @param selectedAttachments Selected documents in media library directive\r\n                     */\n                    var addSelectedDocumentsToItem = function addSelectedDocumentsToItem(newSelectedAttachments) {\n\n                        if (!newSelectedAttachments || newSelectedAttachments.length === 0) {\n                            return;\n                        }\n\n                        var newAttachments = new Array();\n\n                        newSelectedAttachments.forEach(function (selectedAttachment) {\n\n                            if (!hasAttachmentInItem(selectedAttachment._id)) {\n                                var itemAttachment = new Attachment();\n\n                                itemAttachment.user_id = model.me.userId;\n                                itemAttachment.document_id = selectedAttachment._id;\n                                itemAttachment.document_label = selectedAttachment.name;\n\n                                newAttachments.push(itemAttachment);\n                                $scope.item.addAttachment(itemAttachment);\n                            }\n                        });\n                    };\n\n                    /**\r\n                     * Associates the selected attachments from directive\r\n                     * to current item (lesson or homework)\r\n                     */\n                    $scope.linkAttachmentsToItem = function () {\n\n                        if (mediaLibraryScope == null) {\n                            mediaLibraryScope = getMediaLibraryScope();\n                        }\n\n                        var selectedAttachments = getSelectedDocuments();\n\n                        if (selectedAttachments.length === 0) {\n                            notify.info('diary.attachments.selectattachmentstolink');\n                        } else {\n                            addSelectedDocumentsToItem(selectedAttachments);\n                            // close media library directive\n                            $scope.hidePersonalAttachments();\n                        }\n                    };\n\n                    /**\r\n                     * Removes the attachment from item (lesson or homework)\r\n                     * @param attachment\r\n                     */\n                    $scope.removeAttachment = function (attachment) {\n\n                        attachment.detachFromItem(scope.item.id, scope.itemType,\n                        // callback function TODO handle\n                        function () {},\n                        // callback on error function TODO handle\n                        function () {});\n                    };\n\n                    setInterval(function () {\n                        var addButton = $('.right-magnet.vertical-spacing-twice');\n                        addButton.hide();\n                    }, 400);\n                }\n            };\n        });\n    });\n})();\n","\"use strict\";\n\n(function () {\n    'use strict';\n\n    AngularExtensions.addModuleConfig(function (module) {\n        //controller declaration\n        module.controller(\"CalendarDailyEventsController\", controller);\n\n        function controller($scope) {\n\n            init();\n\n            function init() {\n                $scope.isUserTeacher = model.isUserTeacher();\n\n                // default open state of calendar grid\n                // and homework panel\n                //TODO remove and delegate to calendar controler\n\n                handlers();\n            }\n\n            /*\r\n            * bind events behaviours\r\n            */\n            function handlers() {\n                //watch calendar recreation\n                $scope.$watch(function () {\n                    return model.calendar;\n                }, function () {\n                    $scope.calendar = model.calendar;\n                    placeCalendarAndHomeworksPanel();\n                });\n\n                //watch toggle options\n                $scope.$watch(function () {\n                    return \"\" + $scope.bShowCalendar + $scope.bShowHomeworks + $scope.bShowHomeworksMinified;\n                }, function () {\n                    placeCalendarAndHomeworksPanel();\n                });\n            }\n\n            /**\r\n             * Open homeworks details when homeworks info is minimized\r\n             * or vice versa\r\n             * @param day\r\n             * @param $event\r\n             */\n            $scope.toggleOpenDailyEvents = function (day, $event) {\n                if (!($event.target && $event.target.type === \"checkbox\")) {\n                    day.openDailyEvents = !day.openDailyEvents;\n                }\n            };\n\n            /**\r\n             * Redirect to homework or lesson view if homework attached to some lesson\r\n             * @param homework Homework being clicked/selected\r\n             * @param $event\r\n             */\n            $scope.editSelectedHomework = function (homework, $event) {\n                // prevent redirect on clicking on checkbox\n                if (!($event.target && $event.target.type === \"checkbox\")) {\n                    if (!homework.lesson_id) {\n                        window.location = '/diary#/editHomeworkView/' + homework.id;\n                    } else {\n                        window.location = '/diary#/editLessonView/' + homework.lesson_id + '/' + homework.id;\n                    }\n                }\n            };\n\n            /**\r\n             * Toggle show display homework panel detail of a day\r\n             * Note: jquery oldschool way since with angular could not fix some display problems\r\n             * @param day\r\n             */\n            $scope.toggleShowHwDetail = function (day) {\n                hideOrShowHwDetail(day, undefined, true);\n            };\n\n            /**\r\n             *\r\n             * @param day\r\n             * @param hideHomeworks\r\n             * @param unselectHomeworksOnHide\r\n             */\n            var hideOrShowHwDetail = function hideOrShowHwDetail(day, hideHomeworks, unselectHomeworksOnHide) {\n                if (!day.dailyEvents) {\n                    return;\n                }\n                var hwDayDetail = $('#hw-detail-' + day.index);\n\n                var isNotHidden = hwDayDetail.hasClass('show');\n\n                if (typeof hideHomeworks === 'undefined') {\n                    hideHomeworks = isNotHidden;\n                }\n\n                if (hideHomeworks) {\n                    hwDayDetail.removeClass('show');\n                } else {\n                    hwDayDetail.addClass('show');\n                }\n\n                if (hideHomeworks && unselectHomeworksOnHide) {\n                    day.dailyEvents.forEach(function (dailyEvent) {\n                        dailyEvent.selected = false;\n                    });\n                }\n            };\n\n            /**\r\n             * Get the maximum number of homeworks of a day for current week\r\n             */\n            var getMaxHomeworksPerDay = function getMaxHomeworksPerDay() {\n                var max = 0;\n\n                $scope.calendar.days.all.forEach(function (day) {\n                    if (day.dailyEvents && day.dailyEvents.length > max) {\n                        max = day.dailyEvents.length;\n                    }\n                });\n\n                return max;\n            };\n\n            //$scope.show = model.show;\n\n            /**\r\n             * Minify the homework panel or not\r\n             * If it's minified, will only show one max homework\r\n             * else 3\r\n             */\n            $scope.toggleHomeworkPanelMinized = function () {\n                placeCalendarAndHomeworksPanel();\n            };\n\n            /**\r\n             *\r\n             * @param day\r\n             * @returns {Number|boolean}\r\n             */\n            $scope.showNotAllHomeworks = function (day) {\n                return day.dailyEvents && day.dailyEvents.length && !$scope.showAllHomeworks(day);\n            };\n\n            /**\r\n             *\r\n             * @param day Current day\r\n             * @returns {boolean} true if all homeworks of current day\r\n             * should be displayed in homework panel\r\n             */\n            $scope.showAllHomeworks = function (day) {\n\n                if (!day.dailyEvents || day.dailyEvents && day.dailyEvents.length == 0) {\n                    return false;\n                }\n\n                // calendar hidden and homework panel maximized -> show all\n                if (!$scope.bShowHomeworksMinified) {\n                    return !$scope.bShowCalendar || day.dailyEvents.length <= 1;\n                } else {\n                    return day.dailyEvents.length == 1;\n                }\n            };\n\n            /**\r\n             * Return the homework panel height that should be set\r\n             * depending on calendar grid displayed state and homework panel minimized state\r\n             * @param bShowCalendar True if calendar grid is visible\r\n             * @param bShowHomeworks True if homeworks panel is visible\r\n             * @returns {number} Homework panel height\r\n             */\n            var getHomeworkPanelHeight = function getHomeworkPanelHeight(bShowCalendar, bShowHomeworks) {\n\n                /**\r\n                 * Height of a single homework in homework panel\r\n                 * @type {number}\r\n                 */\n                var HW_HEIGHT = 40;\n                var homeworksPerDayDisplayed = 0;\n\n                if (!bShowHomeworks) {\n                    return 0;\n                }\n\n                if (!bShowCalendar) {\n                    homeworksPerDayDisplayed = getMaxHomeworksPerDay();\n                } else {\n                    homeworksPerDayDisplayed = 1;\n                }\n\n                // max homeworks per day displayed used for drag and drop directive\n                // to detect dropped day of the week area\n                model.homeworksPerDayDisplayed = homeworksPerDayDisplayed;\n\n                return homeworksPerDayDisplayed * HW_HEIGHT;\n            };\n\n            /**\r\n             * Display homeworks and lessons and set open state of homework panel\r\n             * and calendar grid\r\n             */\n            function placeCalendarAndHomeworksPanel() {\n\n                var bShowCalendar = $scope.bShowCalendar;\n                //var bShowHomeworks = $scope.bShowHomeworks;\n                var bShowHomeworksMinified = $scope.bShowHomeworksMinified;\n\n                /**\r\n                 * Calendar height\r\n                 * @type {number}\r\n                 */\n\n                return;\n                var CAL_HEIGHT = 775;\n\n                var newHwPanelHeight = getHomeworkPanelHeight(bShowCalendar, bShowHomeworks, bShowHomeworksMinified);\n\n                // reduce height of homework panel if requested\n\n                var prevTimeslotsBar = $('.previous-timeslots');\n                var nextTimeslotsBar = $('.next-timeslots');\n\n                // hours legend at left\n                var hoursBar = $('.timeslots');\n                var calItems = $('calendar .schedule-item-content');\n                var calGrid = $('.schedule .days');\n\n                // show/hide calendar items\n                hoursBar.css('display', bShowCalendar ? 'inherit' : 'none');\n                calItems.css('display', bShowCalendar ? 'inherit' : 'none');\n\n                // do not hide previous timeslots bar\n                // or else would make so hole/gap\n                if (bShowCalendar) {\n                    prevTimeslotsBar.removeAttr('disabled');\n                } else {\n                    prevTimeslotsBar.attr('disabled', 'disabled');\n                }\n\n                nextTimeslotsBar.css('display', bShowCalendar ? 'inherit' : 'none');\n\n                calGrid.height(bShowCalendar ? newHwPanelHeight + CAL_HEIGHT : 0);\n\n                hoursBar.css('margin-top', newHwPanelHeight);\n                $('legend.timeslots').css('margin-top', '');\n                $('legend.timeslots').css('top', newHwPanelHeight + \"px\");\n                nextTimeslotsBar.css('top', CAL_HEIGHT + newHwPanelHeight);\n\n                $('.schedule-item').css('margin-top', bShowCalendar ? newHwPanelHeight : 0);\n                calGrid.height(CAL_HEIGHT + (bShowCalendar ? newHwPanelHeight : 0));\n\n                // set homework panel size with max number of homeworks\n\n                //$('.homeworkpanel').css('height', newHwPanelHeight +\"px\");\n                $('.homeworkpanel').css('display', bShowHomeworks ? 'inherit' : 'none');\n\n                // toggle buttons\n                $('.show-homeworks').css('opacity', bShowHomeworks ? 1 : 0.3);\n                $('.show-calendar-grid').css('opacity', bShowCalendar ? 1 : 0.3);\n\n                $('#minimize_hw_span').css('display', newHwPanelHeight > 0 ? 'inherit' : 'none');\n\n                if (!bShowCalendar) {\n                    model.calendar.days.all.forEach(function (day) {\n                        hideOrShowHwDetail(day, true, true);\n                    });\n                }\n            }\n\n            function setDaysContent() {\n                model.calendar.days.forEach(function (day) {\n                    day.dailyEvents = [];\n                });\n\n                $scope.ngModel.forEach(function (item) {\n                    var refDay = moment(model.calendar.dayForWeek).day(1);\n                    model.calendar.days.forEach(function (day) {\n\n                        if (item.dueDate && item.dueDate.format('YYYY-MM-DD') === refDay.format('YYYY-MM-DD')) {\n                            day.dailyEvents.push(item);\n                        }\n\n                        refDay.add('day', 1);\n                    });\n                });\n\n                $scope.calendar = model.calendar;\n\n                var timeslots = $('.timeslots');\n\n                if (timeslots.length === 8) {\n                    placeCalendarAndHomeworksPanel();\n                }\n                // if days timeslots are not yet positioned\n                // wait until they are to create the homework panel\n                else {\n                        var timerOccurences = 0;\n                        var timer = setInterval(function () {\n                            timeslots = $('.timeslots');\n                            if (timeslots.length === 8) {\n                                clearInterval(timer);\n                                placeCalendarAndHomeworksPanel();\n                            }\n                            timerOccurences++;\n                            // 5s should be far than enough to have all timeslots loaded\n                            if (timerOccurences > 50) {\n                                clearInterval(timer);\n                            }\n                        }, 100);\n                    }\n            }\n\n            model.on('calendar.date-change', function () {\n                setDaysContent();\n                $scope.$apply();\n            });\n\n            $scope.$watchCollection('ngModel', function (newVal) {\n                setDaysContent();\n            });\n        }\n    });\n})();\n","'use strict';\n\n(function () {\n    'use strict';\n\n    AngularExtensions.addModuleConfig(function (module) {\n        module.directive('calendarDailyEvents', function () {\n            return {\n                scope: {\n                    ngModel: '=',\n                    bShowCalendar: '=',\n                    bShowHomeworks: '=',\n                    bShowHomeworksMinified: '='\n                },\n                restrict: 'E',\n                templateUrl: '/diary/public/js/directives/calendar-daily-events/calendar-daily-events.template.html',\n                controller: 'CalendarDailyEventsController',\n\n                link: function link(scope, element, attributes) {\n\n                    $('body').on('click', function (e) {\n                        if (e.target !== element[0] && element.find(e.target).length === 0) {\n                            model.calendar.days.forEach(function (day) {\n                                day.openDailyEvents = false;\n                            });\n                            scope.$apply();\n                        }\n                    });\n                }\n            };\n        });\n    });\n})();\n","'use strict';\n\n(function () {\n  'use strict';\n\n  AngularExtensions.addModuleConfig(function (module) {\n    module.directive(\"confirmClick\", directive);\n\n    function directive($compile) {\n      return {\n        restrict: 'A',\n        link: function link(scope, element, attr) {\n          console.log(\"confirm click linked\");\n\n          var clickAction = attr.confirmedClick;\n          var html = '\\n                     <lightbox show=\"display\" on-close=\"remove()\">\\n                       <div class=\"row\">\\n                          <h2> [[msg]] </h2>\\n                           <div class=\"row\">\\n                               <button class=\"right-magnet \" ng-click=\"confirm()\">[[yes]]</button>\\n                               <input type=\"button\" class=\"right-magnet cancel\" i18n-value=\"[[cancel]]\" ng-click=\"remove()\"  />                              \\n                           </div>\\n                       </div>\\n                     </lightbox>\\n                     ';\n          var lightbox;\n          element.bind('click', function (event) {\n            scope.msg = attr.confirmClick || \"Etes vous sur?\";\n            scope.yes = attr.confirmYes || \"Ok\";\n            scope.cancel = attr.confirmCancel || \"Annuler\";\n            scope.display = true;\n            lightbox = $compile(html)(scope);\n            $('body').append(lightbox);\n            scope.$apply();\n          });\n          scope.remove = function () {\n            scope.display = false;\n            if (lightbox) {\n              lightbox.remove();\n            }\n          };\n          scope.confirm = function () {\n            scope.$eval(clickAction);\n            scope.remove();\n          };\n        }\n      };\n    }\n  });\n})();\n","'use strict';\n\n(function () {\n\t\t'use strict';\n\n\t\tAngularExtensions.addModuleConfig(function (module) {\n\t\t\t\tmodule.directive('entDropdown', function () {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\trestrict: \"E\",\n\t\t\t\t\t\t\t\ttemplateUrl: \"diary/public/template/ent-dropdown.html\",\n\t\t\t\t\t\t\t\tscope: {\n\t\t\t\t\t\t\t\t\t\tplaceholder: \"@\",\n\t\t\t\t\t\t\t\t\t\tlist: \"=\",\n\t\t\t\t\t\t\t\t\t\tselected: \"=\",\n\t\t\t\t\t\t\t\t\t\tproperty: \"@\",\n\t\t\t\t\t\t\t\t\t\tschool: \"=\",\n\t\t\t\t\t\t\t\t\t\trefreshFunc: \"&\",\n\t\t\t\t\t\t\t\t\t\tloadPreviousFunc: \"&\",\n\t\t\t\t\t\t\t\t\t\tlesson: \"=\",\n\t\t\t\t\t\t\t\t\t\thomework: \"=\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tlink: function link(scope, element, attrs) {\n\t\t\t\t\t\t\t\t\t\tscope.listVisible = false;\n\t\t\t\t\t\t\t\t\t\tscope.isPlaceholder = true;\n\t\t\t\t\t\t\t\t\t\tscope.searchPerformed = false;\n\t\t\t\t\t\t\t\t\t\tscope.otherAudiences = [];\n\t\t\t\t\t\t\t\t\t\tscope.translated_placeholder = lang.translate(scope.placeholder);\n\n\t\t\t\t\t\t\t\t\t\tscope.select = function (audience) {\n\t\t\t\t\t\t\t\t\t\t\t\tscope.isPlaceholder = false;\n\t\t\t\t\t\t\t\t\t\t\t\tscope.selected = audience;\n\t\t\t\t\t\t\t\t\t\t\t\tscope.listVisible = false;\n\t\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t\tscope.isSelected = function (audience) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn scope.selected !== undefined && scope.selected != null && audience[scope.property] === scope.selected[scope.property];\n\t\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t\tscope.show = function () {\n\t\t\t\t\t\t\t\t\t\t\t\tscope.listVisible = true;\n\t\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t\tscope.searchAudiences = function () {\n\t\t\t\t\t\t\t\t\t\t\t\thttp().get('diary/classes/list/' + scope.school).done(function (structureData) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope.otherAudiences = _.map(structureData, function (data) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar audience = {};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taudience.structureId = scope.school;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taudience.type = 'class';\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taudience.typeLabel = data.className === 'class' ? lang.translate('diary.audience.class') : lang.translate('diary.audience.group');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taudience.id = data.classId;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taudience.name = data.className;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn audience;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope.otherAudiences = _.reject(scope.otherAudiences, function (audience) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn _.contains(_.pluck(scope.list, 'name'), audience.name);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope.searchPerformed = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope.listVisible = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope.$apply();\n\t\t\t\t\t\t\t\t\t\t\t\t}).error(function (e) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (typeof cbe === 'function') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcbe(model.parseError(e));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t\tscope.$watch(\"selected\", function (value) {\n\t\t\t\t\t\t\t\t\t\t\t\tscope.isPlaceholder = true;\n\t\t\t\t\t\t\t\t\t\t\t\tif (scope.selected !== null && scope.selected !== undefined) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope.isPlaceholder = scope.selected[scope.property] === undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope.display = scope.selected[scope.property];\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (scope.lesson && scope.lesson.id && scope.lesson.endTime) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (scope.lesson.homeworks.all.length > 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope.$parent.refreshHomeworkLoads(scope.lesson);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope.lesson.previousLessonsLoaded = false;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//scope.$parent.loadPreviousLessonsFromLesson(scope.lesson);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (scope.homework && scope.homework.audience) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope.$parent.showHomeworksLoad(scope.homework, null, null);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t$(element.context.ownerDocument).click(function (event) {\n\t\t\t\t\t\t\t\t\t\t\t\tscope.listVisible = false;\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t});\n\t\t});\n})();\n","'use strict';\n\n(function () {\n  'use strict';\n\n  AngularExtensions.addModuleConfig(function (module) {\n    module.directive(\"itemCalendar\", directive);\n\n    function directive() {\n      return {\n        restrict: 'E',\n        templateUrl: '/diary/public/js/directives/item-calendar/item-calendar.template.html'\n      };\n    }\n  });\n})();\n","'use strict';\n\n(function () {\n    'use strict';\n\n    AngularExtensions.addModuleConfig(function (module) {\n\n        module.directive('diaryTimeslotItem', directive);\n\n        function directive(AudienceService, $rootScope) {\n            return {\n                restrict: \"A\",\n                scope: false,\n                link: function link(scope, element) {\n\n                    var timeslot = element;\n\n                    var dragCounter = 0;\n\n                    timeslot.on('dragover', function ($event) {\n                        event.preventDefault();\n                    });\n\n                    timeslot.bind('dragenter', onenter);\n                    function onenter(event) {\n\n                        dragCounter++;\n                        timeslot.addClass(\"dragin\");\n                        //event.preventDefault();\n                        return false;\n                    }\n\n                    timeslot.bind('dragleave', onleave);\n                    function onleave(event) {\n\n                        dragCounter--;\n                        if (dragCounter === 0) {\n                            timeslot.removeClass(\"dragin\");\n                        }\n                    }\n\n                    function extractBeginEnd() {\n                        var begin = moment().startOf('year').add(scope.day.index - 1, 'd');\n                        var end = moment(begin);\n                        begin = begin.add(scope.timeslot.start, 'h');\n                        end = end.add(scope.timeslot.end, 'h');\n                        return {\n                            startDate: begin,\n                            endDate: end\n                        };\n                    }\n\n                    function initLessonFromProgression(lesson, pedagogicItemOfTheDay) {\n\n                        lesson.id = null;\n                        // startTime and end format from db is \"HH:MM:SS\" as text type\n                        // for lesson save startTime need to be moment time type with date\n                        lesson.title = pedagogicItemOfTheDay.title;\n                        lesson.description = pedagogicItemOfTheDay.description;\n                        lesson.color = pedagogicItemOfTheDay.color;\n                        lesson.subject = pedagogicItemOfTheDay.subject;\n                        lesson.annotations = pedagogicItemOfTheDay.annotations;\n                        lesson.type_item = 'progression';\n                        lesson.homeworks = new Collection();\n                        if (pedagogicItemOfTheDay.homeworks && pedagogicItemOfTheDay.homeworks.length > 0) {\n                            lesson.homeworks.all = _.map(pedagogicItemOfTheDay.homeworks, function (homework) {\n                                var hw = new Homework();\n                                _.each(Object.keys(homework), function (key) {\n                                    hw[key] = homework[key];\n                                });\n                                return hw;\n                            });\n                        }\n\n                        var timeslotDates = extractBeginEnd();\n\n                        lesson.date = moment(timeslotDates.startDate);\n                        lesson.startTime = moment(timeslotDates.startDate);\n                        lesson.startMoment = moment(timeslotDates.startDate);\n                        lesson.endTime = moment(timeslotDates.endDate);\n                        lesson.endMoment = moment(timeslotDates.endDate);\n\n                        model.newLesson = lesson;\n                        console.log(model.newLesson);\n                        window.location = '/diary#/createLessonView/timeFromCalendar';\n                    }\n\n                    timeslot.on('drop', function ($event) {\n                        timeslot.removeClass(\"dragin\");\n                        var scheduleItem = scope.$parent.item;\n\n                        $event.preventDefault();\n                        var timeslotsPerDay = $('.days .timeslot').length / 7;\n                        var index = scope.$parent.$index * timeslotsPerDay + scope.$index;\n                        timeslot.css('background-color', '');\n\n                        // duplicate dragged lesson\n                        var pedagogicItemOfTheDay = JSON.parse($event.originalEvent.dataTransfer.getData(\"application/json\"));\n\n                        if (pedagogicItemOfTheDay.type_item !== 'lesson' && pedagogicItemOfTheDay.type_item !== 'progression') {\n                            return;\n                        }\n\n                        var newLesson = new Lesson();\n                        newLesson.id = pedagogicItemOfTheDay.id;\n\n                        var newLessonDayOfWeek = Math.floor(index / timeslotsPerDay) + 1;\n                        var newLessonStartTime = model.startOfDay + index % timeslotsPerDay;\n                        var newLessonEndTime = newLessonStartTime + 1;\n\n                        // do not drop if item type is not a lesson\n                        if (pedagogicItemOfTheDay.type_item === 'progression') {\n                            initLessonFromProgression(newLesson, pedagogicItemOfTheDay);\n                            return;\n                        }\n\n                        newLesson.load(false, function () {\n                            // will force new lesson to be created in DB\n                            newLesson.id = null;\n                            // startTime and end format from db is \"HH:MM:SS\" as text type\n                            // for lesson save startTime need to be moment time type with date\n                            newLesson.date = moment(newLesson.date);\n                            newLesson.startTime = moment(newLesson.date.format('YYYY-MM-DD') + ' ' + newLesson.startTime);\n                            newLesson.startTime.hour(newLessonStartTime);\n                            newLesson.startTime.minute(0);\n                            newLesson.startTime.day(newLessonDayOfWeek);\n\n                            newLesson.endTime = moment(newLesson.date.format('YYYY-MM-DD') + ' ' + newLesson.endTime);\n                            newLesson.endTime.hour(newLessonEndTime);\n                            newLesson.endTime.minute(0);\n                            newLesson.endTime.day(newLessonDayOfWeek);\n                            newLesson.endTime.week(model.calendar.week);\n\n                            newLesson.date.day(newLessonDayOfWeek);\n                            newLesson.date.week(model.calendar.week);\n\n                            newLesson.state = 'draft';\n\n                            if (scheduleItem) {\n                                newLesson.date = moment(scheduleItem.startDate);\n                                newLesson.startTime = moment(scheduleItem.startDate);\n                                newLesson.startMoment = moment(scheduleItem.startDate);\n                                newLesson.endTime = moment(scheduleItem.endDate);\n                                newLesson.endMoment = moment(scheduleItem.endDate);\n                                AudienceService.getAudiencesAsMap(model.me.structures).then(function (audienceMap) {\n                                    //get audience\n                                    if (scheduleItem.data && scheduleItem.data.classes && scheduleItem.data.classes.length > 0) {\n                                        newLesson.audience = audienceMap[scheduleItem.data.classes[0]];\n                                    }\n                                    //get room\n                                    if (scheduleItem.data && scheduleItem.data.roomLabels && scheduleItem.data.roomLabels.length > 0) {\n                                        newLesson.room = scheduleItem.data.roomLabels[0];\n                                    }\n                                });\n\n                                model.newLesson = newLesson;\n\n                                window.location = '/diary#/createLessonView/timeFromCalendar';\n                            } else {\n\n                                newLesson.save(function (data) {\n                                    window.location = '/diary#/editLessonView/' + newLesson.id;\n                                }, function (error) {\n                                    console.error(error);\n                                });\n                            }\n                        }, function (error) {\n                            console.error(error);\n                        });\n                    });\n                }\n            };\n        }\n    });\n})();\n","'use strict';\n\n(function () {\n    'use strict';\n\n    AngularExtensions.addModuleConfig(function (module) {\n\n        /**\r\n         * Directive for result items\r\n         */\n        module.directive('quickSearchItem', function () {\n            return {\n                restrict: \"E\",\n                templateUrl: \"/diary/public/js/directives/quick-search/quick-search-item.html\",\n                scope: false,\n                link: function link(scope, element) {\n\n                    var angElement = angular.element(element);\n\n                    angElement.on('drag', function (event) {\n                        angElement.css('opacity', 0.9);\n                    });\n\n                    scope.dragCondition = function (item) {\n                        return true;\n                    };\n\n                    scope.dropCondition = function (targetItem) {\n                        return false;\n                    };\n\n                    scope.drag = function (item, $originalEvent) {\n                        try {\n                            $originalEvent.dataTransfer.setData('application/json', JSON.stringify(item));\n                        } catch (e) {\n                            $originalEvent.dataTransfer.setData('Text', JSON.stringify(item));\n                        }\n                    };\n                }\n            };\n        });\n    });\n})();\n","'use strict';\n\n(function () {\n    'use strict';\n\n    AngularExtensions.addModuleConfig(function (module) {\n        //controller declaration\n        module.controller(\"QuickSearchController\", controller);\n\n        function controller($scope, $rootScope, PedagogicItemService) {\n            var vm = this;\n\n            var id = Date.now();\n            /**\r\n             * Number of items displayed by default\r\n             * @type {number}\r\n             */\n            var defaultMaxPedagogicItemsDisplayed = 6;\n\n            $scope.maxPedagogicItemsDisplayed = defaultMaxPedagogicItemsDisplayed;\n\n            /**\r\n             * Max pedagofic items step increament\r\n             * @type {number}\r\n             */\n            var pedagogicDaysDisplayedStep = defaultMaxPedagogicItemsDisplayed;\n\n            /**\r\n             * If true the search if detailled panel is minified else not\r\n             * (by default minified/not visible)\r\n             * @type {boolean}\r\n             */\n            $scope.panelVisible = false;\n\n            /**\r\n             * Pedagogic items search results\r\n             * @type {Array}\r\n             */\n            $scope.pedagogicItems = [];\n\n            /**\r\n             * Last pressed key time\r\n             * Prevent searching\r\n             */\n            $scope.lastPressedKeyTime;\n\n            /**\r\n             * Pedagogic items of the day displayed.\r\n             * Max\r\n             */\n            $scope.quickSearchPedagogicDaysDisplayed = [];\n\n            /**\r\n             * Default search time = end of current week\r\n             */\n            $scope.endDate = moment().endOf('week');\n\n            /**\r\n             * Text for searching through label, title, ...\r\n             * @type {string}\r\n             */\n            $scope.multiSearch = \"\";\n\n            var timeout;\n\n            /**\r\n             * Flag indicating it's first search (used for not displaying the 'show more' arrow\r\n             * @type {boolean}\r\n             */\n            $scope.isFirstSearch = true;\n\n            var pedagogicItemDisplayedIdxStart = 0;\n            var pedagogicItemDisplayedIdxEnd = defaultMaxPedagogicItemsDisplayed - 1; // array index starts at 0\n            var isQuickSearchLesson = $scope.itemType === 'lesson' ? true : false;\n\n            initQuickSearch();\n            /*\r\n             * initialisation\r\n             */\n            function initQuickSearch() {\n\n                $scope.endDate = moment().endOf('week');\n                $scope.quickSearchPedagogicDays = [];\n                $scope.itemType = isQuickSearchLesson ? 'lesson' : 'homework';\n                $scope.panelLabel = isQuickSearchLesson ? lang.translate('diary.lessons') : lang.translate('diary.homeworks');\n            }\n\n            $scope.$on('rightpanel.open', function (_, rightpanelid) {\n                if (id !== rightpanelid && $scope.panelVisible) {\n                    $scope.setPanelVisible(false, {\n                        target: {\n                            type: \"text\"\n                        }\n                    });\n                }\n            });\n\n            $scope.setPanelVisible = function (isVisible, $event) {\n                if (!$event.target || $event.target.type !== \"text\") {\n\n                    $scope.panelVisible = isVisible;\n\n                    /**\r\n                     * On first panel maximize search items\r\n                     */\n                    if ($scope.isFirstSearch) {\n                        $scope.quickSearch(true);\n                    }\n\n                    // hide the other panel (panel or homework)\n                    if ($scope.itemType == 'lesson') {\n                        // tricky way to get the other directive for homeworks\n                        if (isQuickSearchLesson) {\n                            $scope.$parent.$$childTail.panelVisible = false;\n                        }\n                    } else if ($scope.itemType == 'homework') {\n                        if (!isQuickSearchLesson) {\n                            $scope.$parent.$$childHead.panelVisible = false;\n                        }\n                    }\n\n                    // let enough room to display quick search panel maximized\n                    if (isVisible) {\n                        $('#mainDiaryContainer').width('84%');\n                        $('.quick-search').width('16%');\n                        $rootScope.$broadcast('rightpanel.open', id);\n                    } else {\n                        $('#mainDiaryContainer').width('97%');\n                        $('.quick-search').width('2%');\n                    }\n                }\n            };\n\n            /**\r\n             * By default X pedagogic items are displayed.\r\n             * This allows to display more items\r\n             */\n            $scope.quickSearchNextPedagogicDays = function () {\n\n                if (!$scope.isNextPedagogicDaysDisplayed) {\n                    return;\n                }\n\n                pedagogicItemDisplayedIdxStart += pedagogicDaysDisplayedStep;\n                pedagogicItemDisplayedIdxEnd += pedagogicDaysDisplayedStep;\n\n                $scope.maxPedagogicItemsDisplayed = Math.max($scope.maxPedagogicItemsDisplayed, pedagogicItemDisplayedIdxEnd);\n\n                $scope.quickSearch(false);\n            };\n\n            /**\r\n             *\r\n             */\n            $scope.quickSearchPreviousPedagogicDays = function () {\n\n                if (!$scope.isPreviousPedagogicDaysDisplayed) {\n                    return;\n                }\n\n                pedagogicItemDisplayedIdxStart -= pedagogicDaysDisplayedStep;\n                pedagogicItemDisplayedIdxStart = Math.max(0, pedagogicItemDisplayedIdxStart);\n                pedagogicItemDisplayedIdxEnd -= pedagogicDaysDisplayedStep;\n\n                $scope.quickSearch(false);\n            };\n\n            /**\r\n             *  If true will display the orange arrow to display more items\r\n             *  else not.\r\n             * @type {boolean}\r\n             */\n            $scope.isNextPedagogicDaysDisplayed = false;\n\n            /**\r\n             * Displays \"no results\" if true else blank\r\n             * @type {boolean}\r\n             */\n            $scope.displayNoResultsText = false;\n\n            /**\r\n             * Compute if the button for recent items should be displayed\r\n             * @returns {boolean}\r\n             */\n            var isPreviousPedagogicDaysDisplayed = function isPreviousPedagogicDaysDisplayed() {\n                return !$scope.isFirstSearch && 0 < pedagogicItemDisplayedIdxStart && $scope.quickSearchPedagogicDaysDisplayed.length > 0;\n            };\n\n            /**\r\n             * Returns true if the \"next\" arrow button should be displayed meaning\r\n             * there are other items\r\n             * @returns {boolean}\r\n             */\n            var isNextPedagogicDaysDisplayed = function isNextPedagogicDaysDisplayed(pedagogicItemCount) {\n                return !$scope.isFirstSearch && pedagogicItemDisplayedIdxStart <= pedagogicItemCount && $scope.quickSearchPedagogicDaysDisplayed.length > 0 && $scope.quickSearchPedagogicDaysDisplayed.length >= pedagogicDaysDisplayedStep;\n            };\n\n            var performQuickSearch = function performQuickSearch() {\n\n                clearTimeout(timeout); // this way will not run infinitely\n\n                var params = new SearchForm(true);\n                params.initForTeacher();\n                params.isQuickSearch = true;\n                params.limit = $scope.maxPedagogicItemsDisplayed + 1; // +1 thingy will help to know if extra items can be displayed\n                var period = moment(model.calendar.dayForWeek).day(1);\n                period.add(-60, 'days').format('YYYY-MM-DD');\n                params.startDate = period.format('YYYY-MM-DD');\n                params.endDate = moment($scope.endDate).add(1, 'days');\n                params.sortOrder = \"DESC\";\n\n                if ($scope.itemType == 'lesson') {\n                    params.multiSearchLesson = $scope.multiSearch.trim();\n                } else {\n                    params.multiSearchHomework = $scope.multiSearch.trim();\n                }\n\n                params.returnType = $scope.itemType;\n\n                model.pedagogicDaysQuickSearch = [];\n                $scope.quickSearchPedagogicDaysDisplayed.length = 0;\n\n                $scope.performPedagogicItemSearch(params, model.isUserTeacher());\n            };\n\n            /*\r\n             * search pedagogic item\r\n             */\n            $scope.performPedagogicItemSearch = function (params, isTeacher) {\n                // global quick search panel\n                if (params.isQuickSearch) {\n                    if (params.returnType === 'lesson') {\n                        model.pedagogicDaysQuickSearchLesson = [];\n                    } else {\n                        model.pedagogicDaysQuickSearchHomework = [];\n                    }\n                }\n                // 'classical' view list\n                else {\n                        model.pedagogicDays.reset();\n                    }\n\n                // get pedagogicItems\n                return PedagogicItemService.getPedagogicItems(params).then(function (pedagogicItems) {\n                    var days = _.groupBy(pedagogicItems, 'day');\n                    var pedagogicDays = [];\n                    var aDayIsSelected = false;\n\n                    for (var day in days) {\n                        if (days.hasOwnProperty(day)) {\n                            var pedagogicDay = new PedagogicDay();\n                            pedagogicDay.selected = false;\n                            //TODO is constants\n                            pedagogicDay.dayName = moment(day).format(\"dddd DD MMMM YYYY\");\n                            pedagogicDay.shortName = pedagogicDay.dayName.substring(0, 2);\n                            //TODO is constants\n                            pedagogicDay.shortDate = moment(day).format(\"DD/MM\");\n                            pedagogicDay.pedagogicItemsOfTheDay = days[day];\n\n                            var countItems = _.groupBy(pedagogicDay.pedagogicItemsOfTheDay, 'type_item');\n\n                            pedagogicDay.nbLessons = countItems.lesson ? countItems.lesson.length : 0;\n                            pedagogicDay.nbHomeworks = countItems.homework ? countItems.homework.length : 0;\n\n                            //select default day\n                            if (isTeacher) {\n                                if (!aDayIsSelected) {\n                                    pedagogicDay.selected = true;\n                                    aDayIsSelected = true;\n                                }\n                            } else {\n                                if (pedagogicDay.nbHomeworks > 0 && !aDayIsSelected) {\n                                    pedagogicDay.selected = true;\n                                    aDayIsSelected = true;\n                                }\n                            }\n                            pedagogicDays.push(pedagogicDay);\n                        }\n                    }\n\n                    if (pedagogicDays[0] && !aDayIsSelected) {\n                        pedagogicDays[0].selected = true;\n                    }\n\n                    // global quick search panel\n                    if (params.isQuickSearch) {\n                        if (params.returnType === 'lesson') {\n                            model.pedagogicDaysQuickSearchLesson = model.pedagogicDaysQuickSearchLesson.concat(pedagogicDays);\n                        } else {\n                            model.pedagogicDaysQuickSearchHomework = model.pedagogicDaysQuickSearchHomework.concat(pedagogicDays);\n                        }\n                    } else {\n                        model.pedagogicDays.pushAll(pedagogicDays);\n                    }\n\n                    model.initSubjects();\n\n                    $scope.isFirstSearch = false;\n                    $scope.quickSearchPedagogicDays = isQuickSearchLesson ? model.pedagogicDaysQuickSearchLesson : model.pedagogicDaysQuickSearchHomework;\n                    $scope.displayNoResultsText = $scope.quickSearchPedagogicDays.length === 0;\n\n                    var idxSearchPedagogicItem = 0;\n                    $scope.quickSearchPedagogicDaysDisplayed = [];\n\n                    // count number of displayed items\n                    $scope.quickSearchPedagogicDays.forEach(function (pedagogicDay) {\n\n                        pedagogicDay.pedagogicItemsOfTheDay.forEach(function (pedagogicItemOfTheDay) {\n                            if (pedagogicItemDisplayedIdxStart <= idxSearchPedagogicItem && idxSearchPedagogicItem <= pedagogicItemDisplayedIdxEnd) {\n                                $scope.quickSearchPedagogicDaysDisplayed.push(pedagogicItemOfTheDay);\n                            }\n                            idxSearchPedagogicItem++;\n                        });\n                    });\n\n                    // enable/disable next/previous items arrow buttons\n                    $scope.isPreviousPedagogicDaysDisplayed = isPreviousPedagogicDaysDisplayed();\n                    $scope.isNextPedagogicDaysDisplayed = isNextPedagogicDaysDisplayed(idxSearchPedagogicItem);\n                });\n            };\n\n            $scope.quickSearch = function (resetMaxDisplayedItems) {\n\n                if (resetMaxDisplayedItems) {\n                    $scope.maxPedagogicItemsDisplayed = defaultMaxPedagogicItemsDisplayed;\n                    pedagogicItemDisplayedIdxStart = 0;\n                    pedagogicItemDisplayedIdxEnd = defaultMaxPedagogicItemsDisplayed - 1;\n                }\n\n                if (timeout) {\n                    clearTimeout(timeout);\n                    timeout = null;\n                }\n\n                // start searching after 0.4s (prevent spamming request to backend)\n                timeout = setTimeout(performQuickSearch, 400);\n            };\n\n            var handleCalendarHomeworksDrop = function handleCalendarHomeworksDrop() {\n\n                var timeslots = $('.homeworkpanel');\n\n                var homeworkSlotsPerDay = model.homeworksPerDayDisplayed; // 1;//timeslots.length / 7;\n\n                timeslots.each(function (index) {\n\n                    var timeslot = $(this);\n\n                    // allow drag\n                    timeslot.on('dragover', function (event) {\n                        event.preventDefault();\n                    });\n\n                    timeslot.on('dragenter', function ($event) {\n                        // FIXME red color not visible because overidden by grey color !important\n                        timeslot.css('border', 'blue 2px dashed');\n                        timeslot.css('border-radius', '3px');\n                        //timeslot.css('background-color', 'red');\n                    });\n\n                    timeslot.on('dragleave', function (event) {\n                        //timeslot.css('css', 'color: blue !important');\n                        timeslot.css('border', '');\n                        timeslot.css('border-radius', '');\n                    });\n\n                    timeslot.on('drop', function ($event) {\n                        $event.preventDefault();\n                        timeslot.css('background-color', '');\n\n                        // duplicate dragged lesson\n                        var pedagogicItemOfTheDay = JSON.parse($event.originalEvent.dataTransfer.getData(\"application/json\"));\n\n                        // do not drop if item type is not a lesson\n                        if (pedagogicItemOfTheDay.type_item !== 'homework') {\n                            return;\n                        }\n\n                        var newHomework = new Homework();\n                        newHomework.id = pedagogicItemOfTheDay.id;\n\n                        var newHomeworkDayOfWeek = Math.floor(index / homeworkSlotsPerDay) + 1;\n\n                        newHomework.load(function () {\n                            // will force new lesson to be created in DB\n                            newHomework.id = null;\n                            newHomework.lesson_id = null;\n                            newHomework.state = \"draft\";\n\n                            // startTime and end format from db is \"HH:MM:SS\" as text type for lesson save startTime need to be moment time type with date\n                            newHomework.dueDate = moment(newHomework.dueDate);\n                            newHomework.startTime = moment(newHomework.date.format('YYYY-MM-DD') + ' ' + newHomework.startTime);\n                            newHomework.startTime.day(newHomeworkDayOfWeek);\n\n                            // TODO refactor endTime = startTime + 1h\n                            newHomework.endTime = moment(newHomework.date.format('YYYY-MM-DD') + ' ' + newHomework.endTime);\n                            newHomework.endTime.day(newHomeworkDayOfWeek);\n                            newHomework.endTime.week(model.calendar.week);\n\n                            newHomework.dueDate.day(newHomeworkDayOfWeek);\n                            newHomework.dueDate.week(model.calendar.week);\n\n                            newHomework.save(function (data) {\n                                // remove homework from model so will force reload\n                                // needed because homework.dueDate need a specific format !\n                                var homework = model.homeworks.findWhere({\n                                    id: parseInt(newHomework.id)\n                                });\n                                model.homeworks.remove(homework);\n                                window.location = '/diary#/editHomeworkView/' + newHomework.id;\n                            }, function (error) {\n                                console.error(error);\n                            });\n                        }, function (error) {\n                            console.error(error);\n                        });\n                    });\n                });\n            };\n\n            // wait until calendar loaded\n            if (!model.homeworksDropHandled) {\n                setTimeout(handleCalendarHomeworksDrop, 2000);\n                model.homeworksDropHandled = true;\n            }\n        }\n    });\n})();\n","'use strict';\n\n(function () {\n  'use strict';\n\n  AngularExtensions.addModuleConfig(function (module) {\n    /**\r\n         * Directive to perform a quick search among lessons and homeworks\r\n         */\n    module.directive('quickSearch', function () {\n      return {\n        restrict: \"E\",\n        templateUrl: \"/diary/public/js/directives/quick-search/quick-search.html\",\n        scope: {\n          /**\r\n           * Item type 'lesson' or 'homework'\r\n           */\n          itemType: \"@\"\n        },\n        controller: 'QuickSearchController',\n        link: function link(scope, element, attrs, location) {}\n      };\n    });\n  });\n})();\n","'use strict';\n\n(function () {\n    'use strict';\n\n    AngularExtensions.addModuleConfig(function (module) {\n\n        /**\r\n         * Directive for result items\r\n         */\n        module.directive('searchDropDown', function () {\n            return {\n                restrict: \"E\",\n                templateUrl: \"/diary/public/js/directives/search-drop-down/search-drop-down.template.html\",\n                scope: {\n                    items: '=',\n                    showExpression: '@',\n                    model: '=',\n                    placeHolder: '@',\n                    freeField: '='\n                },\n                controller: 'SearchDropDownController'\n            };\n        });\n\n        module.controller(\"SearchDropDownController\", controller);\n\n        function controller($scope, $sce, $timeout) {\n\n            $scope.showDropDown = false;\n            if (!$scope.showExpression) {\n                $scope.showExpression = 'item';\n            }\n\n            $scope.$watch('items', init);\n            $scope.$watch('searchFilter', init);\n\n            function init() {\n                $scope.itemsToShow = $scope.items.map(function (item) {\n                    var result = \"\";\n                    var value = eval($scope.showExpression);\n                    var hightlightedText = highlight(value, $scope.searchFilter);\n                    return {\n                        text: value,\n                        hightlightedText: hightlightedText,\n                        item: item\n                    };\n                });\n\n                $scope.itemsToShow = $scope.itemsToShow.filter(function (e) {\n                    if (!e.text || !$scope.searchFilter) {\n                        return true;\n                    }\n                    return e.text.toLowerCase().indexOf($scope.searchFilter.toLowerCase()) > -1;\n                });\n                console.log($scope.itemsToShow);\n            }\n\n            function highlight(text, phrase) {\n                if (phrase) text = text.replace(new RegExp('(' + phrase + ')', 'gi'), '<span class=\"highlighted\">$1</span>');\n                return text;\n            }\n            $scope.eraseSelected = function ($event) {\n                $scope.selectedItem = undefined;\n                angular.element($event.target).parent().parent().find('input')[0].focus();\n            };\n            $scope.selectItem = function (option) {\n                $scope.searchFilter = undefined;\n                $scope.selectedItem = option;\n                $scope.showDropDown = false;\n            };\n            $scope.blur = function () {\n                $timeout(function () {\n                    $scope.showDropDown = false;\n                });\n            };\n            $scope.enter = function (keyEvent) {\n\n                if (keyEvent.which === 13) {\n                    if (!$scope.searchFilter) {\n                        return;\n                    }\n                    var item = $scope.itemsToShow.find(function (e) {\n                        return e.text.toLowerCase() === $scope.searchFilter.toLowerCase();\n                    });\n                    if (item) {\n                        $scope.selectItem(item);\n                    }\n                }\n            };\n            $scope.change = function () {\n                $scope.showDropDown = $scope.searchFilter.length > 0;\n                $scope.selectedItem = undefined;\n            };\n        }\n    });\n})();\n","'use strict';\n\n(function () {\n    'use strict';\n\n    AngularExtensions.addModuleConfig(function (module) {\n\n        module.directive('secure', directive);\n\n        function directive(SecureService) {\n            return {\n                restrict: \"A\",\n                link: function link(scope, elem, attrs) {\n                    if (!SecureService.hasRight(attrs.secure)) {\n                        elem[0].remove();\n                    }\n                }\n            };\n        }\n    });\n})();\n","\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n(function () {\n    'use strict';\n\n    var SecureService = function () {\n        function SecureService() {\n            _classCallCheck(this, SecureService);\n        }\n\n        _createClass(SecureService, [{\n            key: \"hasRight\",\n            value: function hasRight(right) {\n                var result = false;\n                _.each(model.me.authorizedActions, function (authorizedAction) {\n                    if (authorizedAction.displayName === right) {\n                        result = true;\n                    }\n                });\n                return result;\n            }\n        }]);\n\n        return SecureService;\n    }();\n\n    AngularExtensions.addModuleConfig(function (module) {\n        module.service(\"SecureService\", SecureService);\n    });\n})();\n","'use strict';\n\n(function () {\n    'use strict';\n\n    AngularExtensions.addModuleConfig(function (module) {\n        module.directive('subjectPicker', function () {\n            return {\n                scope: {\n                    ngModel: '=',\n                    ngChange: '&',\n                    lesson: \"=\",\n                    homework: \"=\"\n                },\n                transclude: true,\n                replace: true,\n                restrict: 'E',\n                templateUrl: 'diary/public/template/subject-picker.html',\n                link: function link(scope, element) {\n                    var sortBySubjectLabel = function sortBySubjectLabel(a, b) {\n                        if (a.label > b.label) return 1;\n                        if (a.label < b.label) return -1;\n                        return 0;\n                    };\n\n                    scope.search = null;\n                    scope.displaySearch = false;\n\n                    // init suggested subjects with all subjects\n                    scope.suggestedSubjects = [];\n\n                    // custom subject collection\n                    // containing base subject collection + current ones being created by used\n                    var subjects = [];\n\n                    /*model.subjects.all.forEach(function(subject) {\r\n                        subjects.push(subject);\r\n                    });\r\n                      subjects.sort(sortBySubjectLabel);\r\n                    */\n\n                    var setNewSubject = function setNewSubject(subjectLabel) {\n\n                        if (!subjectLabel) {\n                            return;\n                        }\n\n                        subjectLabel = subjectLabel.trim();\n\n                        var existingSubject = null;\n\n                        for (var i = 0; i < subjects.length; i++) {\n                            if (sansAccent(subjects[i].label).toUpperCase() === sansAccent(subjectLabel).toUpperCase()) {\n                                existingSubject = subjects[i];\n                            }\n                        }\n\n                        if (!existingSubject) {\n                            scope.ngModel = new Subject();\n                            scope.ngModel.label = subjectLabel;\n                            scope.ngModel.id = null;\n                            scope.ngModel.school_id = scope.lesson ? scope.lesson.audience.structureId : scope.homework.audience.structureId;\n                            scope.ngModel.teacher_id = model.me.userId;\n                            subjects.push(scope.ngModel);\n                        } else {\n                            scope.ngModel = existingSubject;\n                        }\n                    };\n                    scope.$watch('lesson.audience.structureId', function () {\n                        if (scope.ngModel && scope.lesson && scope.lesson.audience && scope.lesson.audience.structureId) {\n                            scope.ngModel.school_id = scope.lesson ? scope.lesson.audience.structureId : scope.homework.audience.structureId;\n                        }\n                    });\n                    var initSuggestedSubjects = function initSuggestedSubjects() {\n                        scope.suggestedSubjects = [];\n\n                        subjects = [];\n\n                        model.subjects.all.forEach(function (subject) {\n                            subjects.push(subject);\n                        });\n\n                        subjects.sort(sortBySubjectLabel);\n\n                        for (var i = 0; i < subjects.length; i++) {\n                            scope.suggestedSubjects.push(subjects[i]);\n                        }\n                    };\n\n                    scope.$watch(function () {\n                        return model.subjects ? model.subjects.length() : undefined;\n                    }, function () {\n                        initSuggestedSubjects();\n                    });\n                    scope.goToSearchMode = function () {\n                        scope.displaySearch = true;\n                        scope.search = '';\n                        initSuggestedSubjects();\n                    };\n\n                    scope.isSelected = function (subject) {\n\n                        if (scope.ngModel && subject) {\n                            if (scope.ngModel.id) {\n                                return scope.ngModel.id === subject.id;\n                            }\n                            // subject may not have id if it's new one\n                            else {\n                                    return sansAccent(scope.ngModel.label) === sansAccent(subject.label);\n                                }\n                        } else {\n                            return false;\n                        }\n                    };\n\n                    /**\r\n                     * Search subject from input by user\r\n                     */\n                    scope.searchSubject = function (event) {\n\n                        if (event.type === 'keydown' && event.keyCode === 9) {\n                            scope.displaySearch = false;\n\n                            if (scope.search != '') {\n                                setNewSubject(scope.search);\n                            }\n                            return;\n                        }\n\n                        scope.search = scope.search.trim();\n\n                        if (scope.search != '') {\n                            var matchingSubjects = model.findSubjectsByLabel(scope.search);\n                            scope.suggestedSubjects = new Array();\n\n                            for (var i = 0; i < matchingSubjects.length; i++) {\n                                scope.suggestedSubjects.push(matchingSubjects[i]);\n                            }\n                        } else {\n                            initSuggestedSubjects();\n                        }\n                    };\n\n                    scope.selectSubject = function (subject) {\n                        scope.ngModel = subject;\n                        scope.displaySearch = false;\n                        if (scope.lesson) {\n                            scope.lesson.previousLessonsLoaded = false;\n                        }\n                    };\n\n                    $(element.context.ownerDocument).click(function (event) {\n                        if (!$(event.target).is(\"item-suggest\") && !$(event.target).is(\"#remove-subject\") && !$(event.target).is(\"#input-subject\")) {\n                            scope.displaySearch = false;\n\n                            // new subject that will need to be created on lesson/homework save\n                            if (scope.suggestedSubjects.length === 0) {\n                                setNewSubject(scope.search);\n                            }\n                            scope.$apply();\n                        }\n                    });\n                }\n            };\n        });\n    });\n})();\n","'use strict';\n\n(function () {\n    'use strict';\n\n    AngularExtensions.addModuleConfig(function (module) {\n        module.directive('timePicker', function () {\n            return {\n                scope: {\n                    ngModel: '=',\n                    ngChange: '&'\n                },\n                transclude: true,\n                replace: true,\n                restrict: 'E',\n                template: \"<input type='text' />\",\n                link: function link(scope, element, attributes) {\n                    var hideFunction = function hideFunction(e) {\n                        var timepicker = element.data('timepicker');\n                        if (!timepicker || element[0] === e.target || $('.bootstrap-timepicker-widget').find(e.target).length !== 0) {\n                            return;\n                        }\n                        timepicker.hideWidget();\n                    };\n                    $('body, lightbox').on('click', hideFunction);\n                    $('body, lightbox').on('focusin', hideFunction);\n                    if (!$.fn.timepicker) {\n                        $.fn.timepicker = function () {};\n                        loader.asyncLoad('/' + infraPrefix + '/public/js/bootstrap-timepicker.js', function () {\n                            // does not seem to work properly\n                            element.timepicker({\n                                showMeridian: false,\n                                defaultTime: 'current'\n                            });\n                        });\n                    }\n\n                    scope.$watch('ngModel', function (newVal) {\n                        if (!newVal) {\n                            return;\n                        }\n                        element.val(newVal.format(\"HH:mm\"));\n                    });\n\n                    element.on('focus', function () {\n                        element.timepicker({\n                            showMeridian: false,\n                            defaultTime: 'current',\n                            minuteStep: 5\n                        });\n                    });\n\n                    element.on('change', function () {\n                        var time = element.val().split(':');\n                        if (scope.ngModel && scope.ngModel.hour) {\n                            scope.ngModel.set('hour', time[0]);\n                            scope.ngModel.set('minute', time[1]);\n                            scope.$apply('ngModel');\n                            scope.$parent.$eval(scope.ngChange);\n                            scope.$parent.$apply();\n                        }\n                    });\n\n                    element.on('show.timepicker', function () {\n                        element.parents().find('lightbox').on('click.timepicker', function (e) {\n                            if (!(element.parent().find(e.target).length || timepicker.$widget.is(e.target) || timepicker.$widget.find(e.target).length)) {\n                                timepicker.hideWidget();\n                            }\n                        });\n                    });\n                }\n            };\n        });\n    });\n})();\n","'use strict';\n\n(function () {\n\t'use strict';\n\n\tAngularExtensions.addModuleConfig(function (module) {\n\t\tmodule.filter('arraytostring', filter);\n\n\t\tfunction filter() {\n\t\t\treturn function (item) {\n\t\t\t\t// return the current `item`, but call `toUpperCase()` on it\n\n\t\t\t\tif (!item) {\n\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\t\t\t\tvar result = \"\";\n\t\t\t\t_.each(item, function (it) {\n\t\t\t\t\tresult += it + \",\";\n\t\t\t\t});\n\t\t\t\tresult = result.substring(0, result.length - 1);\n\t\t\t\treturn result;\n\t\t\t};\n\t\t}\n\t});\n})();\n","'use strict';\n\n(function () {\n    'use strict';\n\n    AngularExtensions.addModuleConfig(function (module) {\n        module.filter('highlight', filter);\n\n        function filter($sce) {\n            return function (text, phrase) {\n                if (phrase) text = text.replace(new RegExp('(' + phrase + ')', 'gi'), '<span class=\"highlighted\">$1</span>');\n                return $sce.trustAsHtml(text);\n            };\n        }\n    });\n})();\n","'use strict';\n\n(function () {\n\t'use strict';\n\n\tAngularExtensions.addModuleConfig(function (module) {\n\t\tmodule.filter('maxChar', filter);\n\n\t\tfunction filter() {\n\t\t\treturn function (item, maxChar) {\n\t\t\t\tif (!item) {\n\t\t\t\t\treturn item;\n\t\t\t\t}\n\t\t\t\tif (!item.indexOf) {\n\t\t\t\t\titem = item.toString();\n\t\t\t\t}\n\n\t\t\t\titem = item.replace(/<\\/?[^>]+(>|$)/g, \" \");\n\n\t\t\t\tvar dynamicMaxChar = maxChar;\n\n\t\t\t\t/*if (item.indexOf('</div>') < dynamicMaxChar){\r\n     dynamicMaxChar = item.indexOf('</div>') + 6;\r\n    }*/\n\t\t\t\tif (item.length < dynamicMaxChar) {\n\t\t\t\t\treturn item;\n\t\t\t\t} else {\n\t\t\t\t\treturn item.substring(0, dynamicMaxChar) + \" ...\";\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t});\n})();\n","'use strict';\n\n(function () {\n\t'use strict';\n\n\tAngularExtensions.addModuleConfig(function (module) {\n\t\tmodule.filter('translate', filter);\n\n\t\tfunction filter() {\n\t\t\treturn function (text) {\n\t\t\t\treturn lang.translate(text);\n\t\t\t};\n\t\t}\n\t});\n})();\n","'use strict';\n\n(function () {\n\t'use strict';\n\n\tAngularExtensions.addModuleConfig(function (module) {\n\t\tmodule.filter('trusthtml', filter);\n\n\t\tfunction filter($sce) {\n\t\t\treturn function (text) {\n\t\t\t\treturn $sce.trustAsHtml(text);\n\t\t\t};\n\t\t}\n\t});\n})();\n","'use strict';\n\n(function () {\n    'use strict';\n\n    AngularExtensions.addModuleConfig(function (module) {\n\n        module.config(function ($httpProvider) {\n            $httpProvider.interceptors.push(['$q', '$location', function ($q, $location) {\n\n                function parseError(e) {\n                    var error = e;\n\n                    if (!error.error) {\n                        error.error = \"diary.error.unknown\";\n                    }\n                    return error;\n                }\n\n                return {\n                    'responseError': function responseError(response) {\n                        if (response.status === 400) {\n                            console.warn(\"error execution request\");\n                            console.warn(response);\n                            var error = parseError(response.data);\n                            notify.error(error.error);\n                        }\n                        return $q.reject();\n                    }\n                };\n            }]);\n        });\n    });\n})();\n","'use strict';\n\n/**\r\n * Model of attachment from\r\n * table diary.attachment (DB)\r\n * @constructor\r\n */\nfunction Attachment() {\n    /**\r\n     * Attachment id as in diary.attachment table\r\n     * @type {number}\r\n     */\n    this.id = null;\n\n    this.user_id = null;\n    /**\r\n     * Id of stored document within the document module\r\n     * (see mongodb -> Documents table)\r\n     * E.G: \"b88a3c42-7e4f-4e1c-ab61-11c8872ef795\"\r\n     * @type {string}\r\n     */\n    this.document_id = null;\n    /***\r\n     * Creation date\r\n     * @type {null}\r\n     */\n    this.creation_date = null;\n    /**\r\n     * Filename of attachment\r\n     * @type {string}\r\n     */\n    this.document_label = null;\n};\n\n/**\r\n * Download the attachment\r\n */\nAttachment.prototype.download = function () {\n    window.location = '/workspace/document/' + this.document_id;\n};\n\n/**\r\n * Detach attachment to a lesson\r\n * Attachment link will be detached to back end on lesson save\r\n * @param item Lesson or homework\r\n * @param cb Callback\r\n * @param cbe Callback on error\r\n */\nAttachment.prototype.detachFromItem = function (item, cb, cbe) {\n\n    var that = this;\n\n    if (item && item.attachments) {\n\n        var udpatedAttachments = new Array();\n\n        item.attachments.forEach(function (attachment) {\n            if (attachment && attachment.document_id !== that.document_id) {\n                udpatedAttachments.push(attachment);\n            }\n        });\n\n        item.attachments = udpatedAttachments;\n\n        if (typeof cb === 'function') {\n            cb();\n        } else typeof cbe === 'function';\n        {\n            cbe();\n        }\n    }\n};\n","\"use strict\";\n\nfunction Child() {\n    this.id; //String\n    this.displayName; //String\n    this.classId; //String\n    this.className; //String\n    this.selected = false;\n}\n","'use strict';\n\nfunction Homework() {\n\n    /**\r\n     * used in ui in homework tab in lesson view\r\n     * @type {boolean}\r\n     */\n    this.expanded = false;\n\n    /**\r\n     * Attachments\r\n     */\n    if (!this.attachments) {\n        this.attachments = new Array();\n    }\n\n    /**\r\n     * Delete calendar references of current homework\r\n     */\n    this.deleteModelReferences = function () {\n        var idxHomeworkToDelete = model.homeworks.indexOf(this);\n\n        // delete homework in calendar cache\n        if (idxHomeworkToDelete >= 0) {\n            model.homeworks.splice(idxHomeworkToDelete, 1);\n        }\n    };\n\n    /**\r\n     * Adds an attachment\r\n     * @param attachment\r\n     */\n    this.addAttachment = function (attachment) {\n        this.attachments.push(attachment);\n    };\n\n    /**\r\n     * Removes attachment associated to this lesson\r\n     * @param attachment\r\n     * @param cb\r\n     * @param cbe\r\n     */\n    this.detachAttachment = function (attachment, cb, cbe) {\n        attachment.detachFromItem(this.id, 'lesson', cb, cbe);\n    };\n}\n\nHomework.prototype.api = {\n    delete: '/diary/homework/:id'\n};\n\nHomework.prototype.save = function (cb, cbe) {\n\n    var that = this;\n\n    var updateOrCreateHomework = function updateOrCreateHomework() {\n        if (that.id) {\n            that.update(cb, cbe);\n        } else {\n            that.create(cb, cbe);\n        }\n    };\n\n    // autocreates subject if it does not exists\n    if (!this.subject.id) {\n        this.subject.save(updateOrCreateHomework);\n    } else {\n        updateOrCreateHomework();\n    }\n};\n\n/**\r\n * Returns true if current homework is attached to a lesson\r\n * @returns {boolean}\r\n */\nHomework.prototype.isAttachedToLesson = function () {\n    return typeof this.lesson_id !== 'undefined' && this.lesson_id != null;\n};\n\nHomework.prototype.isDraft = function () {\n    return this.state === \"draft\";\n};\n\nHomework.prototype.isPublished = function () {\n    return !this.isDraft();\n};\n\n/**\r\n * A directly publishable homework must exist in database and not linked to a lesson\r\n * @param toPublish\r\n * @returns {*|boolean} true if homework can be published directly\r\n */\nHomework.prototype.isPublishable = function (toPublish) {\n    return this.id && (toPublish ? this.isDraft() : this.isPublished()) && this.lesson_id == null;\n};\n\nHomework.prototype.changeState = function (toPublish) {\n    this.state = toPublish ? 'published' : 'draft';\n};\n\nHomework.prototype.update = function (cb, cbe) {\n    var url = '/diary/homework/' + this.id;\n\n    var homework = this;\n    http().putJson(url, this).done(function () {\n        if (typeof cb === 'function') {\n            cb();\n        }\n    }.bind(this)).error(function (e) {\n        if (typeof cbe === 'function') {\n            cbe(model.parseError(e));\n        }\n    });\n};\n\nHomework.prototype.create = function (cb, cbe) {\n    var homework = this;\n    http().postJson('/diary/homework', this).done(function (b) {\n        homework.updateData(b);\n        model.homeworks.pushAll([homework]);\n        if (typeof cb === 'function') {\n            cb();\n        }\n    }).error(function (e) {\n        if (typeof cbe === 'function') {\n            cbe(model.parseError(e));\n        }\n    });\n};\n\n/**\r\n * Load homework object from id\r\n * @param cb Callback function\r\n * @param cbe Callback on error function\r\n */\nHomework.prototype.load = function (cb, cbe) {\n\n    var homework = this;\n\n    var load = function load() {\n        http().get('/diary/homework/' + homework.id).done(function (data) {\n            homework.updateData(sqlToJsHomework(data));\n\n            if (typeof cb === 'function') {\n                cb();\n            }\n        }).error(function (e) {\n            if (typeof cbe === 'function') {\n                cbe(model.parseError(e));\n            }\n        });\n    };\n\n    // might occur when user pressed F5 on lesson view\n    // needed to fill homework.audience and subject properties\n    if (model.audiences.all.length === 0) {\n        model.audiences.syncAudiences(function () {\n            model.subjects.syncSubjects(load);\n        });\n    } else {\n        load();\n    }\n};\n\n/**\r\n * Deletes a list of homeworks\r\n * @param homeworks Homeworks to be deleted\r\n * @param cb Callback\r\n * @param cbe Callback on error\r\n */\nHomework.prototype.deleteList = function (homeworks, cb, cbe) {\n    model.deleteItemList(homeworks, 'homework', cb, cbe);\n};\n\n/**\r\n * Deletes the homework\r\n * @param Optional lesson attached to homework\r\n * @param cb Callback after delete\r\n * @param cbe Callback on error\r\n */\nHomework.prototype.delete = function (lesson, cb, cbe) {\n\n    var homework = this;\n\n    var deleteHomeworkReferences = function deleteHomeworkReferences() {\n\n        // delete homework from calendar cache\n        model.homeworks.forEach(function (modelHomework) {\n            if (modelHomework.id === homework.id) {\n                model.homeworks.remove(modelHomework);\n            }\n        });\n\n        if (lesson && lesson.homeworks) {\n            lesson.homeworks.remove(homework);\n        }\n    };\n\n    if (this.id) {\n        http().delete('/diary/homework/' + this.id).done(function (b) {\n\n            deleteHomeworkReferences();\n\n            if (typeof cb === 'function') {\n                cb();\n            }\n        }).error(function (e) {\n            if (typeof cbe === 'function') {\n                cbe(model.parseError(e));\n            }\n        });\n    } else {\n        deleteHomeworkReferences();\n\n        if (typeof cb === 'function') {\n            cb();\n        }\n    }\n};\n\nHomework.prototype.toJSON = function () {\n\n    var json = {\n        homework_title: this.title,\n        subject_id: this.subject.id,\n        homework_type_id: this.type.id,\n        teacher_id: model.me.userId,\n        school_id: this.audience.structureId,\n        audience_id: this.audience.id,\n        homework_due_date: moment(this.dueDate).format(DATE_FORMAT),\n        homework_description: this.description,\n        homework_color: this.color,\n        homework_state: this.state,\n        // used to auto create postgresql diary.audience if needed\n        // not this.audience object is originally from neo4j graph (see syncAudiences function)\n        audience_type: this.audience.type,\n        audience_name: this.audience.name,\n        attachments: this.attachments\n    };\n\n    if (this.lesson_id) {\n        json.lesson_id = this.lesson_id;\n    }\n\n    if (!this.id) {\n        created: moment(this.created).format('YYYY-MM-DD HH:mm:ss.SSSSS'); // \"2016-07-05 11:48:22.18671\"\n    }\n\n    return json;\n};\n","'use strict';\n\nfunction Lesson(data) {\n    this.selected = false;\n    //this.collection(Attachment);\n    // initialize homeworks collection (see lib.js)\n    if (!this.homeworks) {\n        this.collection(Homework);\n    }\n    this.subject = data ? data.subject : new Subject();\n    this.audience = data ? data.audience : new Audience();\n\n    /**\r\n     * Attachments\r\n     */\n    if (!this.attachments) {\n        this.attachments = new Array();\n    }\n\n    var that = this;\n\n    /**\r\n     * Adds an attachment\r\n     * @param attachment\r\n     */\n    this.addAttachment = function (attachment) {\n        this.attachments.push(attachment);\n    };\n\n    /**\r\n     * Delete calendar references of current lesson\r\n     */\n    this.deleteModelReferences = function () {\n        model.lessons.forEach(function (lesson) {\n            if (lesson.id === that.id) {\n                model.lessons.remove(lesson);\n            }\n        });\n        // delete associated homeworks references\n        var lessonHomeworks = model.homeworks.filter(function (homework) {\n            return homework && homework.lesson_id === that.id;\n        });\n\n        lessonHomeworks.forEach(function (homework) {\n            model.homeworks.remove(homework);\n        });\n    };\n}\n\nLesson.prototype.api = {\n    delete: '/diary/lesson/:id'\n};\n\n/**\r\n * Triggered when lesson item has stopped being dragged in calendar view\r\n * see angular-app.js scheduleItemEl.on('stopDrag').\r\n * Will auto-save lesson in db on item move/resize\r\n * @param cb\r\n * @param cbe\r\n */\nLesson.prototype.calendarUpdate = function (cb, cbe) {\n\n    // TODO date fields types are kinda messy\n    // toJson method needs date fields to be in some specific format\n    if (this.beginning) {\n        this.date = this.beginning;\n        this.startMoment = this.beginning;\n        this.endMoment = this.end;\n        this.startTime = this.startMoment;\n        this.endTime = this.endMoment;\n    }\n    if (this.id) {\n        this.update(function () {\n            //model.refresh();\n        }, function (error) {\n            model.parseError(error);\n        });\n    }\n};\n\n/**\r\n * Save attached homeworks of lesson\r\n * @param cb Callback\r\n * @param cbe Callback on error\r\n */\nLesson.prototype.saveHomeworks = function (cb, cbe) {\n    var homeworkSavedCount = 0;\n    var homeworkCount = this.homeworks ? this.homeworks.all.length : 0;\n    var that = this;\n\n    // make sure subject and audience of homeworks are\n    // same as the lesson\n    if (homeworkCount > 0) {\n        this.homeworks.forEach(function (homework) {\n            homework.lesson_id = that.id;\n            // needed fields as in model.js Homework.prototype.toJSON\n            homework.audience = that.audience;\n            homework.subject = that.subject;\n            homework.color = that.color;\n\n            homework.save(function (x) {\n                homeworkSavedCount++;\n                // callback function once all homeworks saved\n                if (homeworkSavedCount === homeworkCount) {\n                    if (typeof cb === 'function') {\n                        cb();\n                    }\n                }\n            }, function (e) {\n                if (typeof cbe === 'function') {\n                    cbe(model.parseError(e));\n                }\n            });\n        });\n    } else {\n        if (typeof cb === 'function') {\n            cb();\n        }\n    }\n};\n\n/**\r\n * Save lesson and attached homeworks\r\n * and sync calendar lessons and homeworks cache\r\n * @param cb\r\n * @param cbe\r\n */\nLesson.prototype.save = function (cb, cbe) {\n\n    // startTime used for db save but startMoment in calendar view\n    // startMoment day is given by lesson.date\n    this.startMoment = model.getMomentDateTimeFromDateAndMomentTime(this.date, moment(this.startTime));\n    this.endMoment = model.getMomentDateTimeFromDateAndMomentTime(this.date, moment(this.endTime));\n    var that = this;\n\n    var saveHomeworksAndSync = function saveHomeworksAndSync() {\n        that.saveHomeworks(function () {\n            syncLessonsAndHomeworks(cb);\n        });\n    };\n\n    var updateOrCreateLesson = function updateOrCreateLesson() {\n        if (that.id) {\n            that.update(saveHomeworksAndSync, cbe);\n        } else {\n            that.create(saveHomeworksAndSync, cbe);\n        }\n    };\n\n    // autocreates subject if it does not exists\n    if (!this.subject.id) {\n        this.subject.save(updateOrCreateLesson);\n    } else {\n        updateOrCreateLesson();\n    }\n};\n\n/**\r\n *\r\n * @param idHomework\r\n * @returns {boolean}\r\n */\nLesson.prototype.hasHomeworkWithId = function (idHomework) {\n\n    var found = false;\n\n    if (!idHomework || !this.homeworks) {\n        found = false;\n    }\n\n    this.homeworks.forEach(function (homework) {\n        if (homework.id === idHomework) {\n            found = true;\n        }\n    });\n\n    return found;\n};\n\nLesson.prototype.update = function (cb, cbe) {\n    var url = '/diary/lesson/' + this.id;\n\n    var lesson = this;\n\n    http().putJson(url, this).done(function () {\n\n        if (typeof cb === 'function') {\n            cb();\n        }\n    }.bind(this)).error(function (e) {\n        if (typeof cbe === 'function') {\n            cbe(model.parseError(e));\n        }\n    });\n};\n\nLesson.prototype.create = function (cb, cbe) {\n    var lesson = this;\n    http().postJson('/diary/lesson', this).done(function (b) {\n        lesson.updateData(b);\n        model.lessons.pushAll([lesson]);\n        if (typeof cb === 'function') {\n            cb();\n        }\n    }).error(function (e) {\n        if (typeof cbe === 'function') {\n            cbe(model.parseError(e));\n        }\n    });\n};\n\n/**\r\n * Deletes the lesson\r\n * @param cb Callback\r\n * @param cbe Callback on error\r\n */\nLesson.prototype.delete = function (cb, cbe) {\n\n    var lesson = this;\n\n    http().delete('/diary/lesson/' + this.id, this).done(function (b) {\n\n        lesson.deleteModelReferences();\n\n        if (typeof cb === 'function') {\n            cb();\n        }\n    }).error(function (e) {\n        if (typeof cbe === 'function') {\n            cbe(model.parseError(e));\n        }\n    });\n};\n\n/**\r\n * Deletes a list of lessons\r\n * @param lessons Lessons to be deleted\r\n * @param cb Callback\r\n * @param cbe Callback on error\r\n */\nLesson.prototype.deleteList = function (lessons, cb, cbe) {\n    model.deleteItemList(lessons, 'lesson', cb, cbe);\n};\n\n/**\r\n * Load lesson object from id\r\n * @param cb Callback function\r\n * @param cbe Callback on error function\r\n */\nLesson.prototype.load = function (loadHomeworks, cb, cbe) {\n\n    var lesson = this;\n\n    var load = function load() {\n        http().get('/diary/lesson/' + lesson.id).done(function (data) {\n            lesson.updateData(model.LessonService.mapLesson(data));\n\n            if (loadHomeworks) {\n                model.loadHomeworksForLesson(lesson, cb, cbe);\n            }\n\n            if (typeof cb === 'function') {\n                cb();\n            }\n        }).error(function (e) {\n            if (typeof cbe === 'function') {\n                cbe(model.parseError(e));\n            }\n        });\n    };\n\n    // might occur when user pressed F5 on lesson view\n    if (model.audiences.all.length === 0) {\n        model.audiences.syncAudiences(function () {\n            model.subjects.syncSubjects(load);\n        });\n    } else {\n        load();\n    }\n};\n\n/**\r\n * Publishes the lesson\r\n * @param cb Callback\r\n * @param cbe Callback on error\r\n */\nLesson.prototype.publish = function (cb, cbe) {\n\n    var jsonLesson = new Lesson();\n    jsonLesson.id = this.id;\n    jsonLesson.audience.structureId = this.structureId;\n\n    http().postJson('/diary/lesson/publish', jsonLesson).done(function () {\n        if (typeof cb === 'function') {\n            cb();\n        }\n    }).error(function (e) {\n        if (typeof cbe === 'function') {\n            cbe(model.parseError(e));\n        }\n    });\n};\n\n/**\r\n *\r\n * JSON object corresponding to sql diary.lesson table columns\r\n */\nLesson.prototype.toJSON = function () {\n\n    var json = {\n        lesson_id: this.id,\n        subject_id: this.subject.id,\n        school_id: this.audience.structureId,\n        // TODO missing teacher_id\n        audience_id: this.audience.id,\n        lesson_title: this.title,\n        lesson_color: this.color,\n        lesson_date: moment(this.date).format(DATE_FORMAT),\n        lesson_start_time: moment(this.startTime).format('HH:mm'),\n        lesson_end_time: moment(this.endTime).format('HH:mm'),\n        lesson_description: this.description,\n        lesson_annotation: this.annotations,\n        lesson_state: this.state,\n        // start columns not in lesson table TODO move\n        audience_type: this.audience.type,\n        audience_name: this.audience.name,\n        attachments: this.attachments\n    };\n\n    if (this.room) {\n        json.lesson_room = this.room;\n    }\n\n    return json;\n};\n\nLesson.prototype.addHomework = function (cb) {\n    var homework = model.initHomework(this);\n    this.homeworks.push(homework);\n};\n\nLesson.prototype.deleteHomework = function (homework) {\n\n    homework.delete(function (cb) {}, function (cbe) {});\n\n    var homework = new Homework();\n    homework.dueDate = this.date;\n    homework.type = model.homeworkTypes.first();\n    this.homeworks.push(homework);\n};\n\nLesson.prototype.isDraft = function () {\n    return this.state === \"draft\";\n};\n\nLesson.prototype.isPublished = function () {\n    return !this.isDraft();\n};\n\nLesson.prototype.isPublishable = function (toPublish) {\n    return this.id && this.state == (toPublish ? 'draft' : 'published');\n};\n\n/**\r\n * Change state of current and associated homeworks\r\n * @param isPublished\r\n */\nLesson.prototype.changeState = function (isPublished) {\n    this.state = isPublished ? 'published' : 'draft';\n\n    // change state of associated homeworks\n    this.homeworks.forEach(function (homework) {\n        var lessonHomework = homework;\n        homework.state = isPublished ? 'published' : 'draft';\n\n        var found = false;\n\n        // change state of homeworks cache in calendar for current week\n        model.homeworks.forEach(function (homeworkCache) {\n            if (!found && homeworkCache.id == lessonHomework.id) {\n                homeworkCache.state = isPublished ? 'published' : 'draft';\n                found = true;\n            }\n        });\n    });\n};\n","\"use strict\";\n\nfunction PedagogicDay() {\n    this.selected = false;\n    this.dayName = moment().format(\"dddd DD MMMM YYYY\");\n    this.shortName = this.dayName.substring(0, 2);\n    this.shortDate = moment().format(\"DD/MM\");\n    this.pedagogicItemsOfTheDay = [];\n    this.nbLessons = 0;\n    this.nbHomeworks = 0;\n}\n\nPedagogicDay.prototype.numberOfItems = function () {\n    return this.nbLessons + this.nbHomeworks;\n};\n\nPedagogicDay.prototype.resetCountValues = function () {\n    var countItems = _.groupBy(this.pedagogicItemsOfTheDay, 'type_item');\n    this.nbLessons = countItems['lesson'] ? countItems['lesson'].length : 0;\n    this.nbHomeworks = countItems['homework'] ? countItems['homework'].length : 0;\n};\n","'use strict';\n\nfunction PedagogicItem() {\n    this.selected = false;\n}\n\nPedagogicItem.prototype.deleteModelReferences = function () {\n    model.deletePedagogicItemReferences(this.id);\n};\n\nPedagogicItem.prototype.changeState = function (toPublish) {\n    //if item is a lesson may need to upgrade his related homework\n    if (this.type_item === 'lesson') {\n        var relatedToLesson = model.pedagogicDays.getItemsByLesson(this.id);\n        relatedToLesson.forEach(function (item) {\n            item.state = toPublish ? 'published' : 'draft';\n        });\n    } else {\n        this.state = toPublish ? 'published' : 'draft';\n    }\n};\n\nPedagogicItem.prototype.isPublished = function () {\n    return this.state === 'published';\n};\n\nPedagogicItem.prototype.descriptionMaxSize = 140;\n\nPedagogicItem.prototype.getPreviewDescription = function () {\n\n    if (this.description) {\n        if (this.description.length >= this.descriptionMaxSize) {\n            this.preview_description = '<p class=\"itemPreview\">' + $('<div>' + this.description + '</div>').text().substring(0, this.descriptionMaxSize) + '...</p>';\n        } else {\n            this.preview_description = this.description;\n        }\n    } else {\n        this.preview_description = this.description;\n    }\n};\n\nPedagogicItem.prototype.isPublishable = function (toPublish) {\n    return this.id && this.state == (toPublish ? 'draft' : 'published') && (this.lesson_id == null || this.lesson_id == this.id); // id test to detect free homeworks\n};\n\nPedagogicItem.prototype.delete = function (cb, cbe) {\n\n    var url = this.type_item == \"lesson\" ? '/diary/lesson/' : '/diary/homework/';\n    var idToDelete = this.id;\n    http().delete(url + idToDelete, this).done(function (b) {\n\n        model.deletePedagogicItemReferences(idToDelete);\n\n        if (typeof cb === 'function') {\n            cb();\n        }\n    }).error(function (e) {\n        if (typeof cbe === 'function') {\n            cbe(model.parseError(e));\n        }\n    });\n};\n\nPedagogicItem.prototype.deleteList = function (items, cb, cbe) {\n\n    // split into two arrays of PedagogicItem, one for the lessons, one for the homeworks\n    var itemsByType = []; // array of array(s)\n\n    if (items.length == 1) {\n        itemsByType.push(items);\n    } else {\n        itemsByType = _.partition(items, function (item) {\n            return item.type_item === 'lesson';\n        });\n    }\n\n    var countdown = 0;\n\n    if (itemsByType.length > 0) {\n        countdown = itemsByType.length;\n\n        itemsByType.forEach(function (arrayForTypeItem) {\n            if (arrayForTypeItem.length > 0) {\n                model.deleteItemList(arrayForTypeItem, arrayForTypeItem[0].type_item, function () {\n                    countdown--;\n                    if (countdown == 0) {\n                        if (typeof cb === 'function') {\n                            cb();\n                        }\n                    }\n                }, cbe);\n            } else {\n                countdown--;\n            }\n        });\n    }\n};\n\nPedagogicItem.prototype.isFiltered = function () {\n    if (model.searchForm.selectedSubject != null) {\n        return !(this.subject === model.searchForm.selectedSubject);\n    }\n    return false;\n};\n","\"use strict\";\n\nfunction SearchForm(isQuickSearch) {\n    this.startDate = {};\n    this.endDate = {};\n    this.publishState = {};\n    this.returnType = {};\n    this.displayLesson = {};\n    this.displayHomework = {};\n    this.audienceId = {};\n    this.subjects = [];\n    this.selectedSubject = null;\n    this.subjectsFilters = [];\n    /**\r\n     * If true search result will be stored in model.quickSearchPedagogicDays instead of model.pedagogicDays\r\n     * @type {boolean}\r\n     */\n    this.isQuickSearch = isQuickSearch;\n    /**\r\n     * Custom pedagogic days array.\r\n     * Avoid conflicting with model.pedagogicDays)\r\n     * @type {Array}\r\n     */\n    this.customPedagogicDaysArray;\n};\n\nSearchForm.prototype.initForTeacher = function () {\n    this.publishState = \"\";\n    this.returnType = \"both\";\n    var period = moment(model.calendar.dayForWeek).day(1);\n    this.startDate = period.format(DATE_FORMAT);\n    this.endDate = period.add(15, 'days').format(DATE_FORMAT);\n    this.displayLesson = true;\n    this.displayHomework = true;\n    this.audienceId = \"\";\n};\n\nSearchForm.prototype.initForStudent = function () {\n    this.publishState = \"published\";\n    this.returnType = \"both\";\n    var period = moment(model.calendar.dayForWeek).day(1);\n    this.startDate = period.format(DATE_FORMAT);\n    this.endDate = period.add(15, 'days').format(DATE_FORMAT);\n    this.displayLesson = false;\n    this.displayHomework = true;\n};\n\nSearchForm.prototype.getSearch = function () {\n\n    var params = {};\n    params.startDate = this.startDate;\n    params.endDate = this.endDate;\n    params.publishState = this.publishState;\n    params.returnType = this.returnType;\n\n    if (model.isUserParent()) {\n        params.audienceId = model.child.classId;\n    }\n    return params;\n};\n","'use strict';\n\nfunction Subject() {}\n\n/**\r\n * Saves the subject to databases.\r\n * It's auto-created if it does not exists in database\r\n * @param cb\r\n * @param cbe\r\n */\nSubject.prototype.save = function (cb, cbe) {\n    if (this.id) {\n        // not implemented yet at this stage/ not needed\n    } else {\n        this.create(cb, cbe);\n    }\n};\n\n/**\r\n * Creates a subject\r\n * @param cb Callback function\r\n * @param cbe Callback on error function\r\n */\nSubject.prototype.create = function (cb, cbe) {\n    var subject = this;\n    http().postJson('/diary/subject', this).done(function (b) {\n        subject.updateData(b);\n        model.subjects.all.push(subject);\n        if (typeof cb === 'function') {\n            cb();\n        }\n    }).error(function (e) {\n        if (typeof cbe === 'function') {\n            cbe(model.parseError(e));\n        }\n    });\n};\n\nSubject.prototype.toJSON = function () {\n\n    return {\n        id: this.id,\n        school_id: this.school_id,\n        subject_label: this.label,\n        teacher_id: this.teacher_id,\n        original_subject_id: this.originalsubjectid\n    };\n};\n","'use strict';\n\nfunction Teacher() {}\n\nTeacher.prototype.create = function (cb, cbe) {\n\n    model.me.structures.forEach(function (structureId) {\n        http().postJson('/diary/teacher/' + structureId).done(function (e) {\n\n            if (typeof cb === 'function') {\n                cb();\n            }\n        }).error(function (e) {\n            if (typeof cbe === 'function') {\n                cbe(model.parseError(e));\n            }\n        });\n    });\n};\n","'use strict';\n\n(function () {\n    'use strict';\n\n    AngularExtensions.addModuleConfig(function (module) {\n        //controller declaration\n        module.controller(\"ProgressionManagerController\", controller);\n\n        function controller($scope, $rootScope, ProgressionService, $timeout, $routeParams) {\n            var vm = this;\n            function init() {\n                vm.loadProgressions();\n            }\n            $timeout(init);\n\n            vm.edit = function () {\n                vm.originalProgressionItem = angular.copy(vm.selectedProgressionItem);\n                vm.selectedProgressionItem.edit = true;\n            };\n\n            vm.hasProgressItem = function () {\n                return vm.selectedProgressionItem === undefined;\n            };\n            vm.cancel = function () {\n                if (vm.selectedProgressionItem.id) {\n                    vm.selectedProgressionItem.title = vm.originalProgressionItem.title;\n                    vm.selectedProgressionItem.level = vm.originalProgressionItem.level;\n                    vm.selectedProgressionItem.description = vm.originalProgressionItem.description;\n                    vm.originalProgressionItem = null;\n                    vm.selectedProgressionItem.edit = false;\n                } else {\n                    vm.selectedProgressionItem = undefined;\n                }\n            };\n            vm.setNewProgression = function () {\n                vm.selectedProgressionItem = {\n                    edit: true\n                };\n            };\n\n            vm.selectProgression = function (progressionItem) {\n                $rootScope.redirect('/progressionManagerView/' + progressionItem.id);\n                vm.selectedProgressionItem = progressionItem;\n                progressionItem.edit = false;\n                vm.loadLessonsFromProgression(vm.selectedProgressionItem);\n            };\n\n            vm.addNewLesson = function () {\n                $rootScope.redirect('/progressionEditLesson/' + vm.selectedProgressionItem.id + '/new');\n            };\n\n            vm.editLesson = function (id) {\n                $rootScope.redirect('/progressionEditLesson/' + vm.selectedProgressionItem.id + '/' + id);\n            };\n\n            vm.loadProgressions = function () {\n                ProgressionService.getProgressions().then(function (progressions) {\n                    vm.progressionItems = progressions;\n                    if ($routeParams.selectedProgressionId !== 'none') {\n                        var progressionToLoad = _.findWhere(vm.progressionItems, { id: parseInt($routeParams.selectedProgressionId) });\n                        if (progressionToLoad) {\n                            vm.selectProgression(progressionToLoad);\n                        }\n                    }\n                });\n            };\n\n            vm.loadLessonsFromProgression = function (progression) {\n                progression.lessonItems = null;\n                ProgressionService.getLessonsProgression(progression.id).then(function (lessons) {\n                    progression.lessonItems = lessons;\n                });\n            };\n\n            vm.saveLesson = function (lesson) {\n                ProgressionService.saveLessonProgression(lesson).then(function (newLesson) {\n                    lesson.id = newLesson.id;\n                    notify.info(lang.translate('progression.content.saved'));\n                });\n            };\n\n            vm.selectedContent = function () {\n                return _.filter(vm.selectedProgressionItem.lessonItems, { 'selected': true });\n            };\n\n            vm.saveProgression = function (progression) {\n                ProgressionService.saveProgression(progression).then(function (newProgression) {\n                    if (!progression.id) {\n                        vm.progressionItems.push(newProgression);\n                    } else {\n                        var oldProgressionItems = _.findWhere(vm.progressionItems, { 'id': newProgression.id });\n                        if (oldProgressionItems) {\n                            vm.progressionItems[vm.progressionItems.indexOf(oldProgressionItems)] = newProgression;\n                        }\n                    }\n                    vm.selectedProgressionItem = newProgression;\n                    notify.info(lang.translate('progression.progression.saved'));\n                });\n            };\n\n            vm.saveOrder = function (progression) {\n                ProgressionService.saveLessonOrder(progression);\n            };\n\n            vm.removeSelectedContent = function () {\n                ProgressionService.deleteLessons(vm.selectedContent()).then(function () {\n                    vm.loadLessonsFromProgression(vm.selectedProgressionItem);\n                    notify.info(lang.translate('progression.content.deleted'));\n                });\n            };\n\n            vm.removeProgression = function () {\n                ProgressionService.deleteProgression(vm.selectedProgressionItem.id).then(function () {\n                    vm.selectedProgressionItem = undefined;\n                    notify.info(lang.translate('progression.progression.deleted'));\n                    vm.loadProgressions();\n                });\n            };\n\n            vm.editSelectedContent = function () {\n                vm.editLesson(vm.selectedContent()[0].id);\n            };\n        }\n    });\n})();\n","'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n(function () {\n    'use strict';\n\n    /*\r\n    * Progression service as class\r\n    * used to manipulate Progression model\r\n    */\n\n    var ProgressionService = function () {\n        function ProgressionService($http, $q, constants, $sce) {\n            _classCallCheck(this, ProgressionService);\n\n            this.$http = $http;\n            this.$q = $q;\n            this.constants = constants;\n            this.$sce = $sce;\n            console.log(this.$sce);\n        }\n\n        _createClass(ProgressionService, [{\n            key: 'getProgressions',\n            value: function getProgressions() {\n                var _this = this;\n\n                var url = '/diary/progression';\n                return this.$http.get(url).then(function (result) {\n                    var progressions = result.data;\n                    _.each(progressions, function (progression) {\n                        progression.lessons = _.map(progression.lessons, _this.mapApiToLesson);\n                    });\n                    return progressions;\n                });\n            }\n        }, {\n            key: 'saveProgression',\n            value: function saveProgression(progression) {\n                var progressionLight = angular.copy(progression);\n                delete progressionLight.lessonItems;\n                delete progressionLight.nbLessons;\n                var url = '/diary/progression';\n                return this.$http({\n                    url: url,\n                    method: 'POST',\n                    data: progressionLight\n                }).then(function (result) {\n                    return result.data;\n                });\n            }\n        }, {\n            key: 'deleteProgression',\n            value: function deleteProgression(progressionId) {\n                var url = '/diary/progression/' + progressionId;\n\n                return this.$http({\n                    url: url,\n                    method: 'DELETE'\n                }).then(function (result) {\n                    return result.data;\n                });\n            }\n        }, {\n            key: 'deleteLessons',\n            value: function deleteLessons(lessons) {\n\n                var lessonsIds = _.map(lessons, function (lesson) {\n                    return lesson.id;\n                });\n\n                var url = '/diary/progression/lessons';\n\n                return this.$http({\n                    url: url,\n                    method: 'DELETE',\n                    data: lessonsIds\n                }).then(function (result) {\n                    return result.data;\n                });\n            }\n        }, {\n            key: 'saveLessonProgression',\n            value: function saveLessonProgression(lesson) {\n                var url = '/diary/progression/lesson';\n\n                return this.$http({\n                    url: url,\n                    method: 'POST',\n                    data: this.mapLessonToApi(lesson)\n                }).then(function (result) {\n                    return result.data;\n                });\n            }\n        }, {\n            key: 'getLessonsProgression',\n            value: function getLessonsProgression(progressionId) {\n                var _this2 = this;\n\n                var url = '/diary/progression/' + progressionId + '/lessons';\n\n                return this.$http.get(url).then(function (result) {\n                    return _.map(result.data, function (lesson) {\n                        return _this2.mapApiToLesson(lesson);\n                    });\n                });\n            }\n        }, {\n            key: 'getLessonProgression',\n            value: function getLessonProgression(lessonId) {\n                var _this3 = this;\n\n                var url = '/diary/progression/lesson/' + lessonId;\n\n                return this.$http.get(url).then(function (result) {\n                    return _this3.mapApiToLesson(result.data);\n                });\n            }\n        }, {\n            key: 'saveLessonOrder',\n            value: function saveLessonOrder(progression) {\n                var url = '/diary/progression/order';\n\n                return this.$http({\n                    url: url,\n                    method: 'POST',\n                    data: this.extractOrderInformations(progression)\n                });\n            }\n        }, {\n            key: 'mapApiToLesson',\n            value: function mapApiToLesson(apiLesson) {\n                var _this4 = this;\n\n                var lesson = apiLesson; //angular.copy(apiLesson);\n                lesson.subject = JSON.parse(lesson.subject);\n                lesson.type_item = 'progression';\n                if (lesson.description) {\n                    lesson.descriptionTrusted = this.$sce.trustAsHtml(lesson.description);\n                }\n\n                lesson.homeworks = JSON.parse(lesson.homeworks);\n                _.each(lesson.homeworks, function (homework) {\n                    if (homework.description) {\n                        homework.descriptionTrusted = _this4.$sce.trustAsHtml(homework.description);\n                    }\n                });\n\n                var homeworks = new Collection();\n                homeworks.all = lesson.homeworks;\n                lesson.homeworks = homeworks;\n                return lesson;\n            }\n        }, {\n            key: 'mapHomeworkToApi',\n            value: function mapHomeworkToApi(homework) {\n                return JSON.stringify(homework.data);\n            }\n        }, {\n            key: 'mapAttachementsToApi',\n            value: function mapAttachementsToApi(attachment) {\n                return attachment;\n            }\n        }, {\n            key: 'mapLessonToApi',\n            value: function mapLessonToApi(lesson) {\n\n                var result = {\n                    id: lesson.id,\n                    title: lesson.title,\n                    description: lesson.description,\n                    subjectLabel: lesson.subject.subject_label,\n                    color: lesson.color,\n                    annotations: lesson.annotations,\n                    orderIndex: lesson.orderIndex,\n                    subject: lesson.subject,\n                    progressionId: lesson.progressionId,\n                    homeworks: lesson.homeworks && lesson.homeworks.all ? _.map(lesson.homeworks.all, this.mapHomeworkToApi) : []\n                };\n\n                if (lesson.homeworks) {\n                    result.homeworks = JSON.stringify(_.map(lesson.homeworks.all, this.mapObject));\n                }\n\n                result.subject = JSON.stringify(result.subject.data);\n                return result;\n            }\n        }, {\n            key: 'mapObject',\n            value: function mapObject(obj) {\n                obj.toJSON = undefined;\n                return obj;\n            }\n        }, {\n            key: 'extractOrderInformations',\n            value: function extractOrderInformations(progression) {\n                var lessonsOrder = [];\n                _.each(progression.lessonItems, function (lesson) {\n                    lessonsOrder.push({\n                        id: lesson.id,\n                        orderIndex: lesson.orderIndex\n                    });\n                });\n                return lessonsOrder;\n            }\n        }]);\n\n        return ProgressionService;\n    }();\n\n    AngularExtensions.addModuleConfig(function (module) {\n        module.service(\"ProgressionService\", ProgressionService);\n    });\n})();\n","'use strict';\n\n(function () {\n    'use strict';\n\n    AngularExtensions.addModuleConfig(function (module) {\n        //controller declaration\n        module.controller(\"ProgressionRightPanelController\", controller);\n\n        function controller($scope, $location, ProgressionService) {\n            var vm = this;\n\n            init();\n\n            function init() {\n                ProgressionService.getProgressions().then(function (progressions) {\n                    vm.progressionItems = progressions;\n                });\n            }\n\n            vm.selectProgression = function (progression) {\n                vm.selected = 'detail';\n                vm.progressionSelected = progression;\n                vm.filterLesson = undefined;\n                progression.lessonItems = null;\n                ProgressionService.getLessonsProgression(progression.id).then(function (lessons) {\n                    progression.lessonItems = lessons;\n                });\n            };\n\n            $scope.redirect = function (path) {\n                $location.path(path);\n            };\n\n            vm.dragCondition = function (item) {\n                return true;\n            };\n\n            vm.dropCondition = function (targetItem) {\n                return false;\n            };\n\n            vm.drag = function (item, $originalEvent) {\n                try {\n                    $originalEvent.dataTransfer.setData('application/json', JSON.stringify(item));\n                } catch (e) {\n                    $originalEvent.dataTransfer.setData('Text', JSON.stringify(item));\n                }\n            };\n        }\n    });\n})();\n","'use strict';\n\n(function () {\n    'use strict';\n\n    AngularExtensions.addModuleConfig(function (module) {\n        //controller declaration\n        module.controller(\"RightPanelController\", controller);\n\n        function controller($scope, $rootScope, ProgressionService) {\n            var id = Date.now();\n            var vm = this;\n            $scope.panelVisible = false;\n\n            $scope.toggle = function () {\n                if (!$scope.panelVisible) {\n                    $scope.$parent.$$childTail.panelVisible = false;\n                    $scope.$parent.$$childHead.panelVisible = false;\n                    $rootScope.$broadcast('rightpanel.open', id);\n                }\n                $scope.panelVisible = !$scope.panelVisible;\n\n                if ($scope.panelVisible) {\n                    $('#mainDiaryContainer').width('84%');\n                    $('.quick-search').width('16%');\n                } else {\n                    $('#mainDiaryContainer').width('97%');\n                    $('.quick-search').width('2%');\n                }\n            };\n\n            $scope.$on('rightpanel.open', function (_, rightpanelid) {\n                if (id !== rightpanelid && $scope.panelVisible) {\n                    $scope.toggle();\n                }\n            });\n        }\n    });\n})();\n","'use strict';\n\n(function () {\n  'use strict';\n\n  AngularExtensions.addModuleConfig(function (module) {\n    /**\r\n         * Directive to perform a quick search among lessons and homeworks\r\n         */\n    module.directive('rightPanel', function () {\n      return {\n        restrict: \"E\",\n        templateUrl: \"/diary/public/js/progression/right-panel/right-panel.html\",\n        scope: {\n          label: '@',\n          contentUrl: '='\n        },\n        controller: 'RightPanelController'\n      };\n    });\n  });\n})();\n","'use strict';\n\n(function () {\n    'use strict';\n\n    AngularExtensions.addModuleConfig(function (module) {\n\n        module.config(function ($routeProvider) {\n            $routeProvider\n            // manage visa\n            .when('/manageVisaView/:teacherId', {\n                action: 'manageVisaView'\n            })\n            // go to create new lesson view\n            .when('/progressionManagerView/:selectedProgressionId', {\n                action: 'progressionManagerView'\n            }).when('/progressionEditLesson/:progressionId/:editProgressionLessonId', {\n                action: 'editLessonView'\n            })\n            // go to create new lesson view\n            .when('/createLessonView/:timeFromCalendar', {\n                action: 'createLessonView'\n            })\n            // go to create/update homework view\n            .when('/createHomeworkView', {\n                action: 'createHomeworkView'\n            }).when('/editLessonView/:idLesson', {\n                action: 'editLessonView'\n            })\n            // opens lesson and set default tab view to homeworks one\n            .when('/editLessonView/:idLesson/:idHomework', {\n                action: 'editLessonView'\n            }).when('/editHomeworkView/:idHomework', {\n                action: 'editHomeworkView'\n            }).when('/editHomeworkView/:idHomework/:idLesson', {\n                action: 'editHomeworkView'\n            }).when('/calendarView/:mondayOfWeek', {\n                action: 'calendarView'\n            }).when('/listView', {\n                action: 'listView'\n            }).when('/mainView', {\n                action: 'mainView'\n            })\n            // default view\n            .otherwise({\n                action: 'calendarView'\n            });\n        });\n    });\n})();\n","\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n(function () {\n    'use strict';\n\n    /*\r\n     * Attachement service as class\r\n     * used to manipulate Attachement model\r\n     */\n\n    var AttachementService = function () {\n        function AttachementService($http, $q, constants, UtilsService) {\n            _classCallCheck(this, AttachementService);\n\n            this.$http = $http;\n            this.$q = $q;\n            this.constants = constants;\n            this.UtilsService = UtilsService;\n        }\n\n        /*\r\n        *   Mapp homeworks\r\n        */\n\n\n        _createClass(AttachementService, [{\n            key: \"mappAttachement\",\n            value: function mappAttachement(attachements) {\n                return _.map(attachements, function (attachementData) {\n                    var att = new Attachment();\n                    att.id = attachementData.id;\n                    att.user_id = attachementData.user_id;\n                    att.creation_date = attachementData.creation_date;\n                    att.document_id = attachementData.document_id;\n                    att.document_label = attachementData.document_label;\n\n                    return att;\n                });\n            }\n        }]);\n\n        return AttachementService;\n    }();\n    /* create singleton */\n\n\n    AngularExtensions.addModuleConfig(function (module) {\n        module.service(\"AttachementService\", AttachementService);\n    });\n})();\n","'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n(function () {\n    'use strict';\n\n    /*\r\n    * Audience service as class\r\n    * used to manipulate Audience model\r\n    */\n\n    var AudienceService = function () {\n        function AudienceService($http, $q, constants) {\n            _classCallCheck(this, AudienceService);\n\n            this.$http = $http;\n            this.$q = $q;\n            this.constants = constants;\n            this.context = {\n                processesPromise: []\n            };\n        }\n\n        /*\r\n        * get a map indexed by label\r\n        */\n\n\n        _createClass(AudienceService, [{\n            key: 'getAudiencesAsMap',\n            value: function getAudiencesAsMap(structureIdArray) {\n                return this.getAudiences(structureIdArray).then(function (classes) {\n                    var result = {};\n                    _.each(classes, function (classe) {\n                        result[classe.name] = classe;\n                    });\n                    return result;\n                });\n            }\n\n            /*\r\n            * get classes for all structureIds\r\n            */\n\n        }, {\n            key: 'getAudiences',\n            value: function getAudiences(structureIdArray) {\n                var _this = this;\n\n                //cache the promises, this datas will not change in a uniq session\n                var processes = [];\n                _.each(structureIdArray, function (structureId) {\n\n                    if (!_this.context.processesPromise[structureId]) {\n                        _this.context.processesPromise[structureId] = [];\n                        var url = '/userbook/structure/' + structureId;\n                        _this.context.processesPromise[structureId] = _this.$http.get(url).then(function (result) {\n                            return {\n                                structureId: structureId,\n                                structureData: result.data\n                            };\n                        });\n                    }\n                    processes.push(_this.context.processesPromise[structureId]);\n                });\n\n                //execute promises\n                return this.$q.all(processes).then(function (results) {\n                    var result = [];\n                    _.each(results, function (datas) {\n                        var structureId = datas.structureId;\n                        var structureData = datas.structureData;\n                        result = result.concat(_this.mapAudiences(structureData.classes, structureId));\n                    });\n                    return result;\n                });\n            }\n\n            /*\r\n            *   map an Audience\r\n            */\n\n        }, {\n            key: 'mapAudiences',\n            value: function mapAudiences(classes, structureId) {\n                return _.map(classes, function (audience) {\n                    audience.structureId = structureId;\n                    audience.type = 'class';\n                    audience.typeLabel = lang.translate('diary.audience.class');\n                    return audience;\n                });\n            }\n        }]);\n\n        return AudienceService;\n    }();\n\n    AngularExtensions.addModuleConfig(function (module) {\n        module.service(\"AudienceService\", AudienceService);\n    });\n})();\n","'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n(function () {\n    'use strict';\n\n    /*\r\n    * Course service as class\r\n    * used to manipulate Course model\r\n    */\n\n    var CourseService = function () {\n        function CourseService($http, $q, constants, SubjectService) {\n            _classCallCheck(this, CourseService);\n\n            this.$http = $http;\n            this.$q = $q;\n            this.constants = constants;\n            this.context = {};\n            this.SubjectService = SubjectService;\n        }\n\n        _createClass(CourseService, [{\n            key: 'getMergeCourses',\n            value: function getMergeCourses(structureId, teacherId, firstDayOfWeek) {\n                var _this = this;\n\n                return this.$q.all([this.getScheduleCourses(structureId, teacherId, firstDayOfWeek), this.SubjectService.getStructureSubjectsAsMap(structureId)]).then(function (results) {\n                    var courses = results[0];\n                    var subjects = results[1];\n                    return _this.mappingCourses(courses, subjects);\n                });\n            }\n        }, {\n            key: 'mappCourse',\n            value: function mappCourse(course) {\n                course.date = moment(course.startDate);\n                course.date.week(model.calendar.week);\n                //course.beginning = moment(course.startDate);\n                //course.end = moment(course.endDate);\n                course.startMoment = moment(course.startDate);\n                course.endMoment = moment(course.endDate);\n\n                course.startTime = moment(course.startDate).format('HH:mm:ss');\n                course.endTime = moment(course.endDate).format('HH:mm:ss');\n                course.calendarType = \"shadow\";\n                course.locked = true;\n                course.is_periodic = false;\n                course.notShowOnCollision = true;\n            }\n        }, {\n            key: 'mappingCourses',\n            value: function mappingCourses(courses, subjects) {\n                var _this2 = this;\n\n                _.each(courses, function (course) {\n                    course.subject = subjects[course.subjectId];\n                    _this2.mappCourse(course);\n                });\n                return courses;\n            }\n        }, {\n            key: 'getScheduleCourses',\n            value: function getScheduleCourses(structureId, teacherId, firstDayOfWeek) {\n                var begin = moment(firstDayOfWeek);\n                var end = moment(firstDayOfWeek).add(6, 'd');\n\n                var url = '/directory/timetable/courses/teacher/' + structureId;\n                var config = {\n                    params: {\n                        begin: begin.format(this.constants.CAL_DATE_PATTERN),\n                        end: end.format(this.constants.CAL_DATE_PATTERN),\n                        teacherId: teacherId\n                    }\n                };\n                return this.$http.get(url, config).then(function (result) {\n                    return result.data;\n                });\n            }\n        }]);\n\n        return CourseService;\n    }();\n\n    AngularExtensions.addModuleConfig(function (module) {\n        module.service(\"CourseService\", CourseService);\n    });\n})();\n","'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n(function () {\n    'use strict';\n\n    /*\r\n    * Homework service as class\r\n    * used to manipulate Homework model\r\n    */\n\n    var HomeworkService = function () {\n        function HomeworkService($http, $q, constants) {\n            _classCallCheck(this, HomeworkService);\n\n            this.$http = $http;\n            this.$q = $q;\n            this.constants = constants;\n        }\n\n        /*\r\n        * get homeworks\r\n        */\n\n\n        _createClass(HomeworkService, [{\n            key: 'getHomeworks',\n            value: function getHomeworks(userStructuresIds, mondayOfWeek, isUserParent, childId) {\n                var _this = this;\n\n                var start = moment(mondayOfWeek).day(1).format(this.constants.CAL_DATE_PATTERN);\n                var end = moment(mondayOfWeek).day(1).add(1, 'week').format(this.constants.CAL_DATE_PATTERN);\n\n                var urlGetHomeworks = '/diary/homework/' + userStructuresIds + '/' + start + '/' + end + '/';\n\n                if (isUserParent && childId) {\n                    urlGetHomeworks += childId;\n                } else {\n                    urlGetHomeworks += '%20';\n                }\n\n                return this.$http.get(urlGetHomeworks).then(function (result) {\n                    return _this.mappHomework(result.data);\n                });\n            }\n\n            /*\r\n            *   Mapp homeworks\r\n            */\n\n        }, {\n            key: 'mappHomework',\n            value: function mappHomework(homeworks) {\n                return _.map(homeworks, function (sqlHomework) {\n                    var homework = {\n                        //for share directive you must have _id\n                        _id: sqlHomework.id,\n                        id: sqlHomework.id,\n                        description: sqlHomework.homework_description,\n                        audienceId: sqlHomework.audience_id,\n                        audience: model.audiences.findWhere({ id: sqlHomework.audience_id }),\n                        subject: model.subjects.findWhere({ id: sqlHomework.subject_id }),\n                        subjectId: sqlHomework.subject_id,\n                        subjectLabel: sqlHomework.subject_label,\n                        type: model.homeworkTypes.findWhere({ id: sqlHomework.homework_type_id }),\n                        typeId: sqlHomework.homework_type_id,\n                        typeLabel: sqlHomework.homework_type_label,\n                        teacherId: sqlHomework.teacher_id,\n                        structureId: sqlHomework.structureId,\n                        audienceType: sqlHomework.audience_type,\n                        audienceLabel: sqlHomework.audience_label,\n                        // TODO delete dueDate? (seems redondant info vs date field)\n                        dueDate: moment(sqlHomework.homework_due_date),\n                        date: moment(sqlHomework.homework_due_date),\n                        title: sqlHomework.homework_title,\n                        color: sqlHomework.homework_color,\n                        startMoment: moment(sqlHomework.homework_due_date),\n                        endMoment: moment(sqlHomework.homework_due_date),\n                        state: sqlHomework.homework_state,\n                        is_periodic: false,\n                        lesson_id: sqlHomework.lesson_id\n                    };\n\n                    if (sqlHomework.attachments) {\n                        homework.attachments = _.map(JSON.parse(sqlHomework.attachments), jsonToJsAttachment);\n                    }\n\n                    if ('group' === homework.audienceType) {\n                        homework.audienceTypeLabel = lang.translate('diary.audience.group');\n                    } else {\n                        homework.audienceTypeLabel = lang.translate('diary.audience.class');\n                    }\n\n                    return homework;\n                });\n            }\n        }]);\n\n        return HomeworkService;\n    }();\n\n    AngularExtensions.addModuleConfig(function (module) {\n        module.service(\"HomeworkService\", HomeworkService);\n    });\n})();\n","'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n(function () {\n    'use strict';\n\n    /*\r\n     * Lesson service as class\r\n     * used to manipulate Lesson model\r\n     */\n\n    var LessonService = function () {\n        function LessonService($http, $q, constants, UtilsService, AttachementService) {\n            _classCallCheck(this, LessonService);\n\n            this.$http = $http;\n            this.$q = $q;\n            this.constants = constants;\n            this.UtilsService = UtilsService;\n            this.AttachementService = AttachementService;\n        }\n\n        _createClass(LessonService, [{\n            key: 'getLessons',\n            value: function getLessons(userStructuresIds, mondayOfWeek, isUserParent, childId) {\n                var _this = this;\n\n                var start = moment(mondayOfWeek).day(1).format(this.constants.CAL_DATE_PATTERN);\n                var end = moment(mondayOfWeek).day(1).add(1, 'week').format(this.constants.CAL_DATE_PATTERN);\n\n                var urlGetHomeworks = '/diary/lesson/' + userStructuresIds + '/' + start + '/' + end + '/';\n\n                if (isUserParent && childId) {\n                    urlGetHomeworks += childId;\n                } else {\n                    urlGetHomeworks += '%20';\n                }\n\n                return this.$http.get(urlGetHomeworks).then(function (result) {\n                    return _this.mappLessons(result.data);\n                });\n            }\n\n            /*\r\n            *   Map lesson\r\n            */\n\n        }, {\n            key: 'mappLessons',\n            value: function mappLessons(lessons) {\n                var _this2 = this;\n\n                return _.map(lessons, function (lessonData) {\n                    return _this2.mapLesson(lessonData);\n                });\n            }\n\n            /*\r\n            *  Map one lesson\r\n            */\n\n        }, {\n            key: 'mapLesson',\n            value: function mapLesson(lessonData) {\n                var lessonHomeworks = [];\n\n                // only initialize homeworks attached to lesson\n                // with only id\n                if (lessonData.homework_ids) {\n                    for (var i = 0; i < lessonData.homework_ids.length; i++) {\n                        var homework = new Homework();\n                        homework.id = lessonData.homework_ids[i];\n                        homework.lesson_id = parseInt(lessonData.lesson_id);\n                        homework.loaded = false; // means full lessonData from sql not loaded\n                        lessonHomeworks.push(homework);\n                    }\n                }\n\n                var lesson = {\n                    //for share directive you must have _id\n                    _id: lessonData.lesson_id,\n                    id: lessonData.lesson_id,\n                    title: lessonData.lesson_title,\n                    audience: model.audiences.findWhere({ id: lessonData.audience_id }),\n                    audienceId: lessonData.audience_id,\n                    audienceLabel: lessonData.audience_label,\n                    audienceType: lessonData.audience_type,\n                    description: lessonData.lesson_description,\n                    subject: model.subjects.findWhere({ id: lessonData.subject_id }),\n                    subjectId: lessonData.subject_id,\n                    subjectLabel: lessonData.subject_label,\n                    teacherId: lessonData.teacher_display_name,\n                    structureId: lessonData.school_id,\n                    date: moment(lessonData.lesson_date),\n                    startTime: lessonData.lesson_start_time,\n                    endTime: lessonData.lesson_end_time,\n                    color: lessonData.lesson_color,\n                    room: lessonData.lesson_room,\n                    annotations: lessonData.lesson_annotation,\n                    startMoment: moment(lessonData.lesson_date.split(' ')[0] + ' ' + lessonData.lesson_start_time),\n                    endMoment: moment(lessonData.lesson_date.split(' ')[0] + ' ' + lessonData.lesson_end_time),\n                    state: lessonData.lesson_state,\n                    is_periodic: false,\n                    homeworks: lessonHomeworks,\n                    tooltipText: '',\n                    locked: !model.canEdit() ? true : false\n                };\n                lesson.subject = new Subject();\n                lesson.subject.label = lessonData.subject_label;\n                lesson.subject.id = lessonData.subject_id;\n                lesson.subject.teacher_id = lessonData.teacher_display_name;\n\n                if ('group' === lesson.audienceType) {\n                    lesson.audienceTypeLabel = lang.translate('diary.audience.group');\n                } else {\n                    lesson.audienceTypeLabel = lang.translate('diary.audience.class');\n                }\n\n                if (lessonData.attachments) {\n                    lesson.attachments = AttachementService.mappAttachement(JSON.parse(lessonData.attachments));\n                }\n\n                var tooltip = this.UtilsService.getResponsiveLessonTooltipText(lesson);\n\n                lesson.tooltipText = tooltip;\n                return lesson;\n            }\n        }]);\n\n        return LessonService;\n    }();\n    /* create singleton */\n\n\n    AngularExtensions.addModuleConfig(function (module) {\n        module.service(\"LessonService\", LessonService);\n    });\n})();\n","\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n(function () {\n    'use strict';\n\n    var ModelWeekService = function () {\n        function ModelWeekService($http, $q, constants, CourseService) {\n            _classCallCheck(this, ModelWeekService);\n\n            this.$http = $http;\n            this.$q = $q;\n            this.constants = constants;\n            this.CourseService = CourseService;\n        }\n\n        _createClass(ModelWeekService, [{\n            key: \"setModelWeek\",\n            value: function setModelWeek(alias, date) {\n                var dateParam = moment(date).format(this.constants.CAL_DATE_PATTERN);\n                var url = \"/diary/modelweek/\" + alias + \"/\" + dateParam;\n                return this.$http.post(url);\n            }\n        }, {\n            key: \"getModelWeeks\",\n            value: function getModelWeeks() {\n                var url = \"/diary/modelweek/list\";\n                return this.$http.get(url).then(function (result) {\n                    var modelWeeks = result.data;\n                    _.each(modelWeeks, function (modelWeek) {\n                        modelWeek.startDate = moment(modelWeek.startDate).toDate();\n                        modelWeek.endDate = moment(modelWeek.endDate).toDate();\n                    });\n\n                    var transformedResult = {\n                        \"A\": _.findWhere(modelWeeks, { \"weekAlias\": \"A\" }),\n                        \"B\": _.findWhere(modelWeeks, { \"weekAlias\": \"B\" })\n                    };\n                    return transformedResult;\n                });\n            }\n        }, {\n            key: \"invertModelsWeek\",\n            value: function invertModelsWeek() {\n                var url = \"/diary/modelweek/invert\";\n                return this.$http.post(url).then(function (result) {\n                    return result.data;\n                });\n            }\n        }, {\n            key: \"getCoursesModel\",\n            value: function getCoursesModel(date) {\n                var _this = this;\n\n                var dateParam = moment(date).format(this.constants.CAL_DATE_PATTERN);\n                var url = \"/diary/modelweek/items/\" + dateParam;\n\n                return this.$http.get(url).then(function (result) {\n                    var courses = result.data;\n                    if (!courses) {\n                        courses = [];\n                    }\n                    _this.mappModelWeekToCourse(courses);\n                    return courses;\n                });\n            }\n        }, {\n            key: \"mappModelWeekToCourse\",\n            value: function mappModelWeekToCourse(courses) {\n                var _this2 = this;\n\n                _.each(courses, function (course) {\n                    course.startDate = moment(course.startDate);\n                    course.endDate = moment(course.endDate);\n                    _this2.CourseService.mappCourse(course);\n                    course.subject = model.subjects.findWhere({ id: course.subjectId });\n                    course.subject.subjectLabel = course.subjectLabel;\n                    course.subjectId = course.subjectId;\n                });\n\n                return courses;\n            }\n        }]);\n\n        return ModelWeekService;\n    }();\n\n    AngularExtensions.addModuleConfig(function (module) {\n        module.service(\"ModelWeekService\", ModelWeekService);\n    });\n})();\n","'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n(function () {\n    'use strict';\n\n    var PedagogicItemService = function () {\n        function PedagogicItemService($http, $q, constants, UtilsService) {\n            _classCallCheck(this, PedagogicItemService);\n\n            this.$http = $http;\n            this.$q = $q;\n            this.constants = constants;\n            this.UtilsService = UtilsService;\n        }\n\n        _createClass(PedagogicItemService, [{\n            key: 'getPedagogicItems',\n            value: function getPedagogicItems(params) {\n                var _this = this;\n\n                var options = {\n                    method: 'POST',\n                    url: '/diary/pedagogicItems/list',\n                    data: params\n                };\n\n                return this.$http(options).then(function (result) {\n                    return _.map(result.data, _this.mapPedagogicItem);\n                });\n            }\n        }, {\n            key: 'mapPedagogicItem',\n            value: function mapPedagogicItem(data) {\n                var item = new PedagogicItem();\n                item.type_item = data.type_item;\n                item.id = data.id;\n                //for share directive you must have _id\n                item._id = data.id;\n                item.lesson_id = data.lesson_id;\n                item.title = data.title;\n                item.subject = data.subject;\n                item.audience = data.audience;\n                item.start_hour = data.type_item == \"lesson\" ? moment(data.day).minutes(model.getMinutes(data.start_time)).format(\"HH[h]mm\") : \"\";\n                item.end_hour = data.type_item == \"lesson\" ? moment(data.day).minutes(model.getMinutes(data.end_time)).format(\"HH[h]mm\") : \"\";\n                item.type_homework = data.type_homework;\n                item.teacher = data.teacher;\n                item.description = data.description;\n                item.expanded_description = false;\n                item.state = data.state;\n                item.color = data.color;\n                item.getPreviewDescription();\n                item.room = data.room;\n                item.day = data.day;\n                item.turn_in = data.type_item == \"lesson\" ? \"\" : data.turn_in_type;\n                item.selected = false;\n\n                if (data.day) {\n                    item.dayFormatted = moment(data.day).format(\"DD/MM/YYYY\");\n                    item.dayOfWeek = moment(data.day).format(\"dddd\");\n                }\n                return item;\n            }\n        }]);\n\n        return PedagogicItemService;\n    }();\n    /* create singleton */\n\n\n    AngularExtensions.addModuleConfig(function (module) {\n        module.service(\"PedagogicItemService\", PedagogicItemService);\n    });\n})();\n","'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n(function () {\n    'use strict';\n\n    /*\r\n     * Subject service as class\r\n     * used to manipulate Subject model\r\n     */\n\n    var SubjectService = function () {\n        function SubjectService($http, $q, constants, UtilsService) {\n            _classCallCheck(this, SubjectService);\n\n            this.$http = $http;\n            this.$q = $q;\n            this.constants = constants;\n            this.UtilsService = UtilsService;\n            this.context = {\n                subjectPromise: []\n            };\n        }\n\n        /*\r\n        *   Get all subject from a structureId as map\r\n        *   used to map a course from the subject id\r\n        */\n\n\n        _createClass(SubjectService, [{\n            key: 'getStructureSubjectsAsMap',\n            value: function getStructureSubjectsAsMap(structureId) {\n                return this.getStructureSubjects(structureId).then(function (result) {\n                    var subjects = result;\n                    var results = {};\n                    _.each(subjects, function (subject) {\n                        results[subject.subjectId] = subject;\n                    });\n                    return results;\n                });\n            }\n\n            /*\r\n            *   Get all subject from a structureId\r\n            *   used to map a course from the subject id\r\n            */\n\n        }, {\n            key: 'getStructureSubjects',\n            value: function getStructureSubjects(structureId) {\n                if (!this.context.subjectPromise[structureId]) {\n                    var url = '/directory/timetable/subjects/' + structureId;\n                    this.context.subjectPromise[structureId] = this.$http.get(url).then(function (result) {\n                        return result.data;\n                    });\n                }\n                return this.context.subjectPromise[structureId];\n            }\n\n            /*\r\n            *   get subjects created by the teacher\r\n            *   used to edit a lesson\r\n            */\n\n        }, {\n            key: 'getCustomSubjects',\n            value: function getCustomSubjects(isTeacher) {\n                var urlGetSubjects = '';\n                if (isTeacher) {\n                    urlGetSubjects = '/diary/subject/initorlist';\n                } else {\n                    urlGetSubjects = '/diary/subject/list/' + this.UtilsService.getUserStructuresIdsAsString();\n                }\n\n                return this.$http.get(urlGetSubjects).then(function (result) {\n                    return result.data;\n                });\n            }\n\n            /*\r\n            * map original subject to diary subject\r\n            */\n\n        }, {\n            key: 'mapToDiarySubject',\n            value: function mapToDiarySubject(subject) {\n                var result = new Subject();\n\n                result.id = null;\n                result.school_id = subject.school_id;\n                result.label = subject.subjectLabel;\n                result.originalsubjectid = subject.subjectId;\n                result.teacher_id = subject.teacher_id;\n                return result;\n            }\n        }]);\n\n        return SubjectService;\n    }();\n\n    AngularExtensions.addModuleConfig(function (module) {\n        module.service(\"SubjectService\", SubjectService);\n    });\n})();\n","\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n(function () {\n    'use strict';\n\n    /*\r\n     * Utils service as class\r\n     * used to manipulate Utils model\r\n     */\n\n    var UtilsService = function () {\n        function UtilsService($http, $q, constants) {\n            _classCallCheck(this, UtilsService);\n\n            this.constants = constants;\n        }\n\n        _createClass(UtilsService, [{\n            key: \"getUserStructuresIdsAsString\",\n            value: function getUserStructuresIdsAsString() {\n                var structureIds = \"\";\n\n                model.me.structures.forEach(function (structureId) {\n                    structureIds += structureId + \":\";\n                });\n\n                return structureIds;\n            }\n\n            /**\r\n             * Set lesson tooltip text depending on screen resolution.\r\n             * Tricky responsive must be linked to additional.css behaviour\r\n             * @param lesson\r\n             */\n\n        }, {\n            key: \"getResponsiveLessonTooltipText\",\n            value: function getResponsiveLessonTooltipText(lesson) {\n                var tooltipText = lesson.title + ' (' + lang.translate(lesson.state) + ')';\n                var screenWidth = window.innerWidth;\n\n                // < 900 px display room\n                if (screenWidth < 900 && lesson.room) {\n                    tooltipText += '<br>' + lesson.room;\n                }\n\n                // < 650 px display hour start and hour end\n                if (screenWidth < 650) {\n                    tooltipText += '<br>' + [[lesson.startMoment.format('HH')]] + 'h' + [[lesson.startMoment.format('mm')]];\n                    tooltipText += ' -> ' + [[lesson.endMoment.format('HH')]] + 'h' + [[lesson.endMoment.format('mm')]];\n                }\n\n                // < 600 px display subjectlabel\n                if (screenWidth < 650 && lesson.subjectLabel) {\n                    tooltipText += '<br>' + lesson.subjectLabel;\n                }\n\n                tooltipText = tooltipText.trim();\n\n                return tooltipText;\n            }\n        }]);\n\n        return UtilsService;\n    }();\n\n    AngularExtensions.addModuleConfig(function (module) {\n        module.service(\"UtilsService\", UtilsService);\n    });\n})();\n","\"use strict\";\n\n(function () {\n    'use strict';\n\n    AngularExtensions.addModuleConfig(function (module) {\n        //controller declaration\n        module.controller(\"VisaManagerController\", controller);\n\n        function controller($scope, $rootScope, $routeParams, $timeout) {\n            var vm = this;\n            console.log(\"visa ctrl\");\n            vm.items = [{ name: 'teacher1' }, { name: 'teacher2' }];\n        }\n    });\n})();\n","\"use strict\";\n\n/**\r\n * Default date format\r\n * @type {string}\r\n */\nvar DATE_FORMAT = 'YYYY-MM-DD';\n\n/**\r\n * Model from table\r\n * diary.lesson_has_attachment\r\n * @constructor\r\n */\nfunction LessonAttachment() {}\nfunction Audience() {}\nfunction HomeworksLoad() {}\nfunction HomeworkType() {}\n\nmodel.homeworksPerDayDisplayed = 1;\n/**\r\n * Says whether or not current user can edit an homework\r\n * @returns {*|boolean}\r\n */\nmodel.canEdit = function () {\n    return model.me.type == \"ENSEIGNANT\";\n};\n\n/**\r\n * Says whether or not current user is a teacher\r\n * @returns {*|boolean}\r\n */\nmodel.isUserTeacher = function () {\n    return model.me.type == \"ENSEIGNANT\";\n};\n\n/**\r\n * Says whether or not current user is a teacher\r\n * @returns {*|boolean}\r\n */\nmodel.isUserParent = function () {\n    return model.me.type == \"PERSRELELEVE\";\n};\n\n/**\r\n * Publishes or un publishes a list of homeworks\r\n * @param itemArray Array of homeworks to publish or unpublish\r\n */\nmodel.publishHomeworks = function (itemArray, isPublish, cb, cbe) {\n\n    var url = isPublish ? \"/diary/publishHomeworks\" : \"/diary/unPublishHomeworks\";\n\n    return http().postJson(url, itemArray).done(function (r) {\n        if (typeof cb === 'function') {\n            cb();\n        }\n    }).error(function (e) {\n        if (typeof cbe === 'function') {\n            cbe(model.parseError(e));\n        }\n    });\n};\n\nmodel.deleteItemList = function (items, itemType, cb, cbe) {\n    var url = itemType == \"lesson\" ? '/diary/deleteLessons' : '/diary/deleteHomeworks';\n\n    var itemArray = { ids: model.getItemsIds(items) };\n\n    return http().deleteJson(url, itemArray).done(function (b) {\n\n        items.forEach(function (item) {\n            item.deleteModelReferences();\n        });\n\n        if (typeof cb === 'function') {\n            cb();\n        }\n    }).error(function (e) {\n        if (typeof cbe === 'function') {\n            cbe(model.parseError(e));\n        }\n    });\n};\n\nmodel.deletePedagogicItemReferences = function (itemId) {\n    model.pedagogicDays.forEach(function (day) {\n        day.pedagogicItemsOfTheDay = _.reject(day.pedagogicItemsOfTheDay, function (item) {\n            return !item || item.lesson_id == itemId || item.id == itemId;\n        });\n        day.resetCountValues();\n    });\n\n    model.pedagogicDays.all = _.filter(model.pedagogicDays.all, function (day) {\n        return day.numberOfItems() > 0;\n    });\n\n    model.initSubjects();\n};\n\nmodel.unselectDays = function () {\n    model.pedagogicDays.forEach(function (day) {\n        day.selected = undefined;\n    });\n};\n\n// gets the selected date from pedagogic items\nmodel.selectedPedagogicDate = function () {\n    var selectedDay = _.findWhere(model.pedagogicDays.all, { selected: true });\n    if (selectedDay) {\n        return moment(selectedDay.dayName, \"dddd DD MMMM YYYY\").format(\"YYYY-MM-DD\");\n    } else {\n        return moment();\n    }\n};\n\nvar syncHomeworks = function syncHomeworks(cb) {\n    model.homeworks.syncHomeworks(function () {\n        if (typeof cb === 'function') {\n            cb();\n        }\n    });\n};\n\nvar syncLessonsAndHomeworks = function syncLessonsAndHomeworks(cb) {\n    model.lessons.syncLessons();\n    // need sync attached lesson homeworks\n    model.homeworks.syncHomeworks();\n\n    if (typeof cb === 'function') {\n        cb();\n    }\n};\n\n/**\r\n * Given a moment which contain reliable time data,\r\n * return a moment time with this time and the date specified.\r\n * @param date Date\r\n * @param momentTime Moment date\r\n * @returns {*}\r\n */\nmodel.getMomentDateTimeFromDateAndMomentTime = function (date, momentTime) {\n    var dateMoment = moment(date);\n\n    momentTime.set('year', dateMoment.get('year'));\n    momentTime.set('month', dateMoment.get('month'));\n    momentTime.set('date', dateMoment.get('date'));\n\n    return momentTime;\n};\n\n/**\r\n * Publishes or un publishes a list of lessons\r\n * @param cb Callback\r\n * @param cbe Callback on error\r\n */\nmodel.publishLessons = function (itemArray, isPublish, cb, cbe) {\n\n    var url = isPublish ? \"/diary/publishLessons\" : \"/diary/unPublishLessons\";\n\n    return http().postJson(url, itemArray).done(function (r) {\n\n        var updateLessons = new Array();\n\n        // update lesson cache\n        // bad code but collection does not seem to update on state change\n        // so have to delete and add modified lessons ...\n        model.lessons.forEach(function (lessonModel) {\n            if (itemArray.ids.indexOf(lessonModel.id) != -1) {\n                model.lessons.remove(lessonModel);\n\n                lessonModel.changeState(isPublish);\n                // update tooltip text (has state label in it)\n                lessonModel.tooltipText = getResponsiveLessonTooltipText(lessonModel);\n                updateLessons.push(lessonModel);\n            }\n        });\n\n        model.lessons.addRange(updateLessons);\n\n        if (typeof cb === 'function') {\n            cb();\n        }\n    }).error(function (e) {\n        if (typeof cbe === 'function') {\n            cbe(model.parseError(e));\n        }\n    });\n};\n\nmodel.getMinutes = function (time) {\n    return new Number(time.split(':')[0] * 60) + new Number(time.split(':')[1]);\n};\n\nmodel.parseError = function (e) {\n    var error = {};\n    try {\n        error = JSON.parse(e.responseText);\n    } catch (err) {\n        error.error = \"diary.error.unknown\";\n    }\n    error.status = e.status;\n\n    return error;\n};\n\n/**\r\n *\r\n * @param items Collection of items (lessons or homeworks)\r\n * @returns {Array} Array of id of the items\r\n */\nmodel.getItemsIds = function (items) {\n    return _.toArray(_.pluck(items, 'id'));\n};\n\n/**\r\n * Loads homework load data for current week of homework\r\n * @param homework\r\n * @param cb\r\n * @param cbe\r\n */\nmodel.loadHomeworksLoad = function (homework, date, audienceId, cb, cbe) {\n\n    http().get('/diary/homework/load/' + date + '/' + audienceId).done(function (sqlHomeworksLoads) {\n\n        homework.weekhomeworksload = new Array();\n\n        sqlHomeworksLoads.forEach(function (homeworkLoad) {\n            homework.weekhomeworksload.push(sqlToJsHomeworkLoad(homeworkLoad));\n        });\n\n        if (typeof cb === 'function') {\n            cb();\n        }\n    }).error(function (e) {\n        if (typeof cbe === 'function') {\n            cbe(model.parseError(e));\n        }\n    });\n};\n\n/**\r\n * Get homeworks linked to a lesson\r\n *\r\n * @param lesson\r\n * @param cb Callback\r\n * @param cbe Callback on error\r\n */\nmodel.loadHomeworksForLesson = function (lesson, cb, cbe) {\n\n    if (!lesson.id) {\n        return;\n    }\n\n    http().get('/diary/homework/list/' + lesson.id).done(function (sqlHomeworks) {\n\n        lesson.homeworks = new Collection(Homework);\n\n        sqlHomeworks.forEach(function (sqlHomework) {\n            lesson.homeworks.push(sqlToJsHomework(sqlHomework));\n        });\n\n        if (typeof cb === 'function') {\n            cb();\n        }\n    }).error(function (e) {\n        if (typeof cbe === 'function') {\n            cbe(model.parseError(e));\n        }\n    });\n};\n\n/**\r\n * Get school ids of current authenticated user as string\r\n * seperated with ':'\r\n * @returns {string} schoolid_1:schoolid_2:...\r\n */\nvar getUserStructuresIdsAsString = function getUserStructuresIdsAsString() {\n    var structureIds = \"\";\n\n    model.me.structures.forEach(function (structureId) {\n        structureIds += structureId + \":\";\n    });\n\n    return structureIds;\n};\n\nmodel.build = function () {\n\n    calendar.startOfDay = 8;\n    calendar.endOfDay = 19;\n    calendar.dayHeight = 65;\n    /*model.calendar = new calendar.Calendar({\r\n        week: moment().week()\r\n    });\r\n    */\n\n    // keeping start/end day values in cache so we can detect dropped zones (see ng-extensions.js)\n    // note: model.calendar.startOfDay does not work in console.\n    model.startOfDay = calendar.startOfDay;\n    model.endOfDay = calendar.endOfDay;\n\n    model.makeModels([HomeworkType, Audience, Subject, Lesson, Homework, PedagogicDay, Child]);\n    Model.prototype.inherits(Lesson, calendar.ScheduleItem); // will allow to bind item.selected for checkbox\n\n    this.searchForm = new SearchForm(false);\n    this.currentSchool = {};\n\n    this.collection(Lesson, {\n        loading: false,\n        syncLessons: function syncLessons(cb, cbe) {\n            console.warn(\"deprecated\");\n            return;\n            var that = this;\n            if (that.loading) return;\n\n            var lessons = [];\n            var start = moment(model.calendar.dayForWeek).day(1).format(DATE_FORMAT);\n            var end = moment(model.calendar.dayForWeek).day(1).add(1, 'week').format(DATE_FORMAT);\n\n            model.lessons.all.splice(0, model.lessons.all.length);\n\n            var urlGetLessons = '/diary/lesson/' + getUserStructuresIdsAsString() + '/' + start + '/' + end + '/';\n\n            if (model.isUserParent() && model.child) {\n                urlGetLessons += model.child.id;\n            } else {\n                urlGetLessons += '%20';\n            }\n\n            that.loading = true;\n            http().get(urlGetLessons).done(function (data) {\n                lessons = lessons.concat(data);\n                that.addRange(_.map(lessons, function (lesson) {\n                    return sqlToJsLesson(lesson);\n                }));\n\n                if (typeof cb === 'function') {\n                    cb();\n                }\n                that.loading = false;\n            }).error(function (e) {\n                if (typeof cbe === 'function') {\n                    cbe(model.parseError(e));\n                }\n                that.loading = false;\n            });\n        }, pushAll: function pushAll(datas) {\n\n            if (datas) {\n                this.all = _.union(this.all, datas);\n            }\n        }, behaviours: 'diary'\n    });\n\n    this.collection(Subject, {\n        loading: false,\n        syncSubjects: function syncSubjects(cb, cbe) {\n            console.warn(\"deprecated\");\n            return;\n\n            this.all = [];\n            var that = this;\n            if (that.loading) return;\n\n            that.loading = true;\n\n            if (model.isUserTeacher()) {\n                http().get('/diary/subject/initorlist').done(function (data) {\n                    if (data === \"\") {\n                        data = [];\n                    }\n                    model.subjects.addRange(data);\n                    if (typeof cb === 'function') {\n                        cb();\n                    }\n                    that.loading = false;\n                }.bind(that)).error(function (e) {\n                    if (typeof cbe === 'function') {\n                        cbe(model.parseError(e));\n                    }\n                    that.loading = false;\n                });\n            } else {\n                http().get('/diary/subject/list/' + getUserStructuresIdsAsString()).done(function (data) {\n                    model.subjects.addRange(data);\n                    if (typeof cb === 'function') {\n                        cb();\n                    }\n                    that.loading = false;\n                }.bind(that)).error(function (e) {\n                    if (typeof cbe === 'function') {\n                        cbe(model.parseError(e));\n                    }\n                    that.loading = false;\n                });\n            }\n        }\n    });\n\n    this.collection(Audience, {\n        loading: false,\n        syncAudiences: function syncAudiences(cb, cbe) {\n            var _this = this;\n\n            console.warn(\"deprecated\");\n            return;\n            this.all = [];\n            var nbStructures = model.me.structures.length;\n            var that = this;\n            if (that.loading) return;\n\n            model.currentSchool = model.me.structures[0];\n            that.loading = true;\n\n            model.getAudienceService().getAudiences(model.me.structures).then(function (audiences) {\n                _this.addRange(structureData.classes);\n                // TODO get groups\n                nbStructures--;\n                if (nbStructures === 0) {\n                    _this.trigger('sync');\n                    _this.trigger('change');\n                    if (typeof cb === 'function') {\n                        cb();\n                    }\n                }\n\n                that.loading = false;\n            });\n\n            /*model.me.structures.forEach(function (structureId) {\r\n                http().get('/userbook/structure/' + structureId).done(function (structureData) {\r\n                    structureData.classes = _.map(structureData.classes, function (audience) {\r\n                        audience.structureId = structureId;\r\n                        audience.type = 'class';\r\n                        audience.typeLabel = lang.translate('diary.audience.class');\r\n                        return audience;\r\n                    });\r\n                    this.addRange(structureData.classes);\r\n                    // TODO get groups\r\n                    nbStructures--;\r\n                    if (nbStructures === 0) {\r\n                        this.trigger('sync');\r\n                        this.trigger('change');\r\n                        if(typeof cb === 'function'){\r\n                            cb();\r\n                        }\r\n                    }\r\n                      that.loading = false;\r\n                }.bind(that))\r\n                .error(function (e) {\r\n                    if (typeof cbe === 'function') {\r\n                        cbe(model.parseError(e));\r\n                    }\r\n                    that.loading = false;\r\n                });\r\n            });*/\n        }\n    });\n\n    this.collection(HomeworkType, {\n        loading: false,\n        syncHomeworkTypes: function syncHomeworkTypes(cb, cbe) {\n\n            var homeworkTypes = [];\n            var that = this;\n\n            if (that.loading) return;\n\n            model.homeworkTypes.all.splice(0, model.homeworkTypes.all.length);\n\n            var url = '/diary/homeworktype/initorlist';\n\n            var urlGetHomeworkTypes = url;\n\n            that.loading = true;\n            http().get(urlGetHomeworkTypes).done(function (data) {\n                homeworkTypes = homeworkTypes.concat(data);\n                that.addRange(_.map(homeworkTypes, sqlToJsHomeworkType));\n                if (typeof cb === 'function') {\n                    cb();\n                }\n                that.loading = false;\n            }).error(function (e) {\n                if (typeof cbe === 'function') {\n                    cbe(model.parseError(e));\n                }\n                that.loading = false;\n            });\n        }, pushAll: function pushAll(datas) {\n            if (datas) {\n                this.all = _.union(this.all, datas);\n            }\n        }, behaviours: 'diary'\n    });\n\n    this.collection(Homework, {\n        loading: false,\n        syncHomeworks: function syncHomeworks(cb, cbe) {\n\n            var homeworks = [];\n            var start = moment(model.calendar.dayForWeek).day(1).format(DATE_FORMAT);\n            var end = moment(model.calendar.dayForWeek).day(1).add(1, 'week').format(DATE_FORMAT);\n            var that = this;\n\n            if (that.loading) return;\n\n            model.homeworks.all.splice(0, model.homeworks.all.length);\n\n            var urlGetHomeworks = '/diary/homework/' + getUserStructuresIdsAsString() + '/' + start + '/' + end + '/';\n\n            if (model.isUserParent() && model.child) {\n                urlGetHomeworks += model.child.id;\n            } else {\n                urlGetHomeworks += '%20';\n            }\n\n            that.loading = true;\n            http().get(urlGetHomeworks).done(function (data) {\n                homeworks = homeworks.concat(data);\n                that.addRange(_.map(homeworks, sqlToJsHomework));\n                if (typeof cb === 'function') {\n                    cb();\n                }\n                that.loading = false;\n            }).error(function (e) {\n                if (typeof cbe === 'function') {\n                    cbe(model.parseError(e));\n                }\n                that.loading = false;\n            });\n        }, pushAll: function pushAll(datas) {\n            if (datas) {\n                this.all = _.union(this.all, datas);\n            }\n        }, behaviours: 'diary'\n    });\n\n    this.collection(PedagogicDay, {\n        reset: function reset() {\n            model.pedagogicDays.selectAll();\n            model.pedagogicDays.removeSelection();\n        },\n        syncPedagogicItems: function syncPedagogicItems(cb, cbe) {\n            var params = model.searchForm.getSearch();\n            model.performPedagogicItemSearch(params, model.isUserTeacher(), cb, cbe);\n        },\n        pushAll: function pushAll(datas) {\n            if (datas) {\n                this.all = _.union(this.all, datas);\n            }\n        },\n        getItemsByLesson: function getItemsByLesson(lessonId) {\n            var items = [];\n\n            model.pedagogicDays.forEach(function (day) {\n                var relatedToLesson = _.filter(day.pedagogicItemsOfTheDay, function (item) {\n                    return item.lesson_id == lessonId;\n                });\n                items = _.union(items, relatedToLesson);\n            });\n\n            return items;\n        }\n    });\n\n    /**\r\n     *\r\n     */\n    this.collection(Child, {\n        reset: function reset() {\n            // n.b: childs not 'children' since collection function adds a 's'\n            model.childs.selectAll();\n            model.childs.removeSelection();\n        },\n        syncChildren: function syncChildren(cb, cbe) {\n            model.listChildren(cb, cbe);\n        }, pushAll: function pushAll(datas) {\n            if (datas) {\n                this.all = _.union(this.all, datas);\n            }\n        }\n    });\n\n    /**\r\n     * Convert sql diary.lesson row to js row used in angular model\r\n     * @param lesson Sql diary.lesson row\r\n     */\n    sqlToJsLesson = function sqlToJsLesson(data) {\n        console.warn(\"deprecated\");\n        return;\n        var lessonHomeworks = new Array();\n\n        // only initialize homeworks attached to lesson\n        // with only id\n        if (data.homework_ids) {\n            for (var i = 0; i < data.homework_ids.length; i++) {\n                var homework = new Homework();\n                homework.id = data.homework_ids[i];\n                homework.lesson_id = parseInt(data.lesson_id);\n                homework.loaded = false; // means full data from sql not loaded\n                lessonHomeworks.push(homework);\n            }\n        }\n\n        var lesson = {\n            //for share directive you must have _id\n            _id: data.lesson_id,\n            id: data.lesson_id,\n            title: data.lesson_title,\n            audience: model.audiences.findWhere({ id: data.audience_id }),\n            audienceId: data.audience_id,\n            audienceLabel: data.audience_label,\n            audienceType: data.audience_type,\n            description: data.lesson_description,\n            subject: model.subjects.findWhere({ id: data.subject_id }),\n            subjectId: data.subject_id,\n            subjectLabel: data.subject_label,\n            teacherId: data.teacher_display_name,\n            structureId: data.school_id,\n            date: moment(data.lesson_date),\n            startTime: data.lesson_start_time,\n            endTime: data.lesson_end_time,\n            color: data.lesson_color,\n            room: data.lesson_room,\n            annotations: data.lesson_annotation,\n            startMoment: moment(data.lesson_date.split(' ')[0] + ' ' + data.lesson_start_time),\n            endMoment: moment(data.lesson_date.split(' ')[0] + ' ' + data.lesson_end_time),\n            state: data.lesson_state,\n            is_periodic: false,\n            homeworks: lessonHomeworks,\n            tooltipText: '',\n            locked: !model.canEdit() ? true : false\n        };\n\n        if ('group' === lesson.audienceType) {\n            lesson.audienceTypeLabel = lang.translate('diary.audience.group');\n        } else {\n            lesson.audienceTypeLabel = lang.translate('diary.audience.class');\n        }\n\n        if (data.attachments) {\n            lesson.attachments = _.map(JSON.parse(data.attachments), jsonToJsAttachment);\n        }\n\n        var tooltip = getResponsiveLessonTooltipText(lesson);\n\n        lesson.tooltipText = tooltip;\n        return lesson;\n    };\n\n    jsonToJsAttachment = function jsonToJsAttachment(data) {\n        console.warn(\"deprecated\");\n        return;\n        var att = new Attachment();\n        att.id = data.id;\n        att.user_id = data.user_id;\n        att.creation_date = data.creation_date;\n        att.document_id = data.document_id;\n        att.document_label = data.document_label;\n\n        return att;\n    };\n\n    /**\r\n     * On window resize compute lesson tooltips (responsive design)\r\n     */\n    /*window.addEventListener('resize', function(event){\r\n          model.lessons.forEach(function (lesson) {\r\n            lesson.tooltipText = getResponsiveLessonTooltipText(lesson);\r\n        });\r\n    });*/\n\n    /**\r\n     * Set lesson tooltip text depending on screen resolution.\r\n     * Tricky responsive must be linked to additional.css behaviour\r\n     * @param lesson\r\n     */\n    getResponsiveLessonTooltipText = function getResponsiveLessonTooltipText(lesson) {\n        console.warn(\"deprecated use utils service\");\n        return;\n        var tooltipText = lesson.title + ' (' + lang.translate(lesson.state) + ')';\n        var screenWidth = window.innerWidth;\n\n        // < 900 px display room\n        if (screenWidth < 900 && lesson.room) {\n            tooltipText += '<br>' + lesson.room;\n        }\n\n        // < 650 px display hour start and hour end\n        if (screenWidth < 650) {\n            tooltipText += '<br>' + [[lesson.startMoment.format('HH')]] + 'h' + [[lesson.startMoment.format('mm')]];\n            tooltipText += ' -> ' + [[lesson.endMoment.format('HH')]] + 'h' + [[lesson.endMoment.format('mm')]];\n        }\n\n        // < 600 px display subjectlabel\n        if (screenWidth < 650 && lesson.subjectLabel) {\n            tooltipText += '<br>' + lesson.subjectLabel;\n        }\n\n        tooltipText = tooltipText.trim();\n\n        return tooltipText;\n    };\n\n    /**\r\n     * Transform sql homework load data to json like\r\n     * @param sqlHomeworkType\r\n     */\n    sqlToJsHomeworkLoad = function sqlToJsHomeworkLoad(sqlHomeworkload) {\n        return {\n            countLoad: sqlHomeworkload.countload,\n            description: sqlHomeworkload.countload + ' ' + lang.translate('diary.homework.label'),\n            day: moment(sqlHomeworkload.day).format('dddd').substring(0, 1).toUpperCase(), // 'lundi' -> 'lu' -> 'L'\n            numDay: moment(sqlHomeworkload.day).format('DD') // 15\n        };\n    };\n\n    /**\r\n     * Transform sql homework type data to json like\r\n     * @param sqlHomeworkType\r\n     * @returns {{id: *, structureId: (*|T), label: *, category: *}}\r\n     */\n    sqlToJsHomeworkType = function sqlToJsHomeworkType(sqlHomeworkType) {\n        return {\n            id: sqlHomeworkType.id,\n            structureId: sqlHomeworkType.school_id,\n            label: sqlHomeworkType.homework_type_label,\n            category: sqlHomeworkType.homework_type_category\n        };\n    };\n\n    /**\r\n     * Transform sql homework data (table diary.homework)\r\n     * to json\r\n     * @param sqlHomework\r\n     * @returns {{id: *, description: *, audience: *, subjectId: *, subjectLabel: *, type: *, typeId: *, typeLabel: *, teacherId: *, structureId: (*|T), audienceId: *, audienceLabel: *, dueDate: *, date: *, title: *, color: *, startMoment: *, endMoment: *, state: *, is_periodic: boolean, lesson_id: *}}\r\n     */\n    sqlToJsHomework = function sqlToJsHomework(sqlHomework) {\n        var homework = {\n            //for share directive you must have _id\n            _id: sqlHomework.id,\n            id: sqlHomework.id,\n            description: sqlHomework.homework_description,\n            audienceId: sqlHomework.audience_id,\n            audience: model.audiences.findWhere({ id: sqlHomework.audience_id }),\n            subject: model.subjects.findWhere({ id: sqlHomework.subject_id }),\n            subjectId: sqlHomework.subject_id,\n            subjectLabel: sqlHomework.subject_label,\n            type: model.homeworkTypes.findWhere({ id: sqlHomework.homework_type_id }),\n            typeId: sqlHomework.homework_type_id,\n            typeLabel: sqlHomework.homework_type_label,\n            teacherId: sqlHomework.teacher_id,\n            structureId: sqlHomework.structureId,\n            audienceType: sqlHomework.audience_type,\n            audienceLabel: sqlHomework.audience_label,\n            // TODO delete dueDate? (seems redondant info vs date field)\n            dueDate: moment(sqlHomework.homework_due_date),\n            date: moment(sqlHomework.homework_due_date),\n            title: sqlHomework.homework_title,\n            color: sqlHomework.homework_color,\n            startMoment: moment(sqlHomework.homework_due_date),\n            endMoment: moment(sqlHomework.homework_due_date),\n            state: sqlHomework.homework_state,\n            is_periodic: false,\n            lesson_id: sqlHomework.lesson_id\n        };\n\n        if (sqlHomework.attachments) {\n            homework.attachments = _.map(JSON.parse(sqlHomework.attachments), jsonToJsAttachment);\n        }\n\n        if ('group' === homework.audienceType) {\n            homework.audienceTypeLabel = lang.translate('diary.audience.group');\n        } else {\n            homework.audienceTypeLabel = lang.translate('diary.audience.class');\n        }\n\n        return homework;\n    };\n\n    /** Converts sql pedagogic item to js data */\n    sqlToJsPedagogicItem = function sqlToJsPedagogicItem(data) {\n        //TODO use service\n        var item = new PedagogicItem();\n        item.type_item = data.type_item;\n        item.id = data.id;\n        //for share directive you must have _id\n        item._id = data.id;\n        item.lesson_id = data.lesson_id;\n        item.title = data.title;\n        item.subject = data.subject;\n        item.audience = data.audience;\n        item.start_hour = data.type_item == \"lesson\" ? moment(data.day).minutes(model.getMinutes(data.start_time)).format(\"HH[h]mm\") : \"\";\n        item.end_hour = data.type_item == \"lesson\" ? moment(data.day).minutes(model.getMinutes(data.end_time)).format(\"HH[h]mm\") : \"\";\n        item.type_homework = data.type_homework;\n        item.teacher = data.teacher;\n        item.description = data.description;\n        item.expanded_description = false;\n        item.state = data.state;\n        item.color = data.color;\n        item.getPreviewDescription();\n        item.room = data.room;\n        item.day = data.day;\n        item.turn_in = data.type_item == \"lesson\" ? \"\" : data.turn_in_type;\n        item.selected = false;\n\n        if (data.day) {\n            item.dayFormatted = moment(data.day).format(\"DD/MM/YYYY\");\n            item.dayOfWeek = moment(data.day).format(\"dddd\");\n        }\n        return item;\n    };\n};\n\n/**\r\n * Returns default audience of connected user.\r\n * @returns {*}\r\n */\nmodel.getDefaultAudience = function () {\n    var defaultAudience = null;\n\n    if (model.me.classes && model.me.classes.length > 0) {\n        defaultAudience = model.audiences.findWhere({ id: model.me.classes[0] });\n    }\n\n    if (!defaultAudience) {\n        defaultAudience = model.audiences.first();\n    }\n\n    return defaultAudience;\n};\n\nmodel.showHomeworkPanel = true;\n\n/**\r\n * Default color of lesson and homeworks\r\n * @type {string}\r\n */\nvar DEFAULT_ITEM_COLOR = '#CECEF6';\n\n/**\r\n * Default state of lesson or homework when created\r\n * @type {string}\r\n */\nvar DEFAULT_STATE = 'draft';\n\n/**\r\n * Init homework object on created.\r\n * Set default attribute values\r\n * @param homework\r\n * @param cb Callback function\r\n * @param cbe Callback function on error\r\n * @returns {*}\r\n */\nmodel.initHomework = function (dueDate, lesson) {\n\n    var homework = new Homework();\n\n    homework.created = new Date();\n    homework.expanded = true;\n    homework.type = model.homeworkTypes.first();\n    homework.title = homework.type.label;\n    homework.date = dueDate ? dueDate : moment().minute(0).second(0);\n\n    // create homework attached to lesson\n    if (lesson) {\n        homework.audience = lesson.audience;\n        homework.subject = lesson.subject;\n        homework.audienceType = homework.audience.type;\n        homework.color = lesson.color;\n        homework.state = lesson.state;\n    }\n    // free homework\n    else {\n            homework.audience = {}; //sets the default audience to undefined\n            homework.subject = model.subjects.first();\n            homework.audienceType = homework.audience.type;\n            homework.color = DEFAULT_ITEM_COLOR;\n            homework.state = DEFAULT_STATE;\n        }\n\n    model.loadHomeworksLoad(homework, moment(homework.date).format(DATE_FORMAT), homework.audience.id);\n\n    return homework;\n};\n\n/**\r\n * Init lesson\r\n * @returns {Lesson}\r\n */\nmodel.initLesson = function (timeFromCalendar, selectedDate) {\n    var lesson = new Lesson();\n\n    lesson.audience = {}; //sets the default audience to undefined\n    lesson.subject = model.subjects.first();\n    lesson.audienceType = lesson.audience.type;\n    lesson.color = DEFAULT_ITEM_COLOR;\n    lesson.state = DEFAULT_STATE;\n    lesson.title = lang.translate('diary.lesson.label');\n\n    var newItem = {};\n\n    if (timeFromCalendar) {\n        newItem = model.calendar.newItem;\n\n        // force to HH:00 -> HH:00 + 1 hour\n        newItem.beginning = newItem.beginning.second(0);\n        newItem.date = newItem.beginning;\n        if (!newItem.beginning.isBefore(newItem.end)) {\n            newItem.end = moment(newItem.beginning);\n            newItem.end.minute(0).second(0).add(1, 'hours');\n        }\n        if (newItem.audience) {\n            lesson.audience = newItem.audience;\n            lesson.audienceType = lesson.audience.type;\n        }\n\n        if (newItem.room) {\n            lesson.room = newItem.room;\n        }\n\n        if (newItem.subject) {\n            lesson.subject = newItem.subject;\n        }\n    }\n    // init start/end time to now (HH:00) -> now (HH:00) + 1 hour or selectedDate ->\n    else {\n            var itemDate = selectedDate ? moment(selectedDate) : moment();\n\n            newItem = {\n                date: itemDate,\n                beginning: moment().minute(0).second(0),\n                end: moment().minute(0).second(0).add(1, 'hours')\n            };\n        }\n\n    lesson.newItem = newItem;\n    lesson.startTime = newItem.beginning;\n    lesson.endTime = newItem.end;\n    lesson.date = newItem.date;\n\n    return lesson;\n};\n\n/**\r\n * Load previous lessons from current one\r\n * Attached homeworks to lessons are also loaded\r\n * @param lesson\r\n * @param useDeltaStep\r\n * @param cb Callback function\r\n * @param cbe Callback on error function\r\n */\nmodel.getPreviousLessonsFromLesson = function (lesson, useDeltaStep, cb, cbe) {\n\n    console.warn(\"deprecated\");\n    return;\n\n    // if (useDeltaStep) {\n    //     if (lesson.allPreviousLessonsLoaded) {\n    //         return;\n    //     }\n    // }/* else if (lesson.previousLessonsLoaded || lesson.previousLessonsLoading == true) {\n    //     return;\n    // }*/\n    //\n    // if (!useDeltaStep) {\n    //     lesson.allPreviousLessonsLoaded = false;\n    // }\n    //\n    // var defaultCount = 6;\n    //\n    // var idx_start = 0;\n    // var idx_end = idx_start + defaultCount;\n    //\n    // if (useDeltaStep) {\n    //     idx_start += defaultCount;\n    //     idx_end += defaultCount;\n    // }\n    //\n    // var params = {};\n    //\n    // params.offset = idx_start;\n    // params.limit = idx_end;\n    //\n    // if (lesson.id) {\n    //     params.excludeLessonId = lesson.id;\n    // }\n    //\n    // // tricky way to detect if string date or moment date ...\n    // // 12:00:00\n    // if (lesson.endTime.length === 8) {\n    //     params.endDateTime = lesson.date.format(DATE_FORMAT) + ' ' + lesson.endTime;\n    // } else {\n    //     params.endDateTime = lesson.date.format(DATE_FORMAT) + ' ' + moment(lesson.endTime).format(\"HH:mm\");\n    // }\n    //\n    // var clonedLessonMoment = moment(new Date(lesson.date));\n    // //params.startDate = clonedLessonMoment.add(-2, 'month').format(DATE_FORMAT);\n    // params.subject = lesson.subject.id;\n    // params.audienceId = lesson.audience.id;\n    // params.returnType = 'lesson'; // will allow get lessons first, then homeworks later\n    // params.homeworkLinkedToLesson = \"true\";\n    // params.sortOrder = \"DESC\";\n    //\n    // if (!lesson.previousLessons) {\n    //     lesson.previousLessons = new Array();\n    // }\n    // lesson.previousLessonsDisplayed = new Array();\n    //\n    // lesson.previousLessonsLoading = true;\n    // http().postJson('/diary/pedagogicItems/list', params).done(function (items) {\n    //\n    //     // all lessons loaded\n    //     if (items.length < defaultCount) {\n    //         lesson.allPreviousLessonsLoaded = true;\n    //     }\n    //\n    //     var previousLessonsAndHomeworks = _.map(items, sqlToJsPedagogicItem);\n    //\n    //     var groupByItemType = _.groupBy(previousLessonsAndHomeworks, 'type_item');\n    //\n    //     var previousLessons = groupByItemType.lesson;\n    //\n    //     if (previousLessons) {\n    //         var previousLessonIds = new Array();\n    //\n    //         previousLessons.forEach(function (lesson) {\n    //             previousLessonIds.push(lesson.id);\n    //         });\n    //\n    //\n    //         // load linked homeworks of previous lessons\n    //         var paramsHomeworks = {};\n    //         paramsHomeworks.returnType = 'homework';\n    //         paramsHomeworks.homeworkLessonIds = previousLessonIds;\n    //\n    //         http().postJson('/diary/pedagogicItems/list', paramsHomeworks).done(function (items2) {\n    //\n    //             var previousHomeworks = _.map(items2, sqlToJsPedagogicItem);\n    //\n    //             previousLessons.forEach(function (lesson) {\n    //                 lesson.homeworks = _.where(previousHomeworks, {lesson_id: lesson.id});\n    //             });\n    //\n    //             lesson.previousLessons = lesson.previousLessons.concat(previousLessons);\n    //             lesson.previousLessonsLoaded = true;\n    //             lesson.previousLessonsLoading = false;\n    //             lesson.previousLessonsDisplayed = lesson.previousLessons;\n    //\n    //             if (typeof cb === 'function') {\n    //                 cb();\n    //             }\n    //         });\n    //     } else {\n    //         lesson.previousLessons = new Array();\n    //         lesson.previousLessonsLoaded = true;\n    //         lesson.previousLessonsLoading = false;\n    //         lesson.previousLessonsDisplayed = lesson.previousLessons;\n    //         if (typeof cb === 'function') {\n    //             cb();\n    //         }\n    //     }\n    //\n    // }).error(function (e) {\n    //     if (typeof cbe === 'function') {\n    //         cbe(model.parseError(e));\n    //     }\n    // });\n};\n\nmodel.performPedagogicItemSearch = function (params, isTeacher, cb, cbe) {\n\n    // global quick search panel\n    if (params.isQuickSearch) {\n        if (params.returnType === 'lesson') {\n            model.pedagogicDaysQuickSearchLesson = new Array();\n        } else {\n            model.pedagogicDaysQuickSearchHomework = new Array();\n        }\n    }\n    // 'classical' view list\n    else {\n            model.pedagogicDays.reset();\n        }\n\n    http().postJson('/diary/pedagogicItems/list', params).done(function (items) {\n\n        var pedagogicItemsFromDB = _.map(items, sqlToJsPedagogicItem);\n\n        var days = _.groupBy(pedagogicItemsFromDB, 'day');\n\n        var pedagogicDays = [];\n\n        var aDayIsSelected = false;\n\n        for (var day in days) {\n            if (days.hasOwnProperty(day)) {\n                var pedagogicDay = new PedagogicDay();\n                pedagogicDay.selected = false;\n                pedagogicDay.dayName = moment(day).format(\"dddd DD MMMM YYYY\");\n                pedagogicDay.shortName = pedagogicDay.dayName.substring(0, 2);\n                pedagogicDay.shortDate = moment(day).format(\"DD/MM\");\n                pedagogicDay.pedagogicItemsOfTheDay = days[day];\n\n                var countItems = _.groupBy(pedagogicDay.pedagogicItemsOfTheDay, 'type_item');\n\n                pedagogicDay.nbLessons = countItems['lesson'] ? countItems['lesson'].length : 0;\n                pedagogicDay.nbHomeworks = countItems['homework'] ? countItems['homework'].length : 0;\n\n                //select default day\n                if (isTeacher) {\n                    if (!aDayIsSelected) {\n                        pedagogicDay.selected = true;\n                        aDayIsSelected = true;\n                    }\n                } else {\n                    if (pedagogicDay.nbHomeworks > 0 && !aDayIsSelected) {\n                        pedagogicDay.selected = true;\n                        aDayIsSelected = true;\n                    }\n                }\n                pedagogicDays.push(pedagogicDay);\n            }\n        }\n\n        if (pedagogicDays[0] && !aDayIsSelected) {\n            pedagogicDays[0].selected = true;\n        }\n\n        // global quick search panel\n        if (params.isQuickSearch) {\n            if (params.returnType === 'lesson') {\n                model.pedagogicDaysQuickSearchLesson = model.pedagogicDaysQuickSearchLesson.concat(pedagogicDays);\n            } else {\n                model.pedagogicDaysQuickSearchHomework = model.pedagogicDaysQuickSearchHomework.concat(pedagogicDays);\n            }\n        } else {\n            model.pedagogicDays.pushAll(pedagogicDays);\n        }\n\n        model.initSubjects();\n\n        if (typeof cb === 'function') {\n            cb();\n        }\n    }).error(function (e) {\n        if (typeof cbe === 'function') {\n            cbe(model.parseError(e));\n        }\n    });\n};\n\n/**\r\n * List children of current authenticated user (if parent)\r\n * @param cb Callback function\r\n * @param cbe Callback error function\r\n */\nmodel.listChildren = function (cb, cbe) {\n\n    // no children - abort\n    if (!model.me.childrenIds || model.me.childrenIds.length == 0) {\n        if (typeof cb === 'function') {\n            cb();\n        }\n        return;\n    }\n\n    model.childs.removeAll();\n\n    http().get('/diary/children/list').done(function (data) {\n\n        model.childs.addRange(data);\n\n        if (model.childs.all.length > 0) {\n            model.child = model.childs.all[0];\n            model.child.selected = true;\n        }\n\n        if (typeof cb === 'function') {\n            cb();\n        }\n    }).error(function (e) {\n        if (typeof cbe === 'function') {\n            cbe(model.parseError(e));\n        }\n    });\n};\n\n//builds the set of different subjects encountered in the pedagogic items of the list\nmodel.initSubjects = function () {\n\n    var subjects = [];\n\n    model.pedagogicDays.forEach(function (pedagogicDay) {\n        pedagogicDay.pedagogicItemsOfTheDay.forEach(function (pedagogicItem) {\n            if (!pedagogicItem) {\n                return;\n            }\n            var subjectName = pedagogicItem.subject;\n            if (!_.contains(subjects, subjectName)) {\n                subjects.push(subjectName);\n            }\n        });\n    });\n\n    model.searchForm.subjects = subjects;\n};\n\n/**\r\n * Find subject by id\r\n * @param subjectId\r\n * @returns {null} Subject with id set\r\n */\nmodel.findSubjectById = function (subjectId) {\n\n    var subjectMatch = null;\n\n    model.subjects.all.forEach(function (subject) {\n\n        if (subject.id == subjectId) {\n            subjectMatch = subject;\n        }\n    });\n\n    return subjectMatch;\n};\n\n/**\r\n * Find subjects matching label user inputed.\r\n * @param label Label subject (might be partial, not case sensitive)\r\n */\nmodel.findSubjectsByLabel = function (label) {\n\n    var subjectsFound = new Array();\n\n    if (label.length > 0) {\n        var labelLowerCaseNoAccent = sansAccent(label).toLowerCase();\n\n        model.subjects.all.forEach(function (subject) {\n            var labelSubjectLowerCaseNoAccent = sansAccent(subject.label.toLowerCase());\n\n            if (labelSubjectLowerCaseNoAccent.indexOf(labelLowerCaseNoAccent) != -1) {\n                subjectsFound.push(subject);\n            }\n        });\n    }\n\n    return subjectsFound;\n};\n\n/**\r\n * Creates new subject\r\n */\nmodel.createSubject = function (label, cb, cbe) {\n\n    var subject = new Subject();\n    subject.label = label;\n    subject.save(cb, cbe);\n};\n\n/**\r\n * removes accent from any string\r\n * @param str\r\n * @returns {*}\r\n */\nvar sansAccent = function sansAccent(str) {\n    if (!str) {\n        return;\n    }\n    var accent = [/[\\300-\\306]/g, /[\\340-\\346]/g, // A, a\n    /[\\310-\\313]/g, /[\\350-\\353]/g, // E, e\n    /[\\314-\\317]/g, /[\\354-\\357]/g, // I, i\n    /[\\322-\\330]/g, /[\\362-\\370]/g, // O, o\n    /[\\331-\\334]/g, /[\\371-\\374]/g, // U, u\n    /[\\321]/g, /[\\361]/g, // N, n\n    /[\\307]/g, /[\\347]/g // C, c\n    ];\n    var noaccent = ['A', 'a', 'E', 'e', 'I', 'i', 'O', 'o', 'U', 'u', 'N', 'n', 'C', 'c'];\n\n    for (var i = 0; i < accent.length; i++) {\n        str = str.replace(accent[i], noaccent[i]);\n    }\n\n    return str;\n};\n"]}